ylab="",
yaxt=NA,
main=paste(r, a, b, n, sep=", ")
)
hist(sample,
xlab="",
ylab="",
yaxt="n",
main=paste(r, a, b, n, sep=", ")
)
plot_sample = function(r, a, b, n){
sample = sapply(seq(1000), function(k) hat_var_sample(r, a, b, n))
approx_var = approx1(r, a, b, n)
approx_var2 = approx2(r, a, b, n)
mean_var = mean(sample)
hist(sample,
xlab="",
ylab="",
yaxt="n",
main=paste(r, a, b, n, sep=", ")
)
abline(v=c(mean_var, approx_var, approx_var2), col=1:3, lwd=3)
}
par(mfrow=c(2, 4))
plot_sample(2, 2, 5, 20)
plot_sample(2, 10, 20, 20)
plot_sample(-2, 2, 5, 20)
plot_sample(-2, 10, 20, 20)
plot_sample(2, 2, 5, 100)
plot_sample(2, 10, 20, 100)
plot_sample(-2, 2, 5, 100)
plot_sample(-2, 10, 20, 100)
plot_sample = function(r, a, b, n){
sample = sapply(seq(1000), function(k) hat_var_sample(r, a, b, n))
approx_var = approx1(r, a, b, n)
approx_var2 = approx2(r, a, b, n)
mean_var = mean(sample)
br = seq(0, max(sample), length.out=20)
hist(sample,
breaks=br,
xlab="",
ylab="",
yaxt="n",
main=paste(r, a, b, n, sep=", ")
)
abline(v=c(mean_var, approx_var, approx_var2), col=1:3, lwd=3)
}
par(mfrow=c(2, 4))
plot_sample(2, 2, 5, 20)
plot_sample(2, 10, 20, 20)
plot_sample(-2, 2, 5, 20)
plot_sample(-2, 10, 20, 20)
plot_sample(2, 2, 5, 100)
plot_sample(2, 10, 20, 100)
plot_sample(-2, 2, 5, 100)
plot_sample(-2, 10, 20, 100)
setwd("~/Dropbox/STATS 600/hw4")
# ------------------------------------------------------------------------------
# QUESTION 5a
# ------------------------------------------------------------------------------
set.seed(0)
beta0 = 0.
beta = matrix(c(1, 1), 2, 1)
n = 100
p = 2
X = matrix(rnorm(n*p), n, p)
mu = beta0 + X %*% beta
set.seed(1)
y = mu + rnorm(n)
# analytical solution
alpha = 0.05
CI_ratio = function(X, y, alpha){
fit = lm(y ~ X)
n = length(fit$residuals)
sig_hat2 = sum(fit$residuals^2) / fit$df.residual
t_val = qt(alpha/2, n-p-1, lower.tail=F)
covX = cov(X) * (n-1) / n
detVar = det(covX)
k = sig_hat2 * t_val^2 / (n * detVar)
beta_hat = matrix(coef(fit)[2:3], 2, 1)
a = beta_hat[2]^2 - k * covX[1, 1]
b = -2 * beta_hat[1] * beta_hat[2] - 2 * k * covX[1, 2]
c = beta_hat[1]^2 - k * covX[2, 2]
Delta = b ^ 2 - 4 * a * c
mid2 = -b / (2*a)
hw2 = sqrt(Delta) / (2*a)
L2 = mid2 - hw2
U2 = mid2 + hw2
return(c(L=L2, U=U2, mid=mid2, hw=hw2))
}
alphas = seq(0.0001, 0.1, 0.001)
CIs = t(sapply(alphas, function (alpha) CI_ratio(X, y, alpha)))
rownames(CIs) = alphas
pdf("./figs/q5a.pdf", width=8, height=5)
plot(NA, xlim=range(alphas), ylim=c(0, max(CIs[, 1:2])),
xlab=expression(alpha), ylab=expression(R))
grid()
polygon(
x=c(alphas, rev(alphas)),
y=c(CIs[, 1], rev(CIs[, 2])),
border=NA,
col=adjustcolor("blue", alpha.f=0.2)
)
lines(x=alphas, y=CIs[, 3])
dev.off()
# ------------------------------------------------------------------------------
# QUESTION 6a
# ------------------------------------------------------------------------------
munif = function(r, a, b){
d = b - a
if(r == -1) return(log(b/a)/d)
return((b^{r+1}-a^{r+1})/(d*(r+1)))
}
varunif = function(a, b) return(munif(2, a, b) - munif(1, a, b)^2)
approx1 = function(r, a, b, n){
sig2 = varunif(a, b)
mu1 = munif(1, a, b)
mut = munif(r, a, b)
mut1 = munif(r+1, a, b)
mut2 = munif(r+2, a, b)
num = mut2 - 2 * mu1 * mut1 + mu1^2 * mut
denum = n * sig2^2
return(num/denum)
}
approx2 = function(r, a, b, n){
num = munif(r, a, b)
denum = n * varunif(a, b)
return(num/denum)
}
hat_var_sample = function(r, a, b, n){
x = runif(n, a, b)
hat_var = sum(x^r * (x-mean(x))^2)
hat_var = hat_var / sum((x-mean(x))^2)^2
return(hat_var)
}
a = 2
b = 5
r = 2
n = 100
hat_var = hat_var_sample(r, a, b, n)
sample = sapply(seq(1000), function(k) hat_var_sample(r, a, b, n))
hist(sample)
approx_var = approx1(r, a, b, n)
approx_var2 = approx2(r, a, b, n)
c(hat_var, approx_var, approx_var2)
plot_sample = function(r, a, b, n){
sample = sapply(seq(1000), function(k) hat_var_sample(r, a, b, n))
approx_var = approx1(r, a, b, n)
approx_var2 = approx2(r, a, b, n)
mean_var = mean(sample)
br = seq(0, max(sample), length.out=20)
hist(sample,
breaks=br,
xlab="",
ylab="",
yaxt="n",
main=paste(r, a, b, n, sep=", ")
)
abline(v=c(mean_var, approx_var, approx_var2), col=1:3, lwd=3)
}
pdf("./figs/q6a.pdf", width=8, height=5)
par(mfrow=c(2, 4))
plot_sample(2, 2, 5, 20)
plot_sample(2, 10, 20, 20)
plot_sample(-2, 2, 5, 20)
plot_sample(-2, 10, 20, 20)
plot_sample(2, 2, 5, 100)
plot_sample(2, 10, 20, 100)
plot_sample(-2, 2, 5, 100)
plot_sample(-2, 10, 20, 100)
dev.off()
pdf("./figs/q6a.pdf", width=8, height=5)
par(mfrow=c(2, 4), mar=c(1, 1, 1, 1))
plot_sample(2, 2, 5, 20)
plot_sample(2, 10, 20, 20)
plot_sample(-2, 2, 5, 20)
plot_sample(-2, 10, 20, 20)
plot_sample(2, 2, 5, 100)
plot_sample(2, 10, 20, 100)
plot_sample(-2, 2, 5, 100)
plot_sample(-2, 10, 20, 100)
dev.off()
pdf("./figs/q6a.pdf", width=8, height=5)
par(mfrow=c(2, 4), mar=c(1, 1, 1, 5))
plot_sample(2, 2, 5, 20)
plot_sample(2, 10, 20, 20)
plot_sample(-2, 2, 5, 20)
plot_sample(-2, 10, 20, 20)
plot_sample(2, 2, 5, 100)
plot_sample(2, 10, 20, 100)
plot_sample(-2, 2, 5, 100)
plot_sample(-2, 10, 20, 100)
dev.off()
pdf("./figs/q6a.pdf", width=8, height=5)
par(mfrow=c(2, 4), mar=c(1, 3, 1, 1))
plot_sample(2, 2, 5, 20)
plot_sample(2, 10, 20, 20)
plot_sample(-2, 2, 5, 20)
plot_sample(-2, 10, 20, 20)
plot_sample(2, 2, 5, 100)
plot_sample(2, 10, 20, 100)
plot_sample(-2, 2, 5, 100)
plot_sample(-2, 10, 20, 100)
dev.off()
pdf("./figs/q6a.pdf", width=8, height=5)
par(mfrow=c(2, 4), mar=c(1, 1, 3, 1))
plot_sample(2, 2, 5, 20)
plot_sample(2, 10, 20, 20)
plot_sample(-2, 2, 5, 20)
plot_sample(-2, 10, 20, 20)
plot_sample(2, 2, 5, 100)
plot_sample(2, 10, 20, 100)
plot_sample(-2, 2, 5, 100)
plot_sample(-2, 10, 20, 100)
dev.off()
pdf("./figs/q6a.pdf", width=8, height=5)
par(mfrow=c(2, 4), mar=c(2, 1, 3, 1))
plot_sample(2, 2, 5, 20)
plot_sample(2, 10, 20, 20)
plot_sample(-2, 2, 5, 20)
plot_sample(-2, 10, 20, 20)
plot_sample(2, 2, 5, 100)
plot_sample(2, 10, 20, 100)
plot_sample(-2, 2, 5, 100)
plot_sample(-2, 10, 20, 100)
dev.off()
Rs = exp(seq(1:10))
Rs
exp(seq(-5, 5))
exp(seq(-5, 5)/10)
exp(seq(-5, 5)/5)
exp(seq(-5, 5)/3)
2 ^ seq(-4, 4)
ns = 10 ^ seq(4)
ns
B = 1000
prop = matrix(0, length(Rs), length(ns))
rownames(prop) = Rs
colnames(prop) = ns
prop
Rs = 2 ^ seq(-4, 4)
ns = 10 ^ seq(4)
B = 1000
prop = matrix(0, length(Rs), length(ns))
rownames(prop) = Rs
colnames(prop) = ns
Rs
Rs = 2 ^ seq(-4, 4)
ns = 10 ^ seq(4)
B = 1000
prop = matrix(0, length(Rs), length(ns))
rownames(prop) = Rs
colnames(prop) = ns
beta0 = 0.
p = 2
alpha = 0.05
R=2
n=100
i=1
beta = matrix(c(R, 1), 2, 1)
set.seed(0)
X = matrix(rnorm(n*p), n, p)
mu = beta0 + X %*% beta
set.seed(i)
y = mu + rnorm(n)
CI = CI_ratio(X, y, alpha)
CI
(R<=CI$U) * (R>=CI$L)
CI[1]
Rs = 2 ^ seq(-4, 4)
ns = 10 ^ seq(4)
B = 1000
prop = matrix(0, length(Rs), length(ns))
rownames(prop) = Rs
colnames(prop) = ns
beta0 = 0.
p = 2
alpha = 0.05
for(R in Rs){
beta = matrix(c(R, 1), 2, 1)
for(n in ns){
set.seed(0)
X = matrix(rnorm(n*p), n, p)
mu = beta0 + X %*% beta
covers = sapply(seq(B), function(i){
set.seed(i)
y = mu + rnorm(n)
CI = CI_ratio(X, y, alpha)
return((R<=CI[1]) * (R>=CI[2]))
})
}
}
covers = sapply(seq(B), function(i){
set.seed(i)
y = mu + rnorm(n)
CI = CI_ratio(X, y, alpha)
return((R<=CI[1]) * (R>=CI[2]))
})
covers
mean(sapply(seq(B), function(i){
set.seed(i)
y = mu + rnorm(n)
CI = CI_ratio(X, y, alpha)
return((R<=CI[1]) * (R>=CI[2]))
}))
covers = 1-mean(sapply(seq(B), function(i){
set.seed(i)
y = mu + rnorm(n)
CI = CI_ratio(X, y, alpha)
return((R<=CI[1]) * (R>=CI[2]))
}))
Rs = 2 ^ seq(-4, 4)
ns = 10 ^ seq(4)
B = 1000
prop = matrix(0, length(Rs), length(ns))
rownames(prop) = Rs
colnames(prop) = ns
beta0 = 0.
p = 2
alpha = 0.05
beta = matrix(c(R, 1), 2, 1)
set.seed(0)
X = matrix(rnorm(n*p), n, p)
mu = beta0 + X %*% beta
1-mean(sapply(seq(B), function(i){
set.seed(i)
y = mu + rnorm(n)
CI = CI_ratio(X, y, alpha)
return((R<=CI[1]) * (R>=CI[2]))
}))
Rs = 2 ^ seq(-4, 4)
ns = 10 ^ seq(4)
B = 1000
prop = matrix(0, length(Rs), length(ns))
rownames(prop) = Rs
colnames(prop) = ns
beta0 = 0.
p = 2
alpha = 0.05
for(iR in seq(length(Rs))){
R = Rs[iR]
beta = matrix(c(R, 1), 2, 1)
for(iN in seq(length(ns))){
n = ns[iN]
set.seed(0)
X = matrix(rnorm(n*p), n, p)
mu = beta0 + X %*% beta
prop[iR, iN] = 1-mean(sapply(seq(B), function(i){
set.seed(i)
y = mu + rnorm(n)
CI = CI_ratio(X, y, alpha)
return((R<=CI[1]) * (R>=CI[2]))
}))
}
}
prop
Rs = 2 ^ seq(-4, 4)
ns = 10 ^ seq(2, 4)
B = 1000
prop = matrix(0, length(Rs), length(ns))
rownames(prop) = Rs
colnames(prop) = ns
beta0 = 0.
p = 2
alpha = 0.05
for(iR in seq(length(Rs))){
R = Rs[iR]
beta = matrix(c(R, 1), 2, 1)
for(iN in seq(length(ns))){
n = ns[iN]
set.seed(0)
X = matrix(rnorm(n*p), n, p)
mu = beta0 + X %*% beta
prop[iR, iN] = 1-mean(sapply(seq(B), function(i){
set.seed(i)
y = mu + rnorm(n)
CI = CI_ratio(X, y, alpha)
return((R<=CI[1]) * (R>=CI[2]))
}), na.rm=T)
}
}
prop
Rs = 2 ^ seq(-4, 4)
ns = 5 ^ seq(2, 4)
B = 1000
prop = matrix(0, length(Rs), length(ns))
rownames(prop) = Rs
colnames(prop) = ns
beta0 = 0.
p = 2
alpha = 0.05
for(iR in seq(length(Rs))){
R = Rs[iR]
beta = matrix(c(R, 1), 2, 1)
for(iN in seq(length(ns))){
n = ns[iN]
set.seed(0)
X = matrix(rnorm(n*p), n, p)
mu = beta0 + X %*% beta
prop[iR, iN] = 1-mean(sapply(seq(B), function(i){
set.seed(i)
y = mu + rnorm(n)
CI = CI_ratio(X, y, alpha)
return((R<=CI[1]) * (R>=CI[2]))
}), na.rm=T)
}
}
prop
CI
Rs = 2 ^ seq(-4, 4)
ns = 5 ^ seq(2, 4)
B = 1000
prop = matrix(0, length(Rs), length(ns))
rownames(prop) = Rs
colnames(prop) = ns
beta0 = 0.
p = 2
alpha = 0.05
for(iR in seq(length(Rs))){
R = Rs[iR]
beta = matrix(c(R, 1), 2, 1)
for(iN in seq(length(ns))){
n = ns[iN]
set.seed(0)
X = matrix(rnorm(n*p), n, p)
mu = beta0 + X %*% beta
prop[iR, iN] = 1-mean(sapply(seq(B), function(i){
set.seed(i)
y = mu + rnorm(n)
CI = CI_ratio(X, y, alpha)
return((R<=CI[2]) * (R>=CI[1]))
}), na.rm=T)
}
}
matplot(prop)
prop
for(iR in seq(length(Rs))){
R = Rs[iR]
beta = matrix(c(R, 1), 2, 1)
for(iN in seq(length(ns))){
n = ns[iN]
set.seed(0)
X = matrix(rnorm(n*p), n, p)
mu = beta0 + X %*% beta
prop[iR, iN] = mean(sapply(seq(B), function(i){
set.seed(i)
y = mu + rnorm(n)
CI = CI_ratio(X, y, alpha)
return((R<=CI[2]) * (R>=CI[1]))
}), na.rm=T)
}
}
matplot(prop, type="l", ylim=0:1)
matplot(prop, type="l")
grid()
matplot(prop, type="l", ylim=c(0.9, 1.))
grid()
matplot(prop, type="l", ylim=c(0.9, 1.), log="x")
grid()
matplot(prop, x=Rs, type="l", ylim=c(0.9, 1.), log="x")
grid()
matplot(prop, x=Rs, type="l", ylim=c(0.92, 0.98), log="x")
grid()
matplot(prop, x=Rs, type="l", ylim=c(0.92, 0.98), log="x",
xlab="R", ylab="Coverage")
grid()
legend("topright")
legend("topright", legend=ns, title="n", lty=1:3, col=1:3)
pdf("./figs/q5b.pdf", width=8, height=5)
matplot(prop, x=Rs, type="l", ylim=c(0.92, 0.98), log="x",
xlab="R", ylab="Coverage")
grid()
legend("topright", legend=ns, title="n", lty=1:3, col=1:3)
dev.off()
Rs = 2 ^ seq(-4, 4)
ns = 5 ^ seq(2, 4)
B = 10000
prop = matrix(0, length(Rs), length(ns))
rownames(prop) = Rs
colnames(prop) = ns
beta0 = 0.
p = 2
alpha = 0.05
for(iR in seq(length(Rs))){
R = Rs[iR]
beta = matrix(c(R, 1), 2, 1)
for(iN in seq(length(ns))){
n = ns[iN]
set.seed(0)
X = matrix(rnorm(n*p), n, p)
mu = beta0 + X %*% beta
prop[iR, iN] = mean(sapply(seq(B), function(i){
set.seed(i)
y = mu + rnorm(n)
CI = CI_ratio(X, y, alpha)
return((R<=CI[2]) * (R>=CI[1]))
}), na.rm=T)
}
}
pdf("./figs/q5b.pdf", width=8, height=5)
matplot(prop, x=Rs, type="l", ylim=c(0.92, 0.98), log="x",
xlab="R", ylab="Coverage")
grid()
legend("topright", legend=ns, title="n", lty=1:3, col=1:3)
dev.off()
pdf("./figs/q5b.pdf", width=8, height=5)
matplot(prop, x=Rs, type="l", ylim=c(0.93, 0.97), log="x",
xlab="R", ylab="Coverage", lty=1)
grid()
legend("topright", legend=ns, title="n", lty=1, col=1:3,
bg="white")
dev.off()
