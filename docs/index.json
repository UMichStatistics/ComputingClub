[{"authors":["derek"],"categories":null,"content":"About me ","date":1602160200,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":1602160200,"objectID":"bc34d76bc3e159b0c10dc7a9fb6aef07","permalink":"https://UMichStatistics.github.io/ComputingClub/authors/dan/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/ComputingClub/authors/dan/","section":"authors","summary":"About me ","tags":null,"title":"Dan Kessler","type":"authors"},{"authors":["admin"],"categories":null,"content":"About us This page is for the Computing Club overseen by the UM Stats PhD Computing Committee. Information about meeting times and presented topics will be posted here.\nThe only guiding principle is that the topic should have some potential application to a Statistics research workload, which leaves a broad range of topics.\n","date":1583863200,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":1583782078,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"https://UMichStatistics.github.io/ComputingClub/authors/admin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/ComputingClub/authors/admin/","section":"authors","summary":"About us This page is for the Computing Club overseen by the UM Stats PhD Computing Committee. Information about meeting times and presented topics will be posted here.\nThe only guiding principle is that the topic should have some potential application to a Statistics research workload, which leaves a broad range of topics.","tags":null,"title":"Statistics Computing Club","type":"authors"},{"authors":["rob"],"categories":null,"content":"About me ","date":1574267400,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":1580833066,"objectID":"1e69b33059cc9342e33da675bf1c651a","permalink":"https://UMichStatistics.github.io/ComputingClub/authors/rob/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/ComputingClub/authors/rob/","section":"authors","summary":"About me ","tags":null,"title":"Rob Trangucci","type":"authors"},{"authors":["xiping"],"categories":null,"content":"About me ","date":1573057800,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":1580833066,"objectID":"2dee3fb3bf4f399c6dd125cf65a952be","permalink":"https://UMichStatistics.github.io/ComputingClub/authors/ziping/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/ComputingClub/authors/ziping/","section":"authors","summary":"About me ","tags":null,"title":"Ziping Xu","type":"authors"},{"authors":["jregier"],"categories":null,"content":"About me I’m an applied statistician working on problems in astronomy and genomics. Graphical models, variational inference, and deep learning are some of the statistical tools I use.\nPreviously, I was a statistics PhD student at UC Berkeley and a postdoc in Michael Jordan’s research group. For more about me, please see my publications and my CV.\n","date":1571848200,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":1580833066,"objectID":"a47974f9e0ec82ef034bbaf066bfb35e","permalink":"https://UMichStatistics.github.io/ComputingClub/authors/jregier/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/ComputingClub/authors/jregier/","section":"authors","summary":"About me I’m an applied statistician working on problems in astronomy and genomics. Graphical models, variational inference, and deep learning are some of the statistical tools I use.\nPreviously, I was a statistics PhD student at UC Berkeley and a postdoc in Michael Jordan’s research group. For more about me, please see my publications and my CV.","tags":null,"title":"Jeffrey Regier","type":"authors"},{"authors":["simon"],"categories":null,"content":"About me I currently am a first year Ph.D. Student at the University of Michigan. My research interest are broadly contained in computational statistics. In particular, penalized regression and variable selection problems as well as approximate Bayesian inference and MCMC methods are all of interest to me. Previously, I worked as a Data Science intern at the Ubisoft Montreal User Research Lab on online skill rating using approximate Bayesian inference. I did a Master’s at the University of Montreal and my thesis focused on an adaptive Multiple-Try Metropolis algorithm aimed at sampling from complex distributions.\n","date":1570638600,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":1580833066,"objectID":"39676266dc03f7a9ebc998657bf4cd2d","permalink":"https://UMichStatistics.github.io/ComputingClub/authors/simon/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/ComputingClub/authors/simon/","section":"authors","summary":"About me I currently am a first year Ph.D. Student at the University of Michigan. My research interest are broadly contained in computational statistics. In particular, penalized regression and variable selection problems as well as approximate Bayesian inference and MCMC methods are all of interest to me. Previously, I worked as a Data Science intern at the Ubisoft Montreal User Research Lab on online skill rating using approximate Bayesian inference. I did a Master’s at the University of Montreal and my thesis focused on an adaptive Multiple-Try Metropolis algorithm aimed at sampling from complex distributions.","tags":null,"title":"Simon Fontaine","type":"authors"},{"authors":["derek"],"categories":null,"content":"About me ","date":1568835000,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":1580833066,"objectID":"26db54e84a45b767b8ee836b1c5f8134","permalink":"https://UMichStatistics.github.io/ComputingClub/authors/derek/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/ComputingClub/authors/derek/","section":"authors","summary":"About me ","tags":null,"title":"Derek Hansen","type":"authors"},{"authors":["michael"],"categories":null,"content":"About me ","date":-62135596800,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":1579664110,"objectID":"509d4a3df3ec008cfbb7dc4951a619f0","permalink":"https://UMichStatistics.github.io/ComputingClub/authors/michael/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/ComputingClub/authors/michael/","section":"authors","summary":"About me ","tags":null,"title":"Michael Law","type":"authors"},{"authors":["username"],"categories":null,"content":"About me ","date":-62135596800,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":1570209932,"objectID":"d77af74b00d7d7e6b445db2a76fc0d96","permalink":"https://UMichStatistics.github.io/ComputingClub/authors/blank/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/ComputingClub/authors/blank/","section":"authors","summary":"About me ","tags":null,"title":"YOUR-HAME-HERE","type":"authors"},{"authors":null,"categories":null,"content":"In this tutorial, we will go through one way of setting up your personal academic website. We will cover\n how to create a website, two ways to host your website for everyone to see!  Why have a personal academic website Having a personal website serves multiple goals:\n Professional goals  Host a public resume List your publications, research interests, experience, etc. Allows people to find you and contact you Have an easy way to point to you \u0026ldquo;Online presence\u0026rdquo;   Exposure for your work \u0026amp; research  Build workshops, courses and tutorials for everyone to access Present your research in alternative ways (other than articles, talks, posters, etc.)   Host content for courses  e.g. Canvas may have some limitations that a website might not have Make your teaching content public    Other uses for simple website\n Research group page Student organization Documenting a software or package you developed Online book Artist portfolio Blogging  A quick primer on (static) websites Most websites you encounter consist of html (HyperText Markup Language) code and embed other languages to allow more interaction (javascript, Perl, etc.). A website contains multiples pages, often arranged into different subdirectories, just like regular file management. In particular, you can see a website as a tree where the accessible leaves are the .html pages.\nEach page you access is a generally a .html file, but in general no one actually write html directly\u0026mdash;developers use programming languages that generate the html for themselves. The style of a page\u0026mdash;colors, font, placement, etc.\u0026mdash;are generally contained in css (Cascading Style Sheets) files. One goal of this workshop is to build a website without ever writing html or css.\nindex.html has a special status within a directory. Accessing site/subdir/ automatically loads site/subdir/index.html.\nAbout Hugo Hugo is a framework for developing websites. In particular, it generates the desired html pages given some developer input in Markdown files. The engine uses the Go language to interpret the Markdown and produce the corresponding html files.\nIn addition to Markdown files, the developer also modify configuration files and Markdown front matters, in simple toml format, to determine meta-information about the website and control visual aspects. Both Markdown and toml languages have simple and intuitive syntax so the learning curve is very steep. Once the base website is set up, editing and adding content is only a matter of creating folder, creating and editing Markdown files and editing toml files.\nMarkdown file front matters An important concept to understand about Markdown files is the file layout. Each .md file must contain a front matter part which describe some meta information about the content of the file; the front matter is then followed by the content itself in the body of the file. In the present context, the front matters will contain, among other things,\n a high-level description of the page, the type of page to specify to the Hugo compiler, some details about indexing and referencing across pages.  Example:\n--- # Front matter title: \u0026#34;MyFirstPost\u0026#34; subtitle: \u0026#34;\u0026#34; summary: \u0026#34;\u0026#34; authors: [] tags: [] categories: [] date: 2019-10-04T18:18:52-04:00 lastmod: 2019-10-04T18:18:52-04:00 featured: false draft: false --- \u0026lt;!-- Body of the file --\u0026gt; The content of the post goes here ... The Academic theme for Hugo The way to use Hugo is to start from a template (or theme) and adapt it to your personal needs. Different themes implement different type of contents and are therefore suited for different purpose.\nIn this tutorial we will consider the Academic theme which is one of the more complete theme and is particularly well-suited for an academic website (as the name suggests!) Here are some of the things Academic allows:\n Blog posts Documentation Publications Talks Projects Multiple authors General pages Home page with widgets structure  More Hugo themes  Resume-type themes  Resume theme is another slick theme I found.   Documentation-type themes (many equivalent options) Portofolio-type themes (many equivalent options) Blog-type themes (many equivalent options)  Alternatives to Hugo  HTML from scratch  Highly not recommended   Jekyll  Very similar to Hugo (all content is Markdown, similar shell commands) Slightly more complicated, but has slightly more features I have not found a theme that matches the capabilities of Academic for Hugo (see e.g. Jekyll Academic and its demo site) GitHub Pages built-in themes (using Jekyll) can be up in a few clicks   WYSIWYG editor  WordPress Google Sites WiX and many others   More advanced alternatives  Grav Drupal    Alternative hosting  Netlify WordPress and WiX offers free hosting options Any other web host ($, e.g. AWS)  Main takeaways  Creating your own website is easy and you should definitely do it soon. People have made it easy for you to display your work; make use of all the tools available! Creating the content for your website, not building and deploying it, should consist most of the work you have to do.  ","date":1536451200,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1570624056,"objectID":"fbcc31b76b07e6c533799d6286568bb5","permalink":"https://UMichStatistics.github.io/ComputingClub/workshops/hugo_academic/","publishdate":"2018-09-09T00:00:00Z","relpermalink":"/ComputingClub/workshops/hugo_academic/","section":"workshops","summary":"A tutorial on how to create a personal academic website using the Academic theme for Hugo and host to on GitHub pages or UMich personal space.","tags":null,"title":"Building \u0026 Hosting a Personal Academic Website Using Hugo","type":"docs"},{"authors":null,"categories":null,"content":"This website is powered the Academic theme for Hugo. The documentation they provide is quite extensive, so we summarize some of the important features relevant to the current website and present workflow ideas on how to update the website.\nHugo and Markdown While the website consists of html source interpreted by the visitor's browser, its content is generated from Markdown. Hugo acts as an interpreter and compiler: it translates the file structure, the Markdown files and some configuration files (yaml or toml) into the html files visible to the visitor.\nRepository description The website is hosted on GitHub Pages. The static contents of the website appears in the docs folder of the UmichStatistics GitHub organization repository ComputingClub. The other folders and files of the repository are used to generate the website: only the docs folder is necessary for the static website to be operational.\nDeployment Any change in the files outside of the docs folder will not affect the public website. In order for the changes to become public, it is necessary to deploy the website, i.e. to use Hugo to update the files in docs. Hence, anyone updating the website needs to run Hugo for the changes to appear. More details in Deployment\nThe maintainers are currently considerings ways to automatically deploy the website upon a push to the repository. More to come\u0026hellip;\nExternal resources  Academic Hugo Documentation  Page Builder and widgets description   Font Awesome Icons  ","date":1536451200,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1569436453,"objectID":"989426793d2ad203cae764c09b8fff59","permalink":"https://UMichStatistics.github.io/ComputingClub/workshops/edit_site/","publishdate":"2018-09-09T00:00:00Z","relpermalink":"/ComputingClub/workshops/edit_site/","section":"workshops","summary":"A guide on how to add new content and modify the website.","tags":null,"title":"Editing the Club's website","type":"docs"},{"authors":null,"categories":null,"content":"What is Functional Programming?  Functions are like those in mathematics:  They always return the same output for a given input No side-effects (e.g. modification of global variables) Functions that satisfy (1-2) are called pure   Functions are first-class objects which can be passed as arguments to other functions (a.k.a. functionals) There is no changing state as the program runs; values are assigned once as functions of other values and inputs Everyday example: Microsoft Excel (without any VBA scripting!)  Why use functional programming?  Through avoiding mutable state and composing pure functions, an FP program is also a pure function of its input This makes FP programs\u0026hellip;  Modular Predictable Easier to test Avoid common pitfalls involving changing state (e.g. global variables)    Why use functional programming? Natural functionals in the FP paradigm include \u0026hellip;\n map: (where $f: X \\to Y$)  $$((x_1, \u0026hellip;, x_n), f) \\to (f(x_1), \u0026hellip;, f(x_n)))$$\n filter: (where $f$ is a predicate function $f:X \\to \\{0, 1\\}$)  $$((x_1, \u0026hellip;, x_n), f) \\to (x_i : f(x_i) = 1)$$\n reduce: (where $f$ is an operator function $f:X \\times X \\to X$)  $$((x_1, \u0026hellip;, x_n), f) \\to f(x_1, f(x_2, f(x_3, f(\u0026hellip;))))$$\nFunctional Programming in R  R is multi-paradigm: it does not strictly adhere to FP principles, but it offers capability to use FP patterns Examples in base R include:  Map, lapply, sapply, apply, vapply, mapply Reduce Filter   The purrr package by Hadley Wickham et al improves the the functional programming tools to R which are syntactically consistent and type-safe.  Mapping  map is pretty much equivalent to lapply, but has some additional features  library(purrr) my_sqrt \u0026lt;- function(x) sqrt(x) str(map(c(1,2,3,4,5), my_sqrt)) ## List of 5 ## $ : num 1 ## $ : num 1.41 ## $ : num 1.73 ## $ : num 2 ## $ : num 2.24 str(lapply(c(1,2,3,4,5), my_sqrt)) ## List of 5 ## $ : num 1 ## $ : num 1.41 ## $ : num 1.73 ## $ : num 2 ## $ : num 2.24 Mapping  If we want an atomic double vector instead of a list, the map_dbl ensures we always receive that. sapply does the same thing in this particular instance, but we can run into problems\u0026hellip;  str(map_dbl(c(1,2,3,4,5), my_sqrt)) ## num [1:5] 1 1.41 1.73 2 2.24 str(sapply(c(1,2,3,4,5), my_sqrt)) ## num [1:5] 1 1.41 1.73 2 2.24 Problem: sapply is not type-safe!  Example: Our colleague worked hard to make my_sqrt handle any real number. They even overwrote the function my_sqrt to make the transition seamless!  sqrt_general \u0026lt;- function(x) { if(x \u0026gt;= 0) sqrt(x) else return(paste0(sqrt(abs(x)), \u0026#34;i\u0026#34;)) } my_sqrt \u0026lt;- sqrt_general my_sqrt(5) ## [1] 2.236068 my_sqrt(-5) ## [1] \u0026quot;2.23606797749979i\u0026quot; Problem: sapply is not type-safe! str(sapply(c(1,2,3,4,5), my_sqrt)) ## num [1:5] 1 1.41 1.73 2 2.24 str(sapply(c(-1,2,-3,4,5), my_sqrt)) ## chr [1:5] \u0026quot;1i\u0026quot; \u0026quot;1.4142135623731\u0026quot; \u0026quot;1.73205080756888i\u0026quot; \u0026quot;2\u0026quot; ...  This is a great way to propogate errors. We have no way to guarentee whether sapply will return a \u0026ldquo;double\u0026rdquo; vector or a \u0026ldquo;string\u0026rdquo; vector.  map_dbl is type-safe! str(map_dbl(c(1,2,3,4,5), my_sqrt)) ## num [1:5] 1 1.41 1.73 2 2.24 try(str(map_dbl(c(-1,2,-3,4,5), my_sqrt))) ## Error : Can't coerce element 1 from a character to a double  The map_* family of functions allows us to explictly impose which type we expect the output vector to be.  They \u0026ldquo;return an atomic vector of the indicated type (or die trying)\u0026rdquo; (documentation)    map_chr is type-safe! map_chr(c(1,2,3,4,5), my_sqrt) ## [1] \u0026quot;1.000000\u0026quot; \u0026quot;1.414214\u0026quot; \u0026quot;1.732051\u0026quot; \u0026quot;2.000000\u0026quot; \u0026quot;2.236068\u0026quot; map_chr(c(-1,2,-3,4,5), my_sqrt) ## [1] \u0026quot;1i\u0026quot; \u0026quot;1.414214\u0026quot; \u0026quot;1.73205080756888i\u0026quot; ## [4] \u0026quot;2.000000\u0026quot; \u0026quot;2.236068\u0026quot;  Suppose our colleague convinced our team lead that we should work exclusively with strings to accomodate complex numbers We use map_chr to reflect that now we want the output to be a character vector. No errors now because both doubles and characters can be coerced to double.  map_* is type-safe!  sapply implicitly coerces to an atomic vector in the most general unit in the output for \u0026ldquo;convenience\u0026rdquo;, but this is very prone to unexpected errors. Most of the time, it is better to be explicit to catch any errors early and keep type stability. Can also use _lgl for logical, _int for integer, _raw for raw type, _dfr and _dfc for data-table columns and rows.  Some more cool features of map - anonymous functions  Can construct function in the argument using symbol notation  map_dbl(c(1,2,3,4,5), ~.x^2 + .x + sin(.x)) ## [1] 2.841471 6.909297 12.141120 19.243198 29.041076 Some more cool features of map - multiple arguments  Can use map2_* for 2 argument functions; pmap_* for n-argument functions The $i$th positional argument can be referenced with ..i syntax.  map2_dbl(c(1,2,3,4,5), c(5,6,8,9,11), ~.x^2 + .y^2 + sin(.x)) ## [1] 26.84147 40.90930 73.14112 96.24320 145.04108 pmap_dbl(list(1:5, 11:15, 21:25), ~..1 + ..2 + ..3) ## [1] 33 36 39 42 45 pmap_dbl(list(1:5, 11:15, 21:25), function(x,y,z) x+y+z) ## [1] 33 36 39 42 45 Some more cool features of map - imap  Can use imap if the names of the input list/vector are important. imap_*(x, f(x,y)) is equivalent to map2_*(x, names(x), f(x,y)) The type dfr indicates that we expect the function to output a DataFrame Row, which are then bound row-wise into a single dataframe.  library(dplyr) midterm_grades \u0026lt;- c(Dan = 100, Derek = 20, Rob = 100) grade_tbl \u0026lt;- imap_dfr(midterm_grades, ~tibble(name = .y, grade = .x, pass = .x \u0026gt;= 50)) grade_tbl ## # A tibble: 3 x 3 ## name grade pass ## \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;lgl\u0026gt; ## 1 Dan 100 TRUE ## 2 Derek 20 FALSE ## 3 Rob 100 TRUE Some more cool features of map - map_if  map_if allows for use of a predicate function (or a vector) to only apply to certain values. It always returns a list (since the input and output could be of different types).  str(map_if(midterm_grades, !grade_tbl$pass, ~NA_real_)) ## List of 3 ## $ Dan : num 100 ## $ Derek: num NA ## $ Rob : num 100 str(map_if(midterm_grades, ~.x \u0026lt;= 50, ~\u0026#34;FAIL!!\u0026#34;)) ## List of 3 ## $ Dan : num 100 ## $ Derek: chr \u0026quot;FAIL!!\u0026quot; ## $ Rob : num 100 Some more cool features of map - map_if  modify_if``` is the same as map_if`, but enforces that the type is the same as the input  str(modify_if(midterm_grades, ~.x \u0026lt;= 50, ~NA_real_)) ## Named num [1:3] 100 NA 100 ## - attr(*, \u0026quot;names\u0026quot;)= chr [1:3] \u0026quot;Dan\u0026quot; \u0026quot;Derek\u0026quot; \u0026quot;Rob\u0026quot; try(str(modify_if(midterm_grades, ~.x \u0026lt;= 50, ~\u0026#34;FAIL!!\u0026#34;))) ## Error : Can't coerce element 1 from a character to a double keep and discard ## Only keep students who passed keep(midterm_grades, ~.x \u0026gt;= 50) ## Dan Rob ## 100 100 ## Remove students who passed to get a list of students on notice discard(midterm_grades, grade_tbl$pass) ## Derek ## 20 purrr in the wild - succinctly extract results from different models library(dplyr) library(magrittr) aic_bic_tbl \u0026lt;- list( `Binary Poverty Indicator Interaction` = logis_res_census_binpoor, `Poverty Rate Interaction` = logis_res_census, `Income Interaction` = logis_res_census_inc_interact, `No Income` = logis_res_census_noincome, `No Poverty Rate` = logis_res_census_nopoor ) %\u0026gt;% map2_dfr(names(.), ~tibble(model = .y, aic = AIC(.x), bic = BIC(.x))) %\u0026gt;% arrange(aic) aic_bic_tbl  Example directly from my applied qual. (Could have used imap_dfr!)   purrr was designed by the same authors as dplyr and plays nicely with other tidyverse functions (including the pipe object %\u0026gt;%).  purrr in the wild - reduce to best model best_model \u0026lt;- list( `Binary Poverty Indicator Interaction` = logis_res_census_binpoor, `Poverty Rate Interaction` = logis_res_census, `Income Interaction` = logis_res_census_inc_interact, `No Income` = logis_res_census_noincome, `No Poverty Rate` = logis_res_census_nopoor ) %\u0026gt;% reduce(~ifelse(BIC(.x) \u0026lt; BIC(.y), .y, .x))  reduce function applies an operator function to reduce a vector to one value Illustrating example, but in reality it would be more efficient to use which.max(aic_bic_tbl$bic) (because it uses C code and more efficient algorithm)  Conclusions  Through the Functional Programming (FP) paradigm, purrr allows for more concise and error-robust R coding patterns Allows complex operations to be composed from simple building blocks by operating on user-specified functions Many, many more features are contained in purrr beyond what was shown today  Further reading  Tidyverse website \u0026ldquo;Iteration\u0026rdquo; chapter in R for Data Science Hadley's plyr package which handles array and data.frame inputs.   Thank You! ","date":1536451200,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1536451200,"objectID":"ada162679960820613751d888c288931","permalink":"https://UMichStatistics.github.io/ComputingClub/workshops/purrr/","publishdate":"2018-09-09T00:00:00Z","relpermalink":"/ComputingClub/workshops/purrr/","section":"workshops","summary":"Functional Programming in R with purrr","tags":null,"title":"Functional Programming in R with purrr","type":"docs"},{"authors":null,"categories":null,"content":"A collection of external resources classified by subjects (see menu on the left). Feel free to add any link to external resources here!\n","date":1536451200,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1569369877,"objectID":"59c1a3532c7e6c5ec860704a6a171c03","permalink":"https://UMichStatistics.github.io/ComputingClub/workshops/resources/","publishdate":"2018-09-09T00:00:00Z","relpermalink":"/ComputingClub/workshops/resources/","section":"workshops","summary":"A collection of external resources","tags":null,"title":"Resources","type":"docs"},{"authors":null,"categories":null,"content":"A collection of external resources classified by subjects (see menu on the left). Feel free to add any link to external resources here!\n","date":1536451200,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1581973386,"objectID":"787af4087232dfb594a1976998019e23","permalink":"https://UMichStatistics.github.io/ComputingClub/workshops/tutorials/","publishdate":"2018-09-09T00:00:00Z","relpermalink":"/ComputingClub/workshops/tutorials/","section":"workshops","summary":"Articles written by our members","tags":null,"title":"Tutorials","type":"docs"},{"authors":null,"categories":null,"content":"General Many methods have an inplace argument which performs the operation inplace when set to True so that you do not need to overwrite the original DataFrame. It produces cleaner code as well as saves time and memory! Note that method chaining does not work with inplace=True since nothing is returned.\nRows and columns behave in the exact same way. Indeed, they are both implemented using pandas.Index or pandas.MultiIndex objects. The main difference is that columns can be indexed in an additional way since pandas.DataFrame objects can be access through the native python indexing, i.e., df[column]. Otherwise, most (all?) operations can be perform along any of the two axes. (If not, there is the .T or .transpose() methods to flip the DataFrame.)\nData Importation You probably all know about pandas.read_csv to load text files into pandas DataFrames. Here are some interesting options you might not know about:\n You can overwrite the column names directly using names=[...] and header=0; You can set the index automatically using index_col=\u0026quot;column_name\u0026quot;; You can drop columns or rows before loading using usecols=[...] or skiprows=[...], respectively; If NAs are encoded in a particular way, you can specify it using na_values=[...]; encoding might be useful to fix some problems related to encoding; delim_whitespace can be useful when the separator is a variable number of whitespaces instead of a given character (,, \\t, etc.);  Most of these operations can be done in separate steps after loading(for example, you could do a .replace(..., inplace=True) to change some values to NaN), but it might be better to do them in one step to improve legibility, speed and memory consumption.\nData Exportation You are probably aware of the .to_csv method to write a pandas DataFrame to a text file. Here are some interesting options:\n na_rep to encode NAs in a particular way; columns to only write specific columns; index, index_label and header to control the output.  The .to_latex() method offers a convenient way to export a pandas DataFrame to LaTeX format. I have found that the column formatting does not work very well sometimes; you can perform the formatting by hand before using to_latex using commands such as:\ndf[\u0026#34;column\u0026#34;] = df[\u0026#34;column\u0026#34;].apply(\u0026#34;{:.2f}\u0026#34;.format) # float formatting df[\u0026#34;column\u0026#34;] = df[\u0026#34;column\u0026#34;].apply(\u0026#34;{:.2f} %\u0026#34;.format) # add a percentage sign df[\u0026#34;ci\u0026#34;] = df[[\u0026#34;lower\u0026#34;, \u0026#34;upper\u0026#34;]].apply(lambda x: \u0026#34;[{:.2f}, {:.2f}]\u0026#34;.format(x[\u0026#34;lower\u0026#34;], x[\u0026#34;upper\u0026#34;]), axis=0) # to converct CI bounds to an interval Accessing Values There are multiple ways to access the contents in a pandas DataFrame (most also work for Series as well).\nUsing python indexing (a DataFrame behaves as a dictionary of columns):\n df[columns]: return all columns in columns;  columns can be string (one column is returned) or a list of string.    Using .loc:\n df.loc[index_values]: returns the rows corresponding to index_values;  index_values can be a single index value, a list of index values, a slice of values startrow:endrow or even a Boolean of the same length as df;   df.loc[index_values, columns]: returns the specified columns of the specified rows; df.loc[:, columns]: does the same as df[columns]; df.loc[index_values, :]: does the same as df.loc[index_values].  Using .iloc:\n df.iloc[index]: return the rows corresponding to index using integer indexing;  index can be a single integer, a list of integers or even a range of integer startnum:endnum;   df.iloc[row_index, col_index]: returns the specified rows and columns.  Using .at to access a single value:\n similar indexing as .loc.  Using .iat:\n similar indexing as .iloc.  Using .query() can be used to select rows on some truth value defined by a string statement similar to that of SQL.\nHere are some interesting methods to create Boolean arrays to use in .loc[]:\n .isna(), .notna() checks whether values are NaN; .isin() corresponds to elementwise native in; .le, .lt, .ge, .gt, .eq and .ne are equivalent to \u0026lt;=, \u0026lt;, \u0026gt;=, \u0026gt;, == and !=, respectively; .between_time() when dealing with datetime format; Any Series methods:  .between() is a nice shorthand for two comparisons; .str.\u0026lt;method\u0026gt; when dealing with strings .dt.\u0026lt;method\u0026gt; when dealing with datetime formats .cat.\u0026lt;method\u0026gt; when dealing with categorical values    Setting Values To set values in a existing DataFrame, you can use all previous indexing methods:\n Use df[columns] or df.loc[:, columns] or df.iloc[:, columns] to set or add columns; Use df.loc[index] or df.loc[index, :] or df.iloc[index, :] to set or add rows; Use df.loc[index, columns] or df.iloc[index, columns] to set specific entries: same with .at and .iat to fill a specific cell.  Note that new rows and columns might be added if index or columns contains values not in the current df. The .iloc and iat indexing generally does not support adding new rows and columns and raises an out-of-bound error when trying to set values outside the current df.\nFor any of these methods the syntax is through assignment where the right-hand side can be various things:\n a list of list (e.g. a numpy array), a dict column: values, a single value copied for all cells, a pandas Series or Dataframe object, and many more combinations!  To add new rows to a DataFrame, you can use one of the following:\n df.loc[index] = row merging two DataFrames with same columns (see Merging DataFrames)  To add new columns:\n Use df[columns] = values (multiple columns) Use df.insert(loc, column, values) (single column) merging two DataFrames with same indices (see Merging DataFrames)  Other interesting methods:\n The df.where() method can also be used to replace values where some condition is false; The df.mask() method is the converse to .where: it replaces values where the condition is true; The df.replace() replaces values; Using df.fillna() does what its name indicates; The df.update(other_df) can be useful in some cases (see Merging DataFrames for more details); The df.eval(str, inplace=True) method lets you compute a new column using a string description;  Subsetting Data Subsetting data can be viewed in two ways: selecting rows/columns or dropping rows/data.\nTo select rows or columns, refer to Accessing data.\nTo drop rows or columns, you can:\n Select your subset and overwrite the DataFrame as in df = df.loc[...]; Use the df.drop(..., inplace=True) method to drop rows or columns; The df.filter() method can select some rows/columns based on their content (like or a regex). Using df.take() performs similarly as .iloc[];  For more specific use cases:\n Use df.drop_duplicates(..., inplace=True) to drop repeated rows Use df.dropna(..., inplace=True) to drop rows or columns if they contain NaN values. Use df.truncate() when the condition is a range of indices.  Reshaping DataFrames Transpose:\n The method s .T and .transpose() do the same thing  Wide to long format\n The method df.melt(): take multiple columns into (column name, value); The method df.stack(): similar to melt, but less general; puts the original column names into a MultiIndex rather than new columns; The method df.explode(): when cells contains lists, this methods expand the dataframe for each element of the list.  import pandas as pd df_wide = pd.DataFrame({\u0026#34;A\u0026#34;: range(5), \u0026#34;B\u0026#34;: range(5, 10), \u0026#34;C\u0026#34;: range(10, 15)}, index=list(\u0026#34;abcde\u0026#34;)) print(df_wide)  A B C a 0 5 10 b 1 6 11 c 2 7 12 d 3 8 13 e 4 9 14  print(df_wide.melt(id_vars=\u0026#34;A\u0026#34;, value_vars=list(\u0026#34;BC\u0026#34;)))  A variable value 0 0 B 5 1 1 B 6 2 2 B 7 3 3 B 8 4 4 B 9 5 0 C 10 6 1 C 11 7 2 C 12 8 3 C 13 9 4 C 14  print(df_wide.stack()) a A 0 B 5 C 10 b A 1 B 6 C 11 c A 2 B 7 C 12 d A 3 B 8 C 13 e A 4 B 9 C 14 dtype: int64  df_wide = pd.Series([range(3), range(1), range(10)]) print(df_wide) 0 (0, 1, 2) 1 (0) 2 (0, 1, 2, 3, 4, 5, 6, 7, 8, 9) dtype: object  print(df_wide.explode()) 0 0 0 1 0 2 1 0 2 0 2 1 2 2 2 3 2 4 2 5 2 6 2 7 2 8 2 9 dtype: object  Long to wide\n The method df.pivot() creates columns based on unique levels of a given column filled with the corresponding values; The method df.pivot_table() generalizes .pivot to more complex situations where there may be duplicate entries which have to be aggregated. This is related to performing .groupby() chained with .agg(), but may have different output format; The method df.unstack() pivots a DataFrame using its index (useful for MultiIndex DataFrames mostly).  df_long = pd.DataFrame({\u0026#34;id\u0026#34;: list(range(4))*3, \u0026#34;type\u0026#34;: [\u0026#34;A\u0026#34;]*4 + [\u0026#34;B\u0026#34;]*4 + [\u0026#34;C\u0026#34;]*4, \u0026#34;value\u0026#34;:range(12)}) print(df_long)  id type value 0 0 A 0 1 1 A 1 2 2 A 2 3 3 A 3 4 0 B 4 5 1 B 5 6 2 B 6 7 3 B 7 8 0 C 8 9 1 C 9 10 2 C 10 11 3 C 11  print(df_long.pivot(index=\u0026#34;id\u0026#34;, columns=\u0026#34;type\u0026#34;, values=\u0026#34;value\u0026#34;)) type A B C id 0 0 4 8 1 1 5 9 2 2 6 10 3 3 7 11  print(df_long.pivot_table(index=\u0026#34;type\u0026#34;, aggfunc=\u0026#34;min\u0026#34;))  id value type A 0 0 B 0 4 C 0 8  # equivalent groupby+agg print(df_long.groupby(\u0026#34;type\u0026#34;).agg({\u0026#34;value\u0026#34;: \u0026#34;min\u0026#34;}))  value type A 0 B 4 C 8  print(df_long.set_index([\u0026#34;type\u0026#34;, \u0026#34;id\u0026#34;]))  value type id A 0 0 1 1 2 2 3 3 B 0 4 1 5 2 6 3 7 C 0 8 1 9 2 10 3 11  print(df_long.set_index([\u0026#34;type\u0026#34;, \u0026#34;id\u0026#34;]).unstack())  value id 0 1 2 3 type A 0 1 2 3 B 4 5 6 7 C 8 9 10 11  print(df_long.set_index([\u0026#34;id\u0026#34;, \u0026#34;type\u0026#34;]).unstack())  value type A B C id 0 0 4 8 1 1 5 9 2 2 6 10 3 3 7 11  Cross Tabulation\nThe pd.crosstab() function allows you to compute frequency tables along multiple groupings.\nMerging DataFrames Here are a few options on how to merge multiple DataFrames together. See Merge, join, and concatenate for more details.\nConcatenate\nThe function pd.concat([df1, df2]) lets you litteraly concatenate multiple DataFrames along some axis. This function works either as an inner join or an outer join on the multiple dataframes indices.\nThe function df.append(other_df) does concatenation on the index axis (i.e., add rows)\nUsing ignore_index=True can be useful when you don't want to join on the indices and only really concatenate the dataframes. (This is most likely the way you want to use .append().)\nMerging\nThe function pd.merge lets you perform four types of joins: left, right, outer and inner which are closely related to their SQL equivalents. It generalizes pd.concat as you can use columns, instead of the index, to perform the join.\nThe inline version of pd.merge is to use the method .join on some pre-existing dataframe.\nThe method df.update(other) performs a left join by replacing the values of df using those in other. It replaces on non-NA values in the original df so this can be use to add values to a df; no new rows or columns can be created by .update.\nIterating through DataFrames If you need to traverse a DataFrame row by row, you can use:\n .iterrows() to return (index, row as Series); .itertuple() to return (index, named tuple);  In both cases, you can use multiple assignment to catch each element.\nAnother, possibly better, way to do something to each row is through df.apply(fun). Thus, the manipulation you would do when iterating across rows could be wrapped into a function fun applied to each row. This also allows to apply a function by columns using axis=1. To apply a function to each cell, you can use .applymap(fun).\nfor i, (a, b, c, d) in df.iterrows(): print(a, b, c, d) for i, a, b, c, d in df.itertuples(): print(a, b, c, d) print(df.apply(sum, 1)) 0.0 0 20.0 30.0 1.0 1 21.0 31.0 2.0 2 22.0 32.0 3.0 3 23.0 33.0 100 4 102 103 100 5 nan nan 0.0 0 20.0 30.0 1.0 1 21.0 31.0 2.0 2 22.0 32.0 3.0 3 23.0 33.0 100 4 102 103 100 5 nan nan a 50.0 b 54.0 c 58.0 d 62.0 e 309.0 f NaN dtype: float64  Functions and Aggregation We have seen .apply and .applymap to apply a function row/column-wise or element-wise. The method .pipe allows you to chain and control multiple functions. Note that there exists many pre-defined functions which can be performed along axes by specifying axis=0/1/None for rows/columns/all.\nOften, functions applied to rows or columns are aggregation functions. The .agg, a.k.a. .aggregate, method lets you perform multiple aggregation functions and produce a well-formated output.\nThe .agg methods is particularly useful for grouped dataframes. The .groupby method splits a dataframe into many subsets defined by the arguments passed. Then, applying .agg to the grouped dataframe applies it to each subset and produces a dataframe where the index defines the subset and the columns define the aggregation functions.\nThe .describe function works as an .agg call acting on numerical columns only. This can be particularly useful when computing summary statistics on a dataset. Also, this can be chained with a groupby to perform description by subgroups of the data!\nMultiIndex DataFrames MultiIndex works just like regular indices except that they have a structure using levels: instead of a single key, each row has a tuple of values acting as a key. Playing with MultiIndex can be cumbersome sometimes so a nice trick to keep in mind is the .reset_index(inplace=True) method which moves the MultiIndex to new columns and creates a dummy index in its place.\nTransformations Using pandas\nTo encode categorical variables using integer indexing, you can use the function pd.factorize(array) or the method version series.factorize(). It returns the encoding as well as the encoded values. To get one-hot encoding, you can use pd.get_dummies().\nTo bin numerical variables, you can use pd.cut().\nUsing Scikit-learn\nIf you need to scale the data (say to mean 0 and variance 1), I suggest to use the StandardScaler from sklearn. It internally stores the mean and standard deviation used for standardization. Then, if you need to apply the same transformation to another matrix, you can do it easily. Also, if you need to recover the original matrix, you can!\nfrom sklearn.preprocessing import StandardScaler import numpy as np X = np.random.uniform(0, 1, (3, 4)) scaler = StandardScaler().fit(X) print(X) Xstd = scaler.transform(X) print(Xstd) print(scaler.inverse_transform(Xstd)) [[0.27355506 0.52822275 0.51469633 0.06545488] [0.44123359 0.69095683 0.52764392 0.44219493] [0.61651989 0.99101129 0.12910797 0.3453753 ]] [[-1.21558928 -1.0877613 0.6718045 -1.3702373 ] [-0.01811033 -0.23879521 0.74183104 0.98816536] [ 1.23369961 1.32655652 -1.41363554 0.38207193]] [[0.27355506 0.52822275 0.51469633 0.06545488] [0.44123359 0.69095683 0.52764392 0.44219493] [0.61651989 0.99101129 0.12910797 0.3453753 ]]  Typically, categorical data is not encoded using integers. You can always produce a map to integer yourself but you need to keep track of the map. The LabelBinarizer can do that for you! Then, this uniformizes all encoding and ensures you can recover the correct original categories.\nfrom sklearn.preprocessing import LabelBinarizer y = np.array([\u0026#34;A\u0026#34;]*4 + [\u0026#34;B\u0026#34;]*6) print(y) label_encoder = LabelBinarizer(neg_label=0, pos_label=1) y_01 = label_encoder.fit_transform(y) print(y_01) print(label_encoder.inverse_transform(np.array([0, 1, 0, 1, 1, 0, 1]))) ['A' 'A' 'A' 'A' 'B' 'B' 'B' 'B' 'B' 'B'] [[0] [0] [0] [0] [1] [1] [1] [1] [1] [1]] ['A' 'B' 'A' 'B' 'B' 'A' 'B']  Some other interesting transformations (see Preprocessing and Normalization for many more):\n LabelEncoder for more than two categories (one-hot) MultiLabelBinarizer for multiple labels to 0/1 encoding  ","date":1588114800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1588628881,"objectID":"5524c60c10751731f0fd48a0b2ab2f5d","permalink":"https://UMichStatistics.github.io/ComputingClub/workshops/resources/pandas/","publishdate":"2020-04-29T00:00:00+01:00","relpermalink":"/ComputingClub/workshops/resources/pandas/","section":"workshops","summary":"General Many methods have an inplace argument which performs the operation inplace when set to True so that you do not need to overwrite the original DataFrame. It produces cleaner code as well as saves time and memory! Note that method chaining does not work with inplace=True since nothing is returned.\nRows and columns behave in the exact same way. Indeed, they are both implemented using pandas.Index or pandas.MultiIndex objects. The main difference is that columns can be indexed in an additional way since pandas.","tags":null,"title":"Data Manipulation using Python","type":"docs"},{"authors":null,"categories":null,"content":"General comments R equivalents\n glmnet: pyglmnet lme4: pymer4 and a sklearn wrapper sklearn-lmer  Scikit-learn (sklearn)\n Mostly produces predictive models (fit, predict and score); no built-in inference mechanisms Easy to perform CV for parameter selection (.GridSearchCV) Many metrics implemented  Classification, Regression, Clustering, Distances and kernels   Many preprocessing tools:  Label encoding, scaling, standardization, transformations, etc.   Many related packages:  Related Projects SciKits    Statsmodels (statsmodels)\n Classical statistical techniques with inference  ANOVAs, LMM, GLM, hypothesis testing, etc. Regularization (Elastic net, Rigde, LASSO) Rich family of GLM distributions   Uses R-like formulas to describe models  Scipy stats module (scipy.stats)\n Implements some basic statistical functions:  Distributions Estimators Hypothesis tests Transformations Gaussian KDE    Categorical Data Logistic Regression\n sklearn.linear_model.LogisticRegression:  L1, L2 and elastic net penalties For multi-class problems: one-vs-all and multinomial   pyglmnet.GLM(distr=\u0026quot;binomial\u0026quot;)  Elastic net regularization (LASSO and Ridge) Cross-validation Group regularization   pymer4.Lmer(family=\u0026quot;binomial\u0026quot;)  Mixed effect models   pyGAM.LogisticGAM:  GAM (with interactions), Cross-validation, similar to sklearn's API   statsmodels:  Binomial GLM Binomial GLM GAM Binomial GLM LMM Multinomial GLM    Other GLM\n Probit:  pyglmnet.GLM(distr=\u0026quot;probit\u0026quot;)  Elastic net regularization (LASSO and Ridge) Cross-validation Group regularization   statsmodels:  Probit GLM      Ridge Classifier (Ridge regression on -1/+1 responses)\n sklearn.linear_model.RidgeClassifier  sklearn.linear_model.RidgeClassifierCV performs CV on a solution path    Discriminant analysis\n sklearn.discriminant_analysis  LDA, QDA    Ensemble and Tree-based Methods\n sklearn.ensemble:  AdaBoost, Bagging, Gradient Boosting, Random Forest   sklearn.trees.DecisionTreeClassifier  Gaussian Process\n sklearn.gaussian_process.GaussianProcessClassifier  Naive Bayes\n sklearn.naive_bayes  K-Nearest-Neighbors\n sklearn.neighbors.KNearestNeighborsClassifier  uniform weights, distance weights, custom weights multiple distance metrics    Neural Networks\n sklearn.linear_model.Perceptron sklearn.neural_network.MLPClassifier  multiple layers activations: identity, logistic (sigmoid), ReLU, tanh weight decay   sklearn.neural_network.BernoulliRBM sknn.nlp.Classifier  Compatible with sklearn Many more types of layers and activations   pyTorch, TensorFlow (see also Keras)  Support Vector Machines\n sklearn.svm  Linear Kernel: linear, polynomial, Gaussian, etc.    Multiclass and Multilabel Data\n sklearn.multiclass  meta-estimator for one-vs-one and one-vs-rest (one-vs-all)   sklearn.multioutput.MultiOutputClassifier  to apply binary classifiers to multiple outputs    Numerical Data Linear Regression, ANOVA and Linear Mixed Models\n sklearn.linear_model.LinearRegression  Regularizations: Ridge, LASSO, Elastic net Multi-task/multi-output: Elastic net, LASSO   pymer4  Mixed effect models sklearn-lmer: a sklearn wrapper with CV   pyglmnet.GLM(distr=\u0026quot;gaussian\u0026quot;)  Elastic net regularization (LASSO and Ridge) Cross-validation Group regularization   pyGAM.LinearGAM:  GAM (with interactions), Cross-validation, similar to sklearn's API   statsmodels  Linear Regression GAM Linear Mixed Effect Models ANOVA MANOVA    GLM\n Count data (Poisson)  pyglmnet.GLM(distr=\u0026quot;poisson\u0026quot;)  Elastic net regularization (LASSO and Ridge) Cross-validation Group regularization   pymer4.Lmer(family=\u0026quot;poisson\u0026quot;)  Mixed effect models   pyGAM.PoissonGAM:  GAM (with interactions), Cross-validation, similar to sklearn's API   statsmodels:  Contingency Tables Poisson GLM Poisson GLM GAM Poisson GLM LMM Generalized Poisson GLM     Count data (Binomial)  statsmodels:  Binomial GLM Binomial GLM GAM Binomial GLM LMM     Count data (Negative Binomial)  statsmodels:  Negative Binomial GLM Poisson GLM GAM     Count data (Zero-Inflated Models)  statsmodels:  Zero-Inflated Poisson GLM Zero-Inflated NegativeBinomial GLM Zero-Inflated Generalized Poisson GLM     Right-continuous Data (Gamma)  pyglmnet.GLM(distr=\u0026quot;gamma\u0026quot;)  Elastic net regularization (LASSO and Ridge) Cross-validation Group regularization   pymer4.Lmer(family=\u0026quot;gamma\u0026quot;)  Mixed effect models   pyGAM.GammaGAM:  GAM (with interactions), Cross-validation, similar to sklearn's API   statsmodels:  Gamma GLM Gamma GLM GAM     Right-continuous Data (Inverse Gaussian)  pymer4.Lmer(family=\u0026quot;inverse_gaussian\u0026quot;)  Mixed effect models   pyGAM.InvGaussGAM:  GAM (with interactions), Cross-validation, similar to sklearn's API   statsmodels:  Inverse Gaussian GLM Inverse Gaussian GLM GAM     Right-continuous with Excess Zero Data (Tweedie with $p\\in(1,2)$)  statsmodels:  Tweedie GLM Tweedie GLM GAM      Kernel Linear Regression\n sklearn.kernel_ridge.KernelRidge  Kernels: linear, polynomial, Gaussian, etc.    Ensemble and Tree-based Methods\n sklearn.ensemble:  AdaBoost, Bagging, Gradient Boosting, Random Forest   sklearn.trees.DecisionTreeRegressor  Gaussian Process\n sklearn.gaussian_process.GaussianProcessRegressor  K-Nearest-Neighbors\n sklearn.neighbors.KNearestNeighborsRegressor  uniform weights, distance weights, custom weights multiple distance metrics    Neural Networks\n sklearn.neural_network.MLPRegressor  multiple layers activations: identity, logistic (sigmoid), ReLU, tanh weight decay   sknn.nlp.Regressor  Compatible with sklearn Many more types of layers and activations   pyTorch, TensorFlow (see also Keras)  Support Vector Machines\n sklearn.svm  Linear Kernel: linear, polynomial, Gaussian, etc.    Unsupervised Learning Clustering\n sklearn.cluster  K-means, Agglomerative clustering    Gaussian Mixture Model\n sklearn.mixture.GaussianMixture  Dimensionality Reduction  sklearn.decomposition:  Kernel PCA, PCA   sklearn.manifold:  Isomap, t-SNE, eetc.   sknn.ae.AutoEncoder  Neural network autoencoder    ","date":1588114800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1588628881,"objectID":"c5a039c3091afcd87eeb7a1414f55413","permalink":"https://UMichStatistics.github.io/ComputingClub/workshops/resources/python_models/","publishdate":"2020-04-29T00:00:00+01:00","relpermalink":"/ComputingClub/workshops/resources/python_models/","section":"workshops","summary":"General comments R equivalents\n glmnet: pyglmnet lme4: pymer4 and a sklearn wrapper sklearn-lmer  Scikit-learn (sklearn)\n Mostly produces predictive models (fit, predict and score); no built-in inference mechanisms Easy to perform CV for parameter selection (.GridSearchCV) Many metrics implemented  Classification, Regression, Clustering, Distances and kernels   Many preprocessing tools:  Label encoding, scaling, standardization, transformations, etc.   Many related packages:  Related Projects SciKits    Statsmodels (statsmodels)","tags":null,"title":"Modeling using Python","type":"docs"},{"authors":null,"categories":null,"content":"Overview of the Academic theme layouts The content of this website rely on two different type defined by the Academic theme. Each .Md must specify, in its header, what type it is based on in order for Hugo to produce the correct html page.\n page (for meetings and post)  Single page output; The page contains a header block describing the post/meeting and that information is taken from the Markdown header; Followed by a body for regular Markdown for the post or if you want to add more details to a meeting.   docs (for workshops and resources)  Each docs file is associated with a single html page, but multiple docs can be associted together within a folder to form different pages of a single workshop; Consists of a simple Markdown body; A within-workshop table of content is added to the left; A within-pasge table of content on the right.    Create your author profile First things first, you need to create an authors profile in order to associate multiple content to the same author. Unfortunately, Hugo does not provide a command to create a new author from command line, so the fastest way to go is to copy the blank author folder and give it a name representing your's (say username from now on). Then, edit the _index.md contained in the new username folder and edit its content. It should be documented well enough for you to complete.\nIf you want to add a picture of yourself, place it in the username folder with the name avatar.jpg/.png.\nCreate a meeting Create a workshop Add resources Create a post ","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1570245843,"objectID":"16bd0e28decebba9cc098f9d6c708848","permalink":"https://UMichStatistics.github.io/ComputingClub/workshops/edit_site/createcontent/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/ComputingClub/workshops/edit_site/createcontent/","section":"workshops","summary":"Overview of the Academic theme layouts The content of this website rely on two different type defined by the Academic theme. Each .Md must specify, in its header, what type it is based on in order for Hugo to produce the correct html page.\n page (for meetings and post)  Single page output; The page contains a header block describing the post/meeting and that information is taken from the Markdown header; Followed by a body for regular Markdown for the post or if you want to add more details to a meeting.","tags":null,"title":"Creating content","type":"docs"},{"authors":null,"categories":null,"content":"Language, packages Conda integration in GreatLakes by UMich Data Analysis Networking Group\n","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1569369877,"objectID":"e8915e1808b0a1f9da4026c862ff0a3e","permalink":"https://UMichStatistics.github.io/ComputingClub/workshops/resources/hpc/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/ComputingClub/workshops/resources/hpc/","section":"workshops","summary":"Language, packages Conda integration in GreatLakes by UMich Data Analysis Networking Group","tags":null,"title":"High Performance Computing","type":"docs"},{"authors":null,"categories":null,"content":"This part of the workshop is about creating your website using the Hugo engine and the Academic theme. Most of the following is a summary or reinterpretation of the Academic theme documentation.\nFor more details about Hugo itself, see Hugo Getting Started\nPrerequsites In order to perform the following manipulations, you will need:\n Hugo installed on your machine: see this guide; ( Windows users: I highly recommend installing Chocolatey and installing Hugo from command line.)  Make sure you install the Extended version. In many case the default installation default to the Extended version, but some do not. To verify which one you have, just type hugo version in a terminal and you should see extended somewhere in the output. For Windows users, use Chocolatey and install with choco install hugo-extended -force -confirm.   git installed on your machine (see this guide); a GitHub account. Markdown knowledge (see this guide on writing content in the context of Academic \u0026amp; Hugo).  Initialize and first deploy (Based on Academic theme documentation: Install with Git)\nThe Academic theme is hosted in a GitHub repository, but we don't want to build the website from scratch.\nIn order to initialize the website with some things already done for us, we'll use the Academic kickstart website. You need to fork the repository into a repository in your own account. Then, the Academic theme is only linked to the kickstart site we are cloning and we need to keep the dependencies alive.\nNow that your GitHub account contains the Academic kickstart clone, clone that repository on your local machine:\ngit clone https://github.com/\u0026lt;your-github-account\u0026gt;/academic-kickstart.git DemoWebsite cd DemoWebsite As mentioned, your GitHub repository only contains the link to the Academic theme, so you need to clone recursively:\ngit submodule update --init --recursive Now, your DemoWebsite folder contains all the neccessary to deploy the Academic kickstart website locally. First, we produce the html files from the Markdown source: in the DemoWebsite folder, run\nhugo At this point, Hugo should have produced the html files in a new public subdirectory. Then, in order to view yhte new content as a proper website, you will need to serve the website locally. Fortunately, Hugo has a built-in feature to do that: simply run\nhugo server The output should contain a line like\nWeb Server is available at http://localhost:1313/ (bind address 127.0.0.1) which means that your new website is now accessible at the local address http://localhost:1313/.\nSomething interesting about hugo server is that it will rebuild your website anytime you make a change to the DemoWebsite directory. That is, it runs a FastRender version of the hugo command. So, if you make changes to a file, then you can see its effect directly (most web browser have some sort of auto-refresh so you don't have to refresh the page yourselves!) Note that deeper changes (e.g. new pages) won't appear in that FastRender mode so you will need to exit the server (Ctrl+C) and restart it (alternatively, you can deactivate the FastRender mode using hugo server --disableFastRender).\nContent and first edits Now that we have successfully deployed the Academic kickstart site, it is time to take a look at the specifics of it. Your DemoWebsite directory should now contain numerous files and folders. The one of interest to us is the content folder which, as the name indicates, contains all the content of the website.\ncontent ├── authors ├── home ├── post ├── publication └── talk Authors The authors subdirectory is used to store the different authors for your website. For now, it should only contains one author named admin. The index.md file contained in the admin folder controls the information about that author. In particular, it controls:\n The profile on the homepage if that author is chosen to appear there; The profile appearing with talks, posts and publications of that author.  To change the information about the admin author, simply go through the index.md file and edit it to your needs. It is well documented so it should be clear what everything does.\nThe folder name, here admin, will be the index used to identify posts, publications and talks to the corresponding author. If you need to add additional authors to your website, simply copy the admin folder and change its content. The photo associated to the author should lie in the same folder and have name avatar.jpg/.png.\nHome The home folder controls what appears on the home page, that is, the first page a user will land on. The way the home page is structures is through page sections as known as widgets. On the home page you will see alternating background; each page section is denoted by these alternating background. Thus each file in the home folder determines one of those page sections.\nTo remove some sections, there are two ways:\n Delete the corresponding .md file; Deactivate the section by setting active = false in the front matter.  Let us delete the following sections to clean the current home page:\n demo hero people slider tags  For more details on what each section does, please refer to Getting Started with the Page Builder.\nOne thing to note is how the section are ordered in the home page. It is done through the weight parameter in the front matter where the lowest weight value will appear first.\nPost, Publications and Talks Each of these folder will eventually the corresponding content. These folders are structured as follows (here we consider post) :\npost ├── _index.md └── MyFirstPost └── index.md The root _index.md defines a landing page are posts are listed. Each subdirectory then defines one post and contains a index.md which defines the corresponding post.\nTo create new content, use the following command:\nhugo new --kind \u0026lt;post/publication/talk\u0026gt; \u0026lt;folder\u0026gt;/\u0026lt;name-of-content\u0026gt; For example, to create a new publication with identifier Publication1, type\nhugo new --kind publication publication/Publication1 Create a few posts, publications and talks and restart the server since you have now added new pages to the site (Ctrl+c and hugo server).\nFor more details and additional features, see Managing content.\nCourses, workshops, documentation The methodology described in Managing content | Create a course or documentation  is the best way to proceed.\nConfiguration The config folder contains various .toml files which define site-wide information and parameters.\nconfig └── _default ├── config.toml ├── languages.toml ├── menus.toml └── params.toml All these files are fairly well-documented, so there is no reason to go over them here. One thing I would like to point out is the menus.toml file. The navigation bar presently links only toward page sections of the home page. If you would like them to point toward, say, post/_index.md instead of the post section, change the menu entry related to posts :\n[[main]] name = \u0026#34;Posts\u0026#34; url = \u0026#34;post\u0026#34; # was \u0026#34;#posts\u0026#34; before weight = 20 Rest of repository The rest of the DemoWebsite repository mostly contains file used to generate the website. You should most likely not have to touch them except:\n data: if you want custom color theme and fonts, you will place them here; static: you can place site-wide files here, such as a custom site icon.  Alternative workflows Using an IDE (e.g., RStudio), everything can be done using the interface with limited command line usage:\n Fork the academic-kickstart repo as above; New Project \u0026gt; Version Control \u0026gt; Git \u0026gt; URL to your GitHub repo \u0026gt; Open in New Session; still need to run git submodule update --init --recursive in the built-in terminal; git action can be done with the Git Tab; hugo command need to be run in the terminal; Look for the R package blogdown to do everything in R console:  Install with RStudio blogdown:::serve_site() acts as hugo server;    ","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1570670055,"objectID":"89516ada01f13f68e674ffd1d35d9467","permalink":"https://UMichStatistics.github.io/ComputingClub/workshops/hugo_academic/initialize/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/ComputingClub/workshops/hugo_academic/initialize/","section":"workshops","summary":"This part of the workshop is about creating your website using the Hugo engine and the Academic theme. Most of the following is a summary or reinterpretation of the Academic theme documentation.\nFor more details about Hugo itself, see Hugo Getting Started\nPrerequsites In order to perform the following manipulations, you will need:\n Hugo installed on your machine: see this guide; ( Windows users: I highly recommend installing Chocolatey and installing Hugo from command line.","tags":null,"title":"Initialize the website","type":"docs"},{"authors":null,"categories":null,"content":"Editors  LyX, a WYSIWYG LaTeX editor useful for quick math writing.  Citation management   Zotero for local and remote bibliography management.\n  Zotero connector for Zotero integration in browsers.\n  bibtex vs biblatex vs biber vs natbib to understand the differences.\n  MRLookup has a nice search engine to get verified citations for many peer-reviewed publications. You can get BibTeX formatted exports. Many journals require the MR number, so you can find them using that tool. Also, check out Abbreviations of Names of Serials if you want the abbreviated version of journal names.\n  Editing equations  Use the \\left and \\right commands near brackets and parens to automatically size them (i.e. outer brackets will be made larger than inner brackets). The align environment will add a tag to each line as a separate equation. Using split within an equation or align will assign one label to all lines. You can use the \\tag command to edit the number next to an equation  \\tag{Hi Rob} will change an equation label from \u0026ldquo;(1)\u0026rdquo; to \u0026ldquo;(Hi Rob)\u0026rdquo; This can be a useful, if somewhat hacky, way to add commentary to multiline equations   The \\label command assigns an internal keyword which is used in referencing via \\ref or \\cref, whereas \\tag will change the actual label that appears in the output.  Referencing equations/figures  The \\Cref command will automatically determine what is being referenced based on the type of the object that was labelled. For example, \\ref{mylabel} will display as \u0026ldquo;Equation (1)\u0026rdquo; if \\label{mylabel} is next an equation and \u0026ldquo;Figure (1)\u0026rdquo; if \\label{mylabel} is close to a figure. \\autoref does something similar, but depends on a specific convention within the label. For example, you need to prepend an eq: so \\autoref{eq:mylabel} will show up as \u0026ldquo;Equation (1)\u0026quot;.  Some tips and tricks   Check out Detexify to find the correct math symbol by drawing it.\n  Check out the todonotes package to add todo notes and comments to LaTeX files and pdf output.\n  Use include or input to insert the content of another .tex file where you want it. For example, you can maintain a math macro file that you use often or organize your sections/chapters in different files. Also, read When should I use \\input vs. \\include?.\n  ","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1582041411,"objectID":"ae92ee363cb60417e54317622810a6e0","permalink":"https://UMichStatistics.github.io/ComputingClub/workshops/resources/latex/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/ComputingClub/workshops/resources/latex/","section":"workshops","summary":"Editors  LyX, a WYSIWYG LaTeX editor useful for quick math writing.  Citation management   Zotero for local and remote bibliography management.\n  Zotero connector for Zotero integration in browsers.\n  bibtex vs biblatex vs biber vs natbib to understand the differences.\n  MRLookup has a nice search engine to get verified citations for many peer-reviewed publications. You can get BibTeX formatted exports. Many journals require the MR number, so you can find them using that tool.","tags":null,"title":"LaTeX","type":"docs"},{"authors":null,"categories":null,"content":"Package and application manager (Homebrew)  Installation: follow the instructions on the website Basic commands:  brew install \u0026lt;package\u0026gt; to install a particular package; brew cask install \u0026lt;application\u0026gt; to install an application (will appear in the Applications folder); brew search \u0026lt;name\u0026gt; to list available formulae containing name;   Useful to export some (all) packages to another environment (brew bundle command) resolving all dependencies.  Terminal customization  Oh My ZSH!  Cool Apps  Magnet window manager (App Store)  ","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1582064264,"objectID":"ff995267abc9496acd53906263ab1a8a","permalink":"https://UMichStatistics.github.io/ComputingClub/workshops/resources/macos/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/ComputingClub/workshops/resources/macos/","section":"workshops","summary":"Package and application manager (Homebrew)  Installation: follow the instructions on the website Basic commands:  brew install \u0026lt;package\u0026gt; to install a particular package; brew cask install \u0026lt;application\u0026gt; to install an application (will appear in the Applications folder); brew search \u0026lt;name\u0026gt; to list available formulae containing name;   Useful to export some (all) packages to another environment (brew bundle command) resolving all dependencies.  Terminal customization  Oh My ZSH!","tags":null,"title":"MacOS","type":"docs"},{"authors":null,"categories":null,"content":"Smoke Testing Wikipedia\nSmoke testing is a quick and easy way to check if code works. If your program can't even run without crashing, there's no point to performing more fine-grained testing procedures.\nsqrt_1 \u0026lt;- function(x) { if (x \u0026gt;= 0) { ret \u0026lt;- x^(0.5) } else { ret \u0026lt;- (-x)^(0.5) + \u0026#34;i\u0026#34; } return(ret) } sqrt_2 \u0026lt;- function(x) { if (x \u0026gt;= 0) { ret \u0026lt;- x^(0.5) } else { ret \u0026lt;- paste0((-x)^(0.5), \u0026#34;i\u0026#34;) } return(ret) } Here is the smoke-test we might right. Notice that the output is not checked; we just want to check if there are any errors.\nsmoke_test \u0026lt;- function(test_input) { sqrt_1(test_input) # will raise an error sqrt_2(test_input) # will not raise an error, but is problematic } smoke_test(2) smoke_test(3.14) smoke_test(-2) The Unit Testing paradigm Test-driven development\nOptimal workflow with an example We want to implement a square root function with the following behaviour:\n returns the square root for positive input returns the complex square root for negative input is vectorized and return vectors/matrices with the same dimension if one input is negative, all outputs are in complex form raises an appropriate error if the input is not numeric (or any element of the input is not numeric)  Before writing the function, we could write the following tests:\n sqrt(1) = 1 sqrt(-1) = 0+1i (depends on how complex numbers are implemented) sqrt([0, 1]) = [0, 1] sqrt([[0], [-1]]) = [[0+0i], [0+1i]] sqrt(\u0026quot;a\u0026quot;) raises an error sqrt([0, \u0026quot;A\u0026quot;]) raises an error  Then, we implement our function checking tests constantly until all criterions are satisfied.\nSome (most) IDEs can automatically run all your tests in the background when any file is saved: this checks the current function your are implementing and also that you did not break any prior developments. This constant checking enable you to quickly diagnose the problem as only your latest edits change the result of tests.\nAnother approach In practice, before writing a specific function, we might not know exactly what it's behaviour will be so it is not clear what tests to write beforehand. (I often get excited about implementing something and writing tests is boring\u0026hellip;)\nSo, instead of writing the tests before the function, we can wait until we are satisfied with the behaviour of a function and protect it with tests. Then, interactions with future functions will have some safeguards against bad input or output. Also, any further changes you perform on the function will have to satisfy the tests you previously wrote so any functions depending on the current function should not break.\nFurthermore, the creation of tests after the function may tell you that you have to refactor some parts of your function. When first writing it, you might not have thought of some edge case and the time spent wirting tests may uncover those cases.\nWhat to test  Known output (e.g., simple cases you can compute by hand) In/out typing (behaviour under bad input, correct output given input) Output dimensions (column vs row vector, do you drop a dimension if it has length 1, etc.) Expected errors  Some notes  Unit testing is great for interactive languages to detect if you are inadvertantly using global variables (defined outside the scope of a function). The test suite runs outside your scripts so tests will fail if you do so.  Unit Testing in R using the testthat package Let's create a simple R package in RStudio:\n New Project R Package New Project Put in some name Check Open in new session  Let's add the above defined functions in the hello.R file.\nLet's create some tests:\n Run devtools::test() and type in 1 to create the tests directory, which contains a testthat.R file managing imports and helps in running all tests at once, and a sub-directory testthat where we will add some test; Run test using Build \u0026gt; Test Package or simply type Ctrl+Shift+T or run devtools::test(). You should see an output saying there are no tests in the testthat directory (as expected). Create a test_sqrt_1.R file in tests/testthat (NB: all test file must start with test so it can be discovered by the testthat package.) At the head of the file, add `context(\u0026ldquo;Test sqrt functions\u0026rdquo;) which will yield a more verbose output. Add a first test (note the near-grammarly syntax: the first argument is what we are testing that sqrt_1() works on positive input):  test_that( \u0026#34;sqrt_1() works on positive input\u0026#34;, # what we are testing { # the test itself, using expect statements expect_equal(sqrt_1(1.0), 1.0) expect_equal(sqrt_1(0.0), 0.0) } )  Run tests again and observe that our function passes all tests so far. Let's add another succeding test, but on an expected non-successfull call:  test_that( \u0026#34;sqrt_1 raises an error with negative inputs\u0026#34;, { expect_error(sqrt_1(-1.0), \u0026#34;non-numeric argument\u0026#34;) } )  Running all tests should again suceed. Now, let's add a test which fails:  test_that( \u0026#34;sqrt_1 returns imaginary numbers for negative inputs\u0026#34;, { expect_match(sqrt(-1.0), \u0026#34;1i\u0026#34;) } ) Unit Testing in Python using the unittests package unittest documentation\nCreate a simple module:\nTestModule/ sqrt.py test/ test_sqrt.py where\n# sqrt.py import math def sqrt(x): return math.sqrt(x) # test_sqrt.py import unittest import sqrt class MyTestCase(unittest.TestCase): def test_something(self): self.assertEqual( sqrt.sqrt(1.0), 1.0, \u0026#34;what happened if the test failed\u0026#34; ) if __name__ == \u0026#39;__main__\u0026#39;: unittest.main() Run tests using\npython -m unittest tests/test_sqrt.py python -m unittest discover tests The discover tests implies that the unittest package will search the tests directory for all tests in there.\nThe basic unittest package is not well suited to check equality of numpy arrays. Here's a way to do it:\nimport numpy as np class MyTest(unittest.TestCase): def numpy_test_case(self): try: np.testing.asser_array_almost_equal( array1, array2 ) result = True except AssertionError as error: result = False self.assertTrue(res, \u0026#34;what happened if the test failed\u0026#34;) In PyCharm, you can set up automatic testing as follows:\n File \u0026gt; Settings \u0026gt; Tools \u0026gt; Python Integrated Tools Select Unittests under Testing In the Project pane (the directory), left click on the tests directory and select Craete unittest in tests and click OK Run tests once Run \u0026gt; Run Unittests in tests In the Run pane, click on Toggle auto-test Now, any changes to files automatically triggers all tests to be run!  Unit Testing in Julia This guide gives a nice, detailed walkthrough on how to set up a package in Julia with tests and integrate it with Travis and Codecov.\nJulia comes with the \u0026lsquo;Test\u0026rsquo; module built-in which offers basic unit tests.\nsqrt_im(x::Real) = sqrt(complex(x)) using Test # Unit tests (check for right value in both cases) @test sqrt_im(2.0) ≈ 1.4142135623730951 @test sqrt_im(5.0) ≈ 1.4142135623730951 @test sqrt_im(-2.0) ≈ 1.4142135623730951im # Random input using Random Z = randn(MersenneTwister(555), 10) @test (sqrt_im.(Z)).^2 ≈ Z @test sqrt(2.0) ≈ 1.4142135623730951 @test sqrt(-2.0) ≈ 1.414213562373095im # \u0026#34;test_broken\u0026#34; lets us mark tests we know give the wrong answer or raise an error @test_broken sqrt(-2.0) ≈ 1.414213562373095im # \u0026#34;test_broken\u0026#34; will return an Error testing value if the expression passes @test_broken sqrt(2.0) ≈ 1.4142135623730951 # Julia requires a boolean result to pass; for smoke testing this can be alleviated # by just always returning true @test begin sqrt_im(-2.0) true end @test begin sqrt(-2.0) true end Resources ","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1583856283,"objectID":"b3979dfeda91735da27b80f7d9129a93","permalink":"https://UMichStatistics.github.io/ComputingClub/workshops/resources/packages/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/ComputingClub/workshops/resources/packages/","section":"workshops","summary":"Smoke Testing Wikipedia\nSmoke testing is a quick and easy way to check if code works. If your program can't even run without crashing, there's no point to performing more fine-grained testing procedures.\nsqrt_1 \u0026lt;- function(x) { if (x \u0026gt;= 0) { ret \u0026lt;- x^(0.5) } else { ret \u0026lt;- (-x)^(0.5) + \u0026#34;i\u0026#34; } return(ret) } sqrt_2 \u0026lt;- function(x) { if (x \u0026gt;= 0) { ret \u0026lt;- x^(0.5) } else { ret \u0026lt;- paste0((-x)^(0.","tags":null,"title":"Package Development","type":"docs"},{"authors":null,"categories":null,"content":"Git The Pro Git book by Scott Chacon and Ben Straub:\n 10. Git Internals: a deep understanding of git.  Oh Shit, Git!?! and Dangit, git!: two go-to resources when encountering git problems.\n","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1570078435,"objectID":"9a5b4dfe316baa094a4582b0049b4a4c","permalink":"https://UMichStatistics.github.io/ComputingClub/workshops/resources/versioncontrol/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/ComputingClub/workshops/resources/versioncontrol/","section":"workshops","summary":"Git The Pro Git book by Scott Chacon and Ben Straub:\n 10. Git Internals: a deep understanding of git.  Oh Shit, Git!?! and Dangit, git!: two go-to resources when encountering git problems.","tags":null,"title":"Version Control","type":"docs"},{"authors":null,"categories":null,"content":"Now that you are happy with your local website, it is time to deploy it on the internet. Here is the methodology for GitHub Pages hosting.\nA note on the Academic theme If you build your website using Hugo and the Academic theme, here's how to ensure the static website falls in the correct folder. In the config/_default/config.toml file change the following line:\npublishDir = \u0026#34;docs\u0026#34; To ensure links consistency within your website you need to tell Hugo what will be your base URL. In the case of GitHub hosting, change the following line in config/_default/config.toml:\nbaseurl = \u0026#34;https://your-github-account.github.io/academic-kickstart/\u0026#34; Run hugo to make your changes effective.\nLocal version control In order to eventually push your website to your GitHub repository, your local files should be staged and committed:\ngit add --all git commit -m 'First deploy' Push your files to your repository Then, you need to send your files to your GitHub repository.\ngit push While GitHub only requires the docs folder to display your website, it is best to push all the content of your website if you want to make changes from other machines.\nHosting At this point, the docs folder of your repository contains the necessary files to have a functioning website. However, you need to activate the hosting feature of your repository for GitHub to start hosting the contents of docs. In the Settings tabs of your repository, scroll down to the GitHub Pages section. There, use the drop-down menu under Source to master branch /docs folder.\nWait a few seconds and check out your awesome website!\nModifying your website You will most likely want to add or edit content to your website. To do this, you only need to alter the docs folder accordingly to trigger redeployment. Each update may not be instantaneous, so don't worry if it takes a few seconds before your changes become effective.\n","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1570624056,"objectID":"af984c88c70859d9cb420e318cbf6a3b","permalink":"https://UMichStatistics.github.io/ComputingClub/workshops/hugo_academic/deploy_github/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/ComputingClub/workshops/hugo_academic/deploy_github/","section":"workshops","summary":"Now that you are happy with your local website, it is time to deploy it on the internet. Here is the methodology for GitHub Pages hosting.\nA note on the Academic theme If you build your website using Hugo and the Academic theme, here's how to ensure the static website falls in the correct folder. In the config/_default/config.toml file change the following line:\npublishDir = \u0026#34;docs\u0026#34; To ensure links consistency within your website you need to tell Hugo what will be your base URL.","tags":null,"title":"Deployment on GitHub","type":"docs"},{"authors":null,"categories":null,"content":"The lazy way If you only need to add some post/meeting/workshop to the website, here is a simple way to deploy your new content to the website without much hassle.\n Create your content\u0026mdash;The first step is to create your specific content by producing the necessary Markdown files. See Creating content for details on how to do so. Push your content\u0026mdash;You then need to add your content to the website content directory. If you have access to the UMichStatistics repository, then you can do it directly using your favorite \u0026lsquo;git\u0026rsquo; workflow. Otherwise, contact the maintainers for them to add your content to the site. Deploy your content\u0026mdash;As mentionned, an update of the files outside the docs folder will not affect the public website. The deployment must be done through Hugo and, for now, this must be done manually. Contact the maintainers for it to happen.  The good way Hopefully, you will want to deploy your changes yourself. To do this, here is the summary of the procedure:\n Have a local copy of the website on your machine. Update your local version. Deploy your local version to your localhost using Hugo in order to update the docs contents. Push your changes, including both the source and the updated docs to the site's repository.  With the workflow, your changes will instantaneously update the public website. Also, since you first deploy on your local machine, you are able to see the results of your changes before them becoming public. Finally, pushing both the source and the updated docs prevents conflicts in future updates.\nRequirements To use this process, you will need:\n Access to the organization repository; git installed on your machine (see this guide); Basic git knowledge (clone, pull, add, commit and push). Note that most modern IDEs offer git support so you may execute all those steps using your interface; Hugo installed on your machine (see this guide. The installation on Windows is tedious and the only way I could make it work was R \u0026gt; install package blogdown \u0026gt; blogdown::install_hugo() and manually add its path to the system environment variables.)  Update the local version First, you will need the latest version of the website stored locally on your machine.\nIf you have not cloned the repository yet, do so:\ngit clone https://github.com/UMichStatistics/ComputingClub.git \u0026lt;new-folder-name\u0026gt; The website relies on the Academic theme for Hugo, so you will to clone that as well. Fortunately, it is included as a submodule of the repository, so you only need to update all submodules (there is only one):\ngit submodule update [--init] [--recursive] If you already have cloned the repository, make sure your local version is up to date with the current online version to avoid merge conflicts when pushing. In a command prompt, move to the site local folder and pull the website (or fetch and merge).\nCreate your content Create your specific content by producing the necessary Markdown files and place them in the correct folders. See Creating content for details on how to do so.\nDeploy your local website Now that your local repository contains updated content, it is time to deploy it to your local docs folder. To do so, open a command prompt and run hugo at the root of the site's local repository and type in:\nhugo which will compile the content into the static html pages. Unless your code does not compile, you should get an output such as (possibly containing warnings)\nBuilding sites … WARN 2019/09/24 17:08:23 In the next Hugo version (0.58.0) we will change how $home.Pages behaves. If you want to list all regular pages, replace .Pages or .Data.Pages with .Site.RegularPages in your home page template. | EN +------------------|----+ Pages | 52 Paginator pages | 0 Non-page files | 6 Static files | 8 Processed images | 9 Aliases | 7 Sitemaps | 1 Cleaned | 0 Total in 265 ms This means that Hugo has successfuly deployed your site to the docs folder. If you wish to view the website, you can host it locally using Hugo:\nhugo server which should yield something like\nWatching for changes in /home/simon/git/ComputingClub/{content,data,static,themes} Watching for config changes in /home/simon/git/ComputingClub/config.toml, /home/simon/git/ComputingClub/config/_default Environment: \u0026#34;development\u0026#34; Serving pages from memory Running in Fast Render Mode. For full rebuilds on change: hugo server --disableFastRender Web Server is available at http://localhost:1313/ComputingClub/ (bind address 127.0.0.1) Press Ctrl+C to stop The url http://localhost:1313/ComputingClub/ is where you find your local website (use the one in your output as it may differ from mine). Also, as long a you do not close the server (by closing the command prompt or by typing Ctrl+C), Hugo will listen to any changes, meaning that any file saved in the root repository will trigger deployment. This is useful if you want to create your content and see it deployed instantaneously locally without calling Hugo each time. Note that creating new pages or making large changes may not appear in this \u0026ldquo;Fast Render Mode\u0026rdquo;, so you may need to exit and re-host.\nPush your changes Once your are satisfied with your local version, you need to push your changes to the master branch. In the case your Hugo server is still on, close it and run hugo one last time to redo the docs file for the online version, not the local version.\nStage and commit your changes:\ngit add --all git commit -m \u0026#39;some description of your changes\u0026#39; and finally push to the online repository\ngit push ","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1570209932,"objectID":"24c3d9913df929129210ecc33f7ffcce","permalink":"https://UMichStatistics.github.io/ComputingClub/workshops/edit_site/workflow/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/ComputingClub/workshops/edit_site/workflow/","section":"workshops","summary":"The lazy way If you only need to add some post/meeting/workshop to the website, here is a simple way to deploy your new content to the website without much hassle.\n Create your content\u0026mdash;The first step is to create your specific content by producing the necessary Markdown files. See Creating content for details on how to do so. Push your content\u0026mdash;You then need to add your content to the website content directory.","tags":null,"title":"Update workflow","type":"docs"},{"authors":null,"categories":null,"content":"Cheat sheets   A very handy ggplot cheat sheet containing most functionalities and their syntax! (Suggested by Vincenzo Loffredo)\n  A bunch of very useful R and RStudio cheat sheets. (Suggested by Drew Yarger)\n  ","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1582042358,"objectID":"98fcf31c38ad5567019dcbbbb1b51849","permalink":"https://UMichStatistics.github.io/ComputingClub/workshops/resources/r/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/ComputingClub/workshops/resources/r/","section":"workshops","summary":"Cheat sheets   A very handy ggplot cheat sheet containing most functionalities and their syntax! (Suggested by Vincenzo Loffredo)\n  A bunch of very useful R and RStudio cheat sheets. (Suggested by Drew Yarger)\n  ","tags":null,"title":"All things R","type":"docs"},{"authors":null,"categories":null,"content":"Now that you are happy with your local website, it is time to deploy it on the internet. Here is the methodology for UMich personal space hosting.\nSee Web Hosting Tutorial from ITS for more details.\nA note on the Academic theme To ensure links consistency within your website you need to tell Hugo what will be your base URL. In the case of GitHub hosting, change the following line in config/_default/config.toml:\nbaseurl = \u0026#34;http://www-personal.umich.edu/~uniqname/\u0026#34; Run hugo to make your changes effective.\nPrerequisites First, you will need access to the MFile system. There, ensure you have access to your Public/html/ folder which is where we will dump our website.\nYou may need to use the make-website tool.\nLocal version control While version control is not necessary for this type of hosting, I highly recommend you do it locally:\ngit add -all git commit -m 'First deploy' Deployment with SCP The deployment to your personal space can be done in one command line (should work on any platform, Windows users may require PuTTY):\nscp -r \u0026lt;path-to-local-website\u0026gt;/public/. uniqname@login.itd.umich.edu:Public/html/ You should be prompted to enter your password. SCP (Secure Copy Protocol) can only copy files to and from a remote server. It is sufficient to push your website, but you cannot remove files using that protocol. This line basically copies everything from \u0026lt;path-to-local-website\u0026gt;/public/ (recursively with the -r option) to your personal space uniqname@login.itd.umich.edu:Public/html/ which is where websites are hosted.\nSFTP and SFTP With a GUI sftp (Secure File Transfer Protocol) offer an interactive session and is therefore more flexible than SCP (see thig guide).\nOpen a terminal in the public folder of your website (or the one where Hugo produces the html files). Connection to the remote server is done via\nsftp uniqname@sftp.itd.umich.edu You should be prompted to enter your password. You can navigate your personal space usin ls and cd as usual. Move to Public/html and push all the files of public:\nsftp\u0026gt; cd Public/html/ sftp\u0026gt; put -r * The same can be done using a FTP client GUI (e.g. WinSCP or FileZilla). The server is called\nsftp.itd.umich.edu with port 22. You should need to input your username and password at some point.\nViewing your website Your new website will be available at\nhttp://www-personal.umich.edu/~uniqname/ which is also available by symply typing\numich.edu/~uniqname/ If you are creating a website for some organization, consider getting some space for your organization instead of using your own space: check this tutorial (Special services section).\n","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1570670055,"objectID":"0e35461bb179112cc5a7f0e6a5a06312","permalink":"https://UMichStatistics.github.io/ComputingClub/workshops/hugo_academic/deploy_umich/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/ComputingClub/workshops/hugo_academic/deploy_umich/","section":"workshops","summary":"Now that you are happy with your local website, it is time to deploy it on the internet. Here is the methodology for UMich personal space hosting.\nSee Web Hosting Tutorial from ITS for more details.\nA note on the Academic theme To ensure links consistency within your website you need to tell Hugo what will be your base URL. In the case of GitHub hosting, change the following line in config/_default/config.","tags":null,"title":"Deployment on UMich Space","type":"docs"},{"authors":null,"categories":null,"content":"Academic documentation - Customization\n Website icon Custom color theme Custom fonts  ","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1570494397,"objectID":"899f2a0d71af6d3de6e9632a9b654eb5","permalink":"https://UMichStatistics.github.io/ComputingClub/workshops/hugo_academic/custom/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/ComputingClub/workshops/hugo_academic/custom/","section":"workshops","summary":"Academic documentation - Customization\n Website icon Custom color theme Custom fonts  ","tags":null,"title":"Customization and Resources","type":"docs"},{"authors":null,"categories":null,"content":"Hugo errors If you encounter the following error:\nError: \u0026#34;...\\DemoWebsite\\config.toml:1:1\u0026#34;: unmarshal failed: Near line 0 (last key parsed \u0026#39;\u0026#39;): bare keys cannot contain \u0026#39;.\u0026#39; or any other error the first time you call a hugo comment, make sure you have the Extended version of Hugo installed. You can check by typing\nhugo version The output should contain the extended word somewhere (depends on the OS).\n","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1570670055,"objectID":"b66602fc2573de9e18a60e9ec1eda567","permalink":"https://UMichStatistics.github.io/ComputingClub/workshops/hugo_academic/troubleshoot/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/ComputingClub/workshops/hugo_academic/troubleshoot/","section":"workshops","summary":"Hugo errors If you encounter the following error:\nError: \u0026#34;...\\DemoWebsite\\config.toml:1:1\u0026#34;: unmarshal failed: Near line 0 (last key parsed \u0026#39;\u0026#39;): bare keys cannot contain \u0026#39;.\u0026#39; or any other error the first time you call a hugo comment, make sure you have the Extended version of Hugo installed. You can check by typing\nhugo version The output should contain the extended word somewhere (depends on the OS).","tags":null,"title":"Troubleshooting","type":"docs"},{"authors":["Dan Kessler"],"categories":null,"content":"","date":1602160200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1602160200,"objectID":"c2d4546f9d141b2736683c02162de6a5","permalink":"https://UMichStatistics.github.io/ComputingClub/talk/git_seminar/","publishdate":"2020-10-01T15:16:15-04:00","relpermalink":"/ComputingClub/talk/git_seminar/","section":"talk","summary":"Whether you're analyzing data, developing an R package, or even writing your dissertation, chances are you're editing text files. Effective version control of these files can provide protection against data loss and mistakes, improve your efficiency, help you isolate bugs, and facilitate collaboration with others. Git is a leading tool for version control, but many statisticians have at best a shallow understanding of how it works. In this talk, I'll present Git in a way that you may not have seen before. Rather than giving you a cookbook of steps to memorize, I'll be explicating some of its underlying architecture. This will help you to understand how to use git effectively in a variety of situations. This presentation is designed to be very \"hands on\" and frequent questions from the audience are encouraged. Please ensure that you have git installed on our computer so that you can follow along.","tags":[],"title":"Git's a Wonderful Life","type":"talk"},{"authors":["Statistics Computing Club"],"categories":null,"content":"","date":1583863200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1583782078,"objectID":"ca0f6a53c937fc643af69caab0035306","permalink":"https://UMichStatistics.github.io/ComputingClub/talk/packages/","publishdate":"2019-09-25T15:16:15-04:00","relpermalink":"/ComputingClub/talk/packages/","section":"talk","summary":"This meeting is focused on package development, with a particular emphasis on writing tests to ensure code is error-free. The discussion includes many examples from R, but other languages are welcome as well.\nLinks, resources and topics will be listed in [Resources/Packages](../../workshops/resources/packages). ","tags":[],"title":"Package development and testing in R","type":"talk"},{"authors":["Statistics Computing Club"],"categories":null,"content":"","date":1582048800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1582175436,"objectID":"71ccc98072a0d63deb37e70065eddd15","permalink":"https://UMichStatistics.github.io/ComputingClub/talk/macos/","publishdate":"2019-09-25T15:16:15-04:00","relpermalink":"/ComputingClub/talk/macos/","section":"talk","summary":"This meetings is focused on statistical computing on MacOS. Potential topics include setting up Homebrew, LaTeX, R, the terminal, and other essential components in a statistician's workflow.\nLinks, resources and topics will be listed in [Resources/MacOS](../../workshops/resources/macos). ","tags":[],"title":"Statistical Computing in MacOS","type":"talk"},{"authors":["Statistics Computing Club"],"categories":null,"content":"","date":1580839200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1582767384,"objectID":"58414eae75f47db45042efaa5c41b103","permalink":"https://UMichStatistics.github.io/ComputingClub/talk/latex/","publishdate":"2020-02-04T10:15:15-05:00","relpermalink":"/ComputingClub/talk/latex/","section":"talk","summary":"The topic of the first meeting will be a collaborative discussion about LaTeX, so we encourage you to come and share any interesting tips and tricks you’ve picked up. On the other side, if you are unsure of the “best way” to do something in LaTeX, we encourage you to bring it up for discussion.\nLinks, resources and topics will be listed in [Resources/LaTeX](../../workshops/resources/latex)","tags":[],"title":"LaTeX discussion","type":"talk"},{"authors":["Rob Trangucci"],"categories":null,"content":"","date":1574267400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1580833066,"objectID":"32af726d9106f79e8394f9139efee55c","permalink":"https://UMichStatistics.github.io/ComputingClub/talk/stan/","publishdate":"2019-09-25T15:16:15-04:00","relpermalink":"/ComputingClub/talk/stan/","section":"talk","summary":"''Stan is a state-of-the-art platform for statistical modeling and high-performance statistical computation. Thousands of users rely on Stan for statistical modeling, data analysis, and prediction in the social, biological, and physical sciences, engineering, and business.''---[Stan website](https://mc-stan.org/)","tags":[],"title":"Stan","type":"talk"},{"authors":["Statistics Computing Club"],"categories":null,"content":"","date":1573754400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1580833066,"objectID":"d8253556c3675173c9ae37368f77173e","permalink":"https://UMichStatistics.github.io/ComputingClub/talk/hpc/","publishdate":"2019-09-25T15:16:15-04:00","relpermalink":"/ComputingClub/talk/hpc/","section":"talk","summary":"Effective computing is a key component of many statistics workflows. The statistics department offers its graduate students access to a UMich HPC (high performance computing) resource. However, that resource will be changing as Flux retires at the end of November and we transition to Great Lakes. One important change is that rather than having access to a fixed number of resources at any given time, billing will be based on actual usage, so without new policies it may be possible for one user to (accidentally) burn through an entire month’s budget in a single day. Efficient use of this resource will be even more important and will require navigating the job submission system (SLURM), writing code in a way which can be parallelized effectively across multiple machines, and understanding how jobs are billed to the Statistics department account.\nThis special student seminar will have two parts, focused on the new opportunities and new challenges, respectively.\nThe first part will introduce some tips and tools for statisticians to use Great Lakes more effectively and will include a demonstration of the ```batchtools``` R package which can greatly simplify and organize the process of running numerical simulations in an HPC setting.\nThe second part will be a town hall regarding proposed policies for our account on Great Lakes. Because the department’s allocation is primarily used by students, department leadership has invited the PhD student council’s computing committee to propose specific policies for this new resource, and we want to get feedback on our policy proposal from current graduate students. If you use (or might use) Flux and/or Great Lakes, we want to hear from you! Our goal is to craft a policy that lets heavy users get their work done while making the experience of lighter users as smooth as possible.\nIf you’re interested in following along the demonstrations in the first part, you need to ensure you’re able to log-on to Great Lakes (```ssh uniqname@greatlakes.arc-ts.umich.edu```). You may also wish to review this wiki page on using batchtools on Great Lakes and you can install ```batchtools``` locally so that you can see a demonstration of how it works. Contact [stat-phd-council-computing@umich.edu](stat-phd-council-computing@umich.edu) with any questions.","tags":[],"title":"Navigating the Transition from Flux to Great Lakes: New tools and policy town hall","type":"talk"},{"authors":["Ziping Xu"],"categories":null,"content":"","date":1573057800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1580833066,"objectID":"3af4adaabe529f9570ffabcb957e1cdd","permalink":"https://UMichStatistics.github.io/ComputingClub/talk/cpython/","publishdate":"2019-09-25T15:16:15-04:00","relpermalink":"/ComputingClub/talk/cpython/","section":"talk","summary":"''Cython is an optimising static compiler for both the Python programming language and the extended Cython programming language (based on Pyrex). It makes writing C extensions for Python as easy as Python itself.''---[Cython website](https://cython.org/)","tags":[],"title":"Accelerating Python using Cython","type":"talk"},{"authors":["Jeffrey Regier"],"categories":null,"content":"","date":1571848200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1580833066,"objectID":"5a57761e728210bb67200f27204207e6","permalink":"https://UMichStatistics.github.io/ComputingClub/talk/julia/","publishdate":"2019-09-25T15:16:15-04:00","relpermalink":"/ComputingClub/talk/julia/","section":"talk","summary":"''Julia in a Nutshell---**Julia is fast!**\nJulia was designed from the beginning for high performance. Julia programs compile to efficient native code for multiple platforms via LLVM.\n**Dynamic.**\nJulia is dynamically-typed, feels like a scripting language, and has good support for interactive use.\n**Optionally typed.**\nJulia has a rich language of descriptive datatypes, and type declarations can be used to clarify and solidify programs.\n**General.**\nJulia uses multiple dispatch as a paradigm, making it easy to express many object-oriented and functional programming patterns. The standard library provides asynchronous I/O, process control, logging, profiling, a package manager, and more.\n**Easy to use.**\nJulia has high level syntax, making it an accessible language for programmers from any background or experience level.\n**Open source.**\nJulia is free for everyone to use, and all source code is publicly viewable on GitHub. ''---[Julia website](https://julialang.org/)","tags":[],"title":"The Julia language","type":"talk"},{"authors":["Simon Fontaine"],"categories":null,"content":"","date":1570638600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1580833066,"objectID":"467270c8eb0bbafce29fa13db51a95e9","permalink":"https://UMichStatistics.github.io/ComputingClub/talk/website/","publishdate":"2019-09-25T15:16:15-04:00","relpermalink":"/ComputingClub/talk/website/","section":"talk","summary":"In a workshop-type presentation, you will learn how to build a simple academic personal website based on the Academic theme by the Hugo engine as well as hosting it on GitHub Pages or UMich personal space.","tags":["Website","Markdown"],"title":"Building \u0026 Hosting a Simple Academic Website","type":"talk"},{"authors":["Dan Kessler"],"categories":null,"content":"","date":1570033800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1580833066,"objectID":"a5aef24b959e024d1651bca037126c08","permalink":"https://UMichStatistics.github.io/ComputingClub/talk/git/","publishdate":"2019-09-25T15:16:15-04:00","relpermalink":"/ComputingClub/talk/git/","section":"talk","summary":"While there are many online tutorials on how to use git, few attemp to teach what really happens behind the common commands. Understanding the differences and interactions between commited, staged and working file status as well as between local and remote repositories is essential to any git user in order to engage in adequate and pleasant version control.","tags":[],"title":"Git: a deeper perspective","type":"talk"},{"authors":["Simon Fontaine"],"categories":[],"content":"With the recent creation of the Statistics Computing Club, having a platform to share news, contents and resources was a priority.\nThe site is functionnal but still under construction, so please report issues to the GitHub repository to help us improve the site. Also, your comments and suggestions are more than welcome, so feel free to contact us!\nThe Committee is still looking for presenters for this fall's meetings. You don't need to be an expert of the topic you'll present; providing exposure to a tool you find useful, to a package you think may help others or to some research methodology may be relevant to many other members! If you feel like presenting, we invite you to complete this form.\n","date":1569290776,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1569439601,"objectID":"9c8fc5dc75abc298a528bb2179079a1e","permalink":"https://UMichStatistics.github.io/ComputingClub/post/welcome/","publishdate":"2019-09-23T22:06:16-04:00","relpermalink":"/ComputingClub/post/welcome/","section":"post","summary":"With the recent creation of the Statistics Computing Club, having a platform to share news, contents and resources was a priority.\nThe site is functionnal but still under construction, so please report issues to the GitHub repository to help us improve the site. Also, your comments and suggestions are more than welcome, so feel free to contact us!\nThe Committee is still looking for presenters for this fall's meetings. You don't need to be an expert of the topic you'll present; providing exposure to a tool you find useful, to a package you think may help others or to some research methodology may be relevant to many other members!","tags":["Club"],"title":"Welcome to the Computing club's new website","type":"post"},{"authors":["Derek Hansen"],"categories":null,"content":"","date":1568835000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1580833066,"objectID":"52768db74e73cc94710d2441f091bcf6","permalink":"https://UMichStatistics.github.io/ComputingClub/talk/intro_purr/","publishdate":"2019-09-23T21:22:29-05:00","relpermalink":"/ComputingClub/talk/intro_purr/","section":"talk","summary":"Presentation of the Computing club and discussion of its purpose and means. Presentation of the R package `purrr` for functional programming.","tags":["Club","R","Functional programming"],"title":"Informational meeting \u0026 Functional Programming in R with purrr","type":"talk"}]