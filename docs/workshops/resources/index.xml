<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Resources | UMSBCC</title>
    <link>https://UMichStatistics.github.io/ComputingClub/workshops/resources/</link>
      <atom:link href="https://UMichStatistics.github.io/ComputingClub/workshops/resources/index.xml" rel="self" type="application/rss+xml" />
    <description>Resources</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>Â© 2023 UM Statistics &amp; Biostatistics Computing Club</copyright><lastBuildDate>Sun, 09 Sep 2018 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://UMichStatistics.github.io/ComputingClub/img/icon_512.png</url>
      <title>Resources</title>
      <link>https://UMichStatistics.github.io/ComputingClub/workshops/resources/</link>
    </image>
    
    <item>
      <title>Data Manipulation using Python</title>
      <link>https://UMichStatistics.github.io/ComputingClub/workshops/resources/pandas/</link>
      <pubDate>Wed, 29 Apr 2020 00:00:00 +0100</pubDate>
      <guid>https://UMichStatistics.github.io/ComputingClub/workshops/resources/pandas/</guid>
      <description>&lt;h2 id=&#34;general&#34;&gt;General&lt;/h2&gt;
&lt;p&gt;Many methods have an &lt;code&gt;inplace&lt;/code&gt; argument which performs the operation inplace when set to &lt;code&gt;True&lt;/code&gt; so that you do not need to overwrite the original &lt;code&gt;DataFrame&lt;/code&gt;. It produces cleaner code as well as saves time and memory! Note that method chaining does not work with &lt;code&gt;inplace=True&lt;/code&gt; since nothing is returned.&lt;/p&gt;
&lt;p&gt;Rows and columns behave in the exact same way. Indeed, they are both implemented using &lt;code&gt;pandas.Index&lt;/code&gt; or &lt;code&gt;pandas.MultiIndex&lt;/code&gt; objects. The main difference is that columns can be indexed in an additional way since &lt;code&gt;pandas.DataFrame&lt;/code&gt; objects can be access through the native &lt;code&gt;python&lt;/code&gt; indexing, i.e., &lt;code&gt;df[column]&lt;/code&gt;. Otherwise, most (all?) operations can be perform along any of the two axes. (If not, there is the &lt;code&gt;.T&lt;/code&gt; or &lt;code&gt;.transpose()&lt;/code&gt; methods to flip the &lt;code&gt;DataFrame&lt;/code&gt;.)&lt;/p&gt;
&lt;h2 id=&#34;data-importation&#34;&gt;Data Importation&lt;/h2&gt;
&lt;p&gt;You probably all know about &lt;code&gt;pandas.read_csv&lt;/code&gt; to load text files into &lt;code&gt;pandas&lt;/code&gt; &lt;code&gt;DataFrame&lt;/code&gt;s. Here are some interesting options you might not know about:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You can overwrite the column names directly using &lt;code&gt;names=[...]&lt;/code&gt; and &lt;code&gt;header=0&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;You can set the &lt;code&gt;index&lt;/code&gt; automatically using &lt;code&gt;index_col=&amp;quot;column_name&amp;quot;&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;You can drop columns or rows before loading using &lt;code&gt;usecols=[...]&lt;/code&gt; or &lt;code&gt;skiprows=[...]&lt;/code&gt;, respectively;&lt;/li&gt;
&lt;li&gt;If &lt;code&gt;NA&lt;/code&gt;s are encoded in a particular way, you can specify it using &lt;code&gt;na_values=[...]&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;encoding&lt;/code&gt; might be useful to fix some problems related to encoding;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;delim_whitespace&lt;/code&gt; can be useful when the separator is a variable number of whitespaces instead of a given character (&lt;code&gt;,&lt;/code&gt;, &lt;code&gt;\t&lt;/code&gt;, etc.);&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Most of these operations can be done in separate steps after loading(for example, you could do a &lt;code&gt;.replace(..., inplace=True)&lt;/code&gt; to change some values to &lt;code&gt;NaN&lt;/code&gt;), but it might be better to do them in one step to improve legibility, speed and memory consumption.&lt;/p&gt;
&lt;h2 id=&#34;data-exportation&#34;&gt;Data Exportation&lt;/h2&gt;
&lt;p&gt;You are probably aware of the &lt;code&gt;.to_csv&lt;/code&gt; method to write a &lt;code&gt;pandas&lt;/code&gt; &lt;code&gt;DataFrame&lt;/code&gt; to a text file. Here are some interesting options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;na_rep&lt;/code&gt; to encode &lt;code&gt;NA&lt;/code&gt;s in a particular way;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;columns&lt;/code&gt; to only write specific columns;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;index&lt;/code&gt;, &lt;code&gt;index_label&lt;/code&gt; and &lt;code&gt;header&lt;/code&gt; to control the output.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;code&gt;.to_latex()&lt;/code&gt; method offers a convenient way to export a &lt;code&gt;pandas&lt;/code&gt; DataFrame to LaTeX format. I have found that the column formatting does not work very well sometimes; you can perform the formatting by hand before using &lt;code&gt;to_latex&lt;/code&gt; using commands such as:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;column&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;column&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;apply(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{:.2f}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format) &lt;span style=&#34;color:#75715e&#34;&gt;# float formatting&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;column&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;column&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;apply(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{:.2f}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; %&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format) &lt;span style=&#34;color:#75715e&#34;&gt;# add a percentage sign&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ci&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; df[[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;lower&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;upper&amp;#34;&lt;/span&gt;]]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;apply(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; x: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{:.2f}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;, &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{:.2f}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;]&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(x[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;lower&amp;#34;&lt;/span&gt;], x[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;upper&amp;#34;&lt;/span&gt;]), axis&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# to converct CI bounds to an interval&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;accessing-values&#34;&gt;Accessing Values&lt;/h2&gt;
&lt;p&gt;There are multiple ways to access the contents in a &lt;code&gt;pandas&lt;/code&gt; &lt;code&gt;DataFrame&lt;/code&gt; (most also work for &lt;code&gt;Series&lt;/code&gt; as well).&lt;/p&gt;
&lt;p&gt;Using &lt;code&gt;python&lt;/code&gt; indexing (a &lt;code&gt;DataFrame&lt;/code&gt; behaves as a dictionary of columns):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;df[columns]&lt;/code&gt;: return all columns in &lt;code&gt;columns&lt;/code&gt;;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;columns&lt;/code&gt; can be string (one column is returned) or a list of string.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Using &lt;code&gt;.loc&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;df.loc[index_values]&lt;/code&gt;: returns the rows corresponding to &lt;code&gt;index_values&lt;/code&gt;;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;index_values&lt;/code&gt; can be a single index value, a list of index values, a slice of values &lt;code&gt;startrow:endrow&lt;/code&gt; or even a Boolean of the same length as &lt;code&gt;df&lt;/code&gt;;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;df.loc[index_values, columns]&lt;/code&gt;: returns the specified columns of the specified rows;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;df.loc[:, columns]&lt;/code&gt;: does the same as &lt;code&gt;df[columns]&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;df.loc[index_values, :]&lt;/code&gt;: does the same as &lt;code&gt;df.loc[index_values]&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Using &lt;code&gt;.iloc&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;df.iloc[index]&lt;/code&gt;: return the rows corresponding to &lt;code&gt;index&lt;/code&gt; using integer indexing;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;index&lt;/code&gt; can be a single integer, a list of integers or even a range of integer &lt;code&gt;startnum:endnum&lt;/code&gt;;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;df.iloc[row_index, col_index]&lt;/code&gt;: returns the specified rows and columns.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Using &lt;code&gt;.at&lt;/code&gt; to access a single value:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;similar indexing as &lt;code&gt;.loc&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Using &lt;code&gt;.iat&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;similar indexing as &lt;code&gt;.iloc&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Using &lt;code&gt;.query()&lt;/code&gt; can be used to select rows on some truth value defined by a string statement similar to that of SQL.&lt;/p&gt;
&lt;p&gt;Here are some interesting methods to create Boolean arrays to use in &lt;code&gt;.loc[]&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.isna()&lt;/code&gt;, &lt;code&gt;.notna()&lt;/code&gt; checks whether values are &lt;code&gt;NaN&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.isin()&lt;/code&gt; corresponds to elementwise native &lt;code&gt;in&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.le&lt;/code&gt;, &lt;code&gt;.lt&lt;/code&gt;, &lt;code&gt;.ge&lt;/code&gt;, &lt;code&gt;.gt&lt;/code&gt;, &lt;code&gt;.eq&lt;/code&gt; and &lt;code&gt;.ne&lt;/code&gt; are equivalent to &lt;code&gt;&amp;lt;=&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;gt;=&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;==&lt;/code&gt; and &lt;code&gt;!=&lt;/code&gt;, respectively;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.between_time()&lt;/code&gt; when dealing with &lt;code&gt;datetime&lt;/code&gt; format;&lt;/li&gt;
&lt;li&gt;Any &lt;code&gt;Series&lt;/code&gt; methods:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.between()&lt;/code&gt; is a nice shorthand for two comparisons;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.str.&amp;lt;method&amp;gt;&lt;/code&gt; when dealing with strings&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.dt.&amp;lt;method&amp;gt;&lt;/code&gt; when dealing with datetime formats&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.cat.&amp;lt;method&amp;gt;&lt;/code&gt; when dealing with categorical values&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;setting-values&#34;&gt;Setting Values&lt;/h2&gt;
&lt;p&gt;To set values in a existing &lt;code&gt;DataFrame&lt;/code&gt;, you can use all previous indexing methods:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use &lt;code&gt;df[columns]&lt;/code&gt; or &lt;code&gt;df.loc[:, columns]&lt;/code&gt; or &lt;code&gt;df.iloc[:, columns]&lt;/code&gt; to set or add columns;&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;df.loc[index]&lt;/code&gt; or &lt;code&gt;df.loc[index, :]&lt;/code&gt; or &lt;code&gt;df.iloc[index, :]&lt;/code&gt; to set or add rows;&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;df.loc[index, columns]&lt;/code&gt; or &lt;code&gt;df.iloc[index, columns]&lt;/code&gt; to set specific entries:&lt;/li&gt;
&lt;li&gt;same with &lt;code&gt;.at&lt;/code&gt; and &lt;code&gt;.iat&lt;/code&gt; to fill a specific cell.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that new rows and columns might be added if &lt;code&gt;index&lt;/code&gt; or &lt;code&gt;columns&lt;/code&gt; contains values not in the current &lt;code&gt;df&lt;/code&gt;. The &lt;code&gt;.iloc&lt;/code&gt; and &lt;code&gt;iat&lt;/code&gt; indexing generally does not support adding new rows and columns and raises an out-of-bound error when trying to set values outside the current &lt;code&gt;df&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For any of these methods the syntax is through assignment where the right-hand side can be various things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a list of list (e.g. a &lt;code&gt;numpy&lt;/code&gt; array),&lt;/li&gt;
&lt;li&gt;a dict &lt;code&gt;column: values&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;a single value copied for all cells,&lt;/li&gt;
&lt;li&gt;a &lt;code&gt;pandas&lt;/code&gt; &lt;code&gt;Series&lt;/code&gt; or &lt;code&gt;Dataframe&lt;/code&gt; object,&lt;/li&gt;
&lt;li&gt;and many more combinations!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To add new rows to a &lt;code&gt;DataFrame&lt;/code&gt;, you can use one of the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;df.loc[index] = row&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;merging two &lt;code&gt;DataFrame&lt;/code&gt;s with same columns (see &lt;a href=&#34;#merging&#34;&gt;Merging DataFrames&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To add new columns:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use &lt;code&gt;df[columns] = values&lt;/code&gt; (multiple columns)&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;df.insert(loc, column, values)&lt;/code&gt; (single column)&lt;/li&gt;
&lt;li&gt;merging two &lt;code&gt;DataFrame&lt;/code&gt;s with same indices (see &lt;a href=&#34;#merging&#34;&gt;Merging DataFrames&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Other interesting methods:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;df.where()&lt;/code&gt; method can also be used to replace values where some condition is false;&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;df.mask()&lt;/code&gt; method is the converse to &lt;code&gt;.where&lt;/code&gt;: it replaces values where the condition is true;&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;df.replace()&lt;/code&gt; replaces values;&lt;/li&gt;
&lt;li&gt;Using &lt;code&gt;df.fillna()&lt;/code&gt; does what its name indicates;&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;df.update(other_df)&lt;/code&gt; can be useful in some cases (see &lt;a href=&#34;#merging&#34;&gt;Merging DataFrames&lt;/a&gt; for more details);&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;df.eval(str, inplace=True)&lt;/code&gt; method lets you compute a new column using a string description;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;subsetting-data&#34;&gt;Subsetting Data&lt;/h2&gt;
&lt;p&gt;Subsetting data can be viewed in two ways: selecting rows/columns or dropping rows/data.&lt;/p&gt;
&lt;p&gt;To select rows or columns, refer to &lt;a href=&#34;#accessing-values&#34;&gt;Accessing data&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To drop rows or columns, you can:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Select your subset and overwrite the &lt;code&gt;DataFrame&lt;/code&gt; as in &lt;code&gt;df = df.loc[...]&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;Use the &lt;code&gt;df.drop(..., inplace=True)&lt;/code&gt; method to drop rows or columns;&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;df.filter()&lt;/code&gt; method can select some rows/columns based on their content (&lt;code&gt;like&lt;/code&gt; or a &lt;code&gt;regex&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Using &lt;code&gt;df.take()&lt;/code&gt; performs similarly as &lt;code&gt;.iloc[]&lt;/code&gt;;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For more specific use cases:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use &lt;code&gt;df.drop_duplicates(..., inplace=True)&lt;/code&gt; to drop repeated rows&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;df.dropna(..., inplace=True)&lt;/code&gt; to drop rows or columns if they contain &lt;code&gt;NaN&lt;/code&gt; values.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;df.truncate()&lt;/code&gt; when the condition is a range of indices.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;reshaping-dataframes&#34;&gt;Reshaping DataFrames&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Transpose:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The method s &lt;code&gt;.T&lt;/code&gt; and &lt;code&gt;.transpose()&lt;/code&gt; do the same thing&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Wide to long format&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The method &lt;code&gt;df.melt()&lt;/code&gt;: take multiple columns into (column name, value);&lt;/li&gt;
&lt;li&gt;The method &lt;code&gt;df.stack()&lt;/code&gt;: similar to melt, but less general; puts the original column names into a &lt;code&gt;MultiIndex&lt;/code&gt; rather than new columns;&lt;/li&gt;
&lt;li&gt;The method &lt;code&gt;df.explode()&lt;/code&gt;: when cells contains lists, this methods expand the dataframe for each element of the list.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pandas &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; pd
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;df_wide &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DataFrame({&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;: range(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;B&amp;#34;&lt;/span&gt;: range(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C&amp;#34;&lt;/span&gt;: range(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;)}, index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;list(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;abcde&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(df_wide)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;   A  B   C
a  0  5  10
b  1  6  11
c  2  7  12
d  3  8  13
e  4  9  14
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(df_wide&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;melt(id_vars&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;, value_vars&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;list(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;BC&amp;#34;&lt;/span&gt;)))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;   A variable  value
0  0        B      5
1  1        B      6
2  2        B      7
3  3        B      8
4  4        B      9
5  0        C     10
6  1        C     11
7  2        C     12
8  3        C     13
9  4        C     14
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(df_wide&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;stack())
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;a  A     0
   B     5
   C    10
b  A     1
   B     6
   C    11
c  A     2
   B     7
   C    12
d  A     3
   B     8
   C    13
e  A     4
   B     9
   C    14
dtype: int64
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;df_wide &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Series([range(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;), range(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;), range(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(df_wide)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;0                         (0, 1, 2)
1                               (0)
2    (0, 1, 2, 3, 4, 5, 6, 7, 8, 9)
dtype: object
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(df_wide&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;explode())
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;0    0
0    1
0    2
1    0
2    0
2    1
2    2
2    3
2    4
2    5
2    6
2    7
2    8
2    9
dtype: object
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Long to wide&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The method &lt;code&gt;df.pivot()&lt;/code&gt; creates columns based on unique levels of a given column filled with the corresponding values;&lt;/li&gt;
&lt;li&gt;The method &lt;code&gt;df.pivot_table()&lt;/code&gt; generalizes &lt;code&gt;.pivot&lt;/code&gt; to more complex situations where there may be duplicate entries which have to be aggregated. This is related to performing &lt;code&gt;.groupby()&lt;/code&gt; chained with &lt;code&gt;.agg()&lt;/code&gt;, but may have different output format;&lt;/li&gt;
&lt;li&gt;The method &lt;code&gt;df.unstack()&lt;/code&gt; pivots a DataFrame using its index (useful for MultiIndex DataFrames mostly).&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;df_long &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DataFrame({&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: list(range(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;))&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;B&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;:range(&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;)})
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(df_long)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;    id type  value
0    0    A      0
1    1    A      1
2    2    A      2
3    3    A      3
4    0    B      4
5    1    B      5
6    2    B      6
7    3    B      7
8    0    C      8
9    1    C      9
10   2    C     10
11   3    C     11
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(df_long&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pivot(index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;, columns&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;, values&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;type  A  B   C
id            
0     0  4   8
1     1  5   9
2     2  6  10
3     3  7  11
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(df_long&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pivot_table(index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;, aggfunc&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;min&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;      id  value
type           
A      0      0
B      0      4
C      0      8
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# equivalent groupby+agg&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(df_long&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;groupby(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;agg({&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;min&amp;#34;&lt;/span&gt;}))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;      value
type       
A         0
B         4
C         8
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(df_long&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set_index([&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;]))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;         value
type id       
A    0       0
     1       1
     2       2
     3       3
B    0       4
     1       5
     2       6
     3       7
C    0       8
     1       9
     2      10
     3      11
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(df_long&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set_index([&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;])&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;unstack())
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;     value           
id       0  1   2   3
type                 
A        0  1   2   3
B        4  5   6   7
C        8  9  10  11
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(df_long&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set_index([&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;])&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;unstack())
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;     value       
type     A  B   C
id               
0        0  4   8
1        1  5   9
2        2  6  10
3        3  7  11
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Cross Tabulation&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;pd.crosstab()&lt;/code&gt; function allows you to compute frequency tables along multiple groupings.&lt;/p&gt;
&lt;h2 id=&#34;merging-dataframes&#34;&gt;Merging DataFrames&lt;/h2&gt;
&lt;p&gt;Here are a few options on how to merge multiple &lt;code&gt;DataFrame&lt;/code&gt;s together. See &lt;a href=&#34;https://pandas.pydata.org/pandas-docs/stable/user_guide/merging.html?highlight=concatenate&#34;&gt;Merge, join, and concatenate&lt;/a&gt; for more details.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Concatenate&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The function &lt;code&gt;pd.concat([df1, df2])&lt;/code&gt; lets you litteraly concatenate multiple &lt;code&gt;DataFrame&lt;/code&gt;s along some axis. This function works either as an &lt;em&gt;inner join&lt;/em&gt; or an &lt;em&gt;outer join&lt;/em&gt; on the multiple dataframes indices.&lt;/p&gt;
&lt;p&gt;The function &lt;code&gt;df.append(other_df)&lt;/code&gt; does concatenation on the index axis (i.e., add rows)&lt;/p&gt;
&lt;p&gt;Using &lt;code&gt;ignore_index=True&lt;/code&gt; can be useful when you don&amp;rsquo;t want to join on the indices and only really concatenate the dataframes. (This is most likely the way you want to use &lt;code&gt;.append()&lt;/code&gt;.)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Merging&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The function &lt;code&gt;pd.merge&lt;/code&gt; lets you perform four types of joins: &lt;code&gt;left&lt;/code&gt;, &lt;code&gt;right&lt;/code&gt;, &lt;code&gt;outer&lt;/code&gt; and &lt;code&gt;inner&lt;/code&gt; which are closely related to their SQL equivalents. It generalizes &lt;code&gt;pd.concat&lt;/code&gt; as you can use columns, instead of the index, to perform the join.&lt;/p&gt;
&lt;p&gt;The inline version of &lt;code&gt;pd.merge&lt;/code&gt; is to use the method &lt;code&gt;.join&lt;/code&gt; on some pre-existing dataframe.&lt;/p&gt;
&lt;p&gt;The method &lt;code&gt;df.update(other)&lt;/code&gt; performs a &lt;em&gt;left join&lt;/em&gt; by replacing the values of &lt;code&gt;df&lt;/code&gt; using those in &lt;code&gt;other&lt;/code&gt;. It replaces on non-NA values in the original &lt;code&gt;df&lt;/code&gt; so this can be use to add values to a &lt;code&gt;df&lt;/code&gt;; no new rows or columns can be created by &lt;code&gt;.update&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;iterating-through-dataframes&#34;&gt;Iterating through DataFrames&lt;/h2&gt;
&lt;p&gt;If you need to traverse a &lt;code&gt;DataFrame&lt;/code&gt; row by row, you can use:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.iterrows()&lt;/code&gt; to return (index, row as &lt;code&gt;Series&lt;/code&gt;);&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.itertuple()&lt;/code&gt; to return (index, named tuple);&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In both cases, you can use multiple assignment to catch each element.&lt;/p&gt;
&lt;p&gt;Another, possibly better, way to do something to each row is through &lt;code&gt;df.apply(fun)&lt;/code&gt;. Thus, the manipulation you would do when iterating across rows could be wrapped into a function &lt;code&gt;fun&lt;/code&gt; applied to each row. This also allows to apply a function by columns using &lt;code&gt;axis=1&lt;/code&gt;. To apply a function to each cell, you can use &lt;code&gt;.applymap(fun)&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i, (a, b, c, d) &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;iterrows():
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(a, b, c, d)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i, a, b, c, d &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;itertuples():
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(a, b, c, d)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;apply(sum, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;0.0 0 20.0 30.0
1.0 1 21.0 31.0
2.0 2 22.0 32.0
3.0 3 23.0 33.0
100 4 102 103
100 5 nan nan
0.0 0 20.0 30.0
1.0 1 21.0 31.0
2.0 2 22.0 32.0
3.0 3 23.0 33.0
100 4 102 103
100 5 nan nan
a     50.0
b     54.0
c     58.0
d     62.0
e    309.0
f      NaN
dtype: float64
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;functions-and-aggregation&#34;&gt;Functions and Aggregation&lt;/h2&gt;
&lt;p&gt;We have seen &lt;code&gt;.apply&lt;/code&gt; and &lt;code&gt;.applymap&lt;/code&gt; to apply a function row/column-wise or element-wise. The method &lt;code&gt;.pipe&lt;/code&gt; allows you to chain and control multiple functions. Note that there exists &lt;em&gt;many&lt;/em&gt; pre-defined functions which can be performed along axes by specifying &lt;code&gt;axis=0/1/None&lt;/code&gt; for rows/columns/all.&lt;/p&gt;
&lt;p&gt;Often, functions applied to rows or columns are aggregation functions. The &lt;code&gt;.agg&lt;/code&gt;, a.k.a. &lt;code&gt;.aggregate&lt;/code&gt;, method lets you perform multiple aggregation functions and produce a well-formated output.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;.agg&lt;/code&gt; methods is particularly useful for grouped dataframes. The &lt;code&gt;.groupby&lt;/code&gt; method splits a dataframe into many subsets defined by the arguments passed. Then, applying &lt;code&gt;.agg&lt;/code&gt; to the grouped dataframe applies it to each subset and produces a dataframe where the index defines the subset and the columns define the aggregation functions.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;.describe&lt;/code&gt; function works as an &lt;code&gt;.agg&lt;/code&gt; call acting on numerical columns only. This can be particularly useful when computing summary statistics on a dataset. Also, this can be chained with a &lt;code&gt;groupby&lt;/code&gt; to perform description by subgroups of the data!&lt;/p&gt;
&lt;h2 id=&#34;multiindex-dataframes&#34;&gt;MultiIndex DataFrames&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;MultiIndex&lt;/code&gt; works just like regular indices except that they have a structure using levels: instead of a single key, each row has a tuple of values acting as a key. Playing with &lt;code&gt;MultiIndex&lt;/code&gt; can be cumbersome sometimes so a nice trick to keep in mind is the &lt;code&gt;.reset_index(inplace=True)&lt;/code&gt; method which moves the MultiIndex to new columns and creates a dummy index in its place.&lt;/p&gt;
&lt;h2 id=&#34;transformations&#34;&gt;Transformations&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Using pandas&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;To encode categorical variables using integer indexing, you can use the function &lt;code&gt;pd.factorize(array)&lt;/code&gt; or the method version &lt;code&gt;series.factorize()&lt;/code&gt;. It returns the encoding as well as the encoded values. To get one-hot encoding, you can use &lt;code&gt;pd.get_dummies()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To bin numerical variables, you can use &lt;code&gt;pd.cut()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Using Scikit-learn&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If you need to scale the data (say to mean 0 and variance 1), I suggest to use the &lt;code&gt;StandardScaler&lt;/code&gt; from &lt;code&gt;sklearn&lt;/code&gt;. It internally stores the mean and standard deviation used for standardization. Then, if you need to apply the same transformation to another matrix, you can do it easily. Also, if you need to recover the original matrix, you can!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; sklearn.preprocessing &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; StandardScaler
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; numpy &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; np
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;X &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;uniform(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, (&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;scaler &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; StandardScaler()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fit(X)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(X)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Xstd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; scaler&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;transform(X)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(Xstd)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(scaler&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;inverse_transform(Xstd))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;[[0.27355506 0.52822275 0.51469633 0.06545488]
 [0.44123359 0.69095683 0.52764392 0.44219493]
 [0.61651989 0.99101129 0.12910797 0.3453753 ]]
[[-1.21558928 -1.0877613   0.6718045  -1.3702373 ]
 [-0.01811033 -0.23879521  0.74183104  0.98816536]
 [ 1.23369961  1.32655652 -1.41363554  0.38207193]]
[[0.27355506 0.52822275 0.51469633 0.06545488]
 [0.44123359 0.69095683 0.52764392 0.44219493]
 [0.61651989 0.99101129 0.12910797 0.3453753 ]]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Typically, categorical data is not encoded using integers. You can always produce a map to integer yourself but you need to keep track of the map. The &lt;code&gt;LabelBinarizer&lt;/code&gt; can do that for you! Then, this uniformizes all encoding and ensures you can recover the correct original categories.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; sklearn.preprocessing &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; LabelBinarizer
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;array([&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;B&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(y)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;label_encoder &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; LabelBinarizer(neg_label&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, pos_label&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;y_01 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; label_encoder&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fit_transform(y)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(y_01)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(label_encoder&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;inverse_transform(np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;array([&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;])))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;[&#39;A&#39; &#39;A&#39; &#39;A&#39; &#39;A&#39; &#39;B&#39; &#39;B&#39; &#39;B&#39; &#39;B&#39; &#39;B&#39; &#39;B&#39;]
[[0]
 [0]
 [0]
 [0]
 [1]
 [1]
 [1]
 [1]
 [1]
 [1]]
[&#39;A&#39; &#39;B&#39; &#39;A&#39; &#39;B&#39; &#39;B&#39; &#39;A&#39; &#39;B&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Some other interesting transformations (see &lt;a href=&#34;https://scikit-learn.org/stable/modules/classes.html#module-sklearn.preprocessing&#34;&gt;Preprocessing and Normalization&lt;/a&gt; for many more):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;LabelEncoder&lt;/code&gt; for more than two categories (one-hot)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MultiLabelBinarizer&lt;/code&gt; for multiple labels to 0/1 encoding&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Modeling using Python</title>
      <link>https://UMichStatistics.github.io/ComputingClub/workshops/resources/python_models/</link>
      <pubDate>Wed, 29 Apr 2020 00:00:00 +0100</pubDate>
      <guid>https://UMichStatistics.github.io/ComputingClub/workshops/resources/python_models/</guid>
      <description>&lt;h2 id=&#34;general-comments&#34;&gt;General comments&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;R equivalents&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;glmnet&lt;/code&gt;: &lt;a href=&#34;https://glm-tools.github.io/pyglmnet/index.html&#34;&gt;&lt;code&gt;pyglmnet&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lme4&lt;/code&gt;: &lt;a href=&#34;http://eshinjolly.com/pymer4/&#34;&gt;&lt;code&gt;pymer4&lt;/code&gt;&lt;/a&gt; and a &lt;code&gt;sklearn&lt;/code&gt; wrapper &lt;a href=&#34;https://github.com/nimh-mbdu/sklearn-lmer&#34;&gt;&lt;code&gt;sklearn-lmer&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://scikit-learn.org&#34;&gt;Scikit-learn&lt;/a&gt; (&lt;code&gt;sklearn&lt;/code&gt;)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Mostly produces &lt;em&gt;predictive&lt;/em&gt; models (&lt;code&gt;fit&lt;/code&gt;, &lt;code&gt;predict&lt;/code&gt; and &lt;code&gt;score&lt;/code&gt;); no built-in inference mechanisms&lt;/li&gt;
&lt;li&gt;Easy to perform CV for parameter selection (&lt;code&gt;.GridSearchCV&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Many &lt;a href=&#34;https://scikit-learn.org/stable/modules/model_evaluation.html#classification-metrics&#34;&gt;metrics&lt;/a&gt; implemented
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://scikit-learn.org/stable/modules/model_evaluation.html#classification-metrics&#34;&gt;Classification&lt;/a&gt;, &lt;a href=&#34;https://scikit-learn.org/stable/modules/model_evaluation.html#regression-metrics&#34;&gt;Regression&lt;/a&gt;, &lt;a href=&#34;https://scikit-learn.org/stable/modules/clustering.html#clustering-evaluation&#34;&gt;Clustering&lt;/a&gt;, &lt;a href=&#34;https://scikit-learn.org/stable/modules/metrics.html#metrics&#34;&gt;Distances and kernels&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Many &lt;a href=&#34;https://scikit-learn.org/stable/modules/preprocessing.html#preprocessing&#34;&gt;preprocessing&lt;/a&gt; tools:
&lt;ul&gt;
&lt;li&gt;Label encoding, scaling, standardization, transformations, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Many related packages:
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://scikit-learn.org/stable/related_projects.html&#34;&gt;Related Projects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://scikits.appspot.com/scikits&#34;&gt;SciKits&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://www.statsmodels.org&#34;&gt;Statsmodels&lt;/a&gt; (&lt;code&gt;statsmodels&lt;/code&gt;)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Classical statistical techniques with inference
&lt;ul&gt;
&lt;li&gt;ANOVAs, LMM, GLM, hypothesis testing, etc.&lt;/li&gt;
&lt;li&gt;Regularization (Elastic net, Rigde, LASSO)&lt;/li&gt;
&lt;li&gt;Rich family of GLM distributions&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Uses &lt;code&gt;R&lt;/code&gt;-like formulas to describe models&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://docs.scipy.org/doc/scipy-0.15.1/reference/stats.html&#34;&gt;Scipy stats module&lt;/a&gt; (&lt;code&gt;scipy.stats&lt;/code&gt;)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Implements some basic statistical functions:
&lt;ul&gt;
&lt;li&gt;Distributions&lt;/li&gt;
&lt;li&gt;Estimators&lt;/li&gt;
&lt;li&gt;Hypothesis tests&lt;/li&gt;
&lt;li&gt;Transformations&lt;/li&gt;
&lt;li&gt;Gaussian KDE&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;categorical-data&#34;&gt;Categorical Data&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Logistic Regression&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LogisticRegression&#34;&gt;&lt;code&gt;sklearn.linear_model.LogisticRegression&lt;/code&gt;&lt;/a&gt;:
&lt;ul&gt;
&lt;li&gt;L1, L2 and elastic net penalties&lt;/li&gt;
&lt;li&gt;For multi-class problems: one-vs-all and multinomial&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://glm-tools.github.io/pyglmnet/api.html&#34;&gt;&lt;code&gt;pyglmnet.GLM(distr=&amp;quot;binomial&amp;quot;)&lt;/code&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;Elastic net regularization (LASSO and Ridge)&lt;/li&gt;
&lt;li&gt;Cross-validation&lt;/li&gt;
&lt;li&gt;Group regularization&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://eshinjolly.com/pymer4/&#34;&gt;&lt;code&gt;pymer4.Lmer(family=&amp;quot;binomial&amp;quot;)&lt;/code&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;Mixed effect models&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pygam.readthedocs.io/en/latest/api/logisticgam.html&#34;&gt;&lt;code&gt;pyGAM.LogisticGAM&lt;/code&gt;&lt;/a&gt;:
&lt;ul&gt;
&lt;li&gt;GAM (with interactions), Cross-validation, similar to &lt;code&gt;sklearn&lt;/code&gt;&amp;rsquo;s API&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;statsmodels&lt;/code&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.statsmodels.org/dev/glm.html&#34;&gt;Binomial GLM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.statsmodels.org/dev/gam.html&#34;&gt;Binomial GLM GAM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.statsmodels.org/dev/mixed_linear.html&#34;&gt;Binomial GLM LMM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.statsmodels.org/stable/discretemod.html&#34;&gt;Multinomial GLM&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Other GLM&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Probit:
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://glm-tools.github.io/pyglmnet/api.html&#34;&gt;&lt;code&gt;pyglmnet.GLM(distr=&amp;quot;probit&amp;quot;)&lt;/code&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;Elastic net regularization (LASSO and Ridge)&lt;/li&gt;
&lt;li&gt;Cross-validation&lt;/li&gt;
&lt;li&gt;Group regularization&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;statsmodels&lt;/code&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.statsmodels.org/stable/discretemod.html&#34;&gt;Probit GLM&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Ridge Classifier&lt;/strong&gt; (Ridge regression on -1/+1 responses)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.RidgeClassifier.html#sklearn.linear_model.RidgeClassifier&#34;&gt;&lt;code&gt;sklearn.linear_model.RidgeClassifier&lt;/code&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LogisticRegressionCV.html#sklearn.linear_model.LogisticRegressionCV&#34;&gt;&lt;code&gt;sklearn.linear_model.RidgeClassifierCV&lt;/code&gt;&lt;/a&gt; performs CV on a solution path&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Discriminant analysis&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://scikit-learn.org/stable/modules/classes.html#module-sklearn.discriminant_analysis&#34;&gt;&lt;code&gt;sklearn.discriminant_analysis&lt;/code&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://scikit-learn.org/stable/modules/generated/sklearn.discriminant_analysis.LinearDiscriminantAnalysis&#34;&gt;LDA&lt;/a&gt;, &lt;a href=&#34;https://scikit-learn.org/stable/modules/generated/sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis&#34;&gt;QDA&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Ensemble and Tree-based Methods&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://scikit-learn.org/stable/modules/classes.html#module-sklearn.ensemble&#34;&gt;&lt;code&gt;sklearn.ensemble&lt;/code&gt;&lt;/a&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.AdaBoostClassifier&#34;&gt;AdaBoost&lt;/a&gt;, &lt;a href=&#34;https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.BaggingClassifier&#34;&gt;Bagging&lt;/a&gt;, &lt;a href=&#34;https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.GradientBoostingClassifier&#34;&gt;Gradient Boosting&lt;/a&gt;, &lt;a href=&#34;https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier&#34;&gt;Random Forest&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://scikit-learn.org/stable/modules/generated/sklearn.tree.DecisionTreeClassifier.html#sklearn.tree.DecisionTreeClassifier&#34;&gt;&lt;code&gt;sklearn.trees.DecisionTreeClassifier&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Gaussian Process&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://scikit-learn.org/stable/modules/generated/sklearn.gaussian_process.GaussianProcessClassifier&#34;&gt;&lt;code&gt;sklearn.gaussian_process.GaussianProcessClassifier&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Naive Bayes&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://scikit-learn.org/stable/modules/classes.html#module-sklearn.naive_bayes&#34;&gt;&lt;code&gt;sklearn.naive_bayes&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;K-Nearest-Neighbors&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://scikit-learn.org/stable/modules/generated/sklearn.neighbors.KNeighborsClassifier.html#sklearn.neighbors.KNeighborsClassifier&#34;&gt;&lt;code&gt;sklearn.neighbors.KNearestNeighborsClassifier&lt;/code&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;uniform weights, distance weights, custom weights&lt;/li&gt;
&lt;li&gt;multiple &lt;a href=&#34;https://scikit-learn.org/stable/modules/generated/sklearn.neighbors.DistanceMetric.html?highlight=distancemetric#sklearn.neighbors.DistanceMetric&#34;&gt;distance metrics&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Neural Networks&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.Perceptron.html#sklearn.linear_model.Perceptron&#34;&gt;&lt;code&gt;sklearn.linear_model.Perceptron&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://scikit-learn.org/stable/modules/generated/sklearn.neural_network.MLPClassifier.html#sklearn.neural_network.MLPClassifier&#34;&gt;&lt;code&gt;sklearn.neural_network.MLPClassifier&lt;/code&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;multiple layers&lt;/li&gt;
&lt;li&gt;activations: identity, logistic (sigmoid), ReLU, tanh&lt;/li&gt;
&lt;li&gt;weight decay&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://scikit-learn.org/stable/modules/generated/sklearn.neural_network.BernoulliRBM.html#sklearn.neural_network.BernoulliRBM&#34;&gt;&lt;code&gt;sklearn.neural_network.BernoulliRBM&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://scikit-neuralnetwork.readthedocs.io/en/latest/guide_model.html&#34;&gt;&lt;code&gt;sknn.nlp.Classifier&lt;/code&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;Compatible with &lt;code&gt;sklearn&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Many more types of layers and activations&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pytorch.org/docs/stable/nn.html&#34;&gt;pyTorch&lt;/a&gt;, &lt;a href=&#34;https://www.tensorflow.org/api_docs/python/&#34;&gt;TensorFlow&lt;/a&gt; (see also &lt;a href=&#34;https://keras.io/&#34;&gt;Keras&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Support Vector Machines&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://scikit-learn.org/stable/modules/classes.html#module-sklearn.svm&#34;&gt;&lt;code&gt;sklearn.svm&lt;/code&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://scikit-learn.org/stable/modules/generated/sklearn.svm.LinearSVC.html#sklearn.svm.LinearSVC&#34;&gt;Linear&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://scikit-learn.org/stable/modules/generated/sklearn.svm.SVC.html#sklearn.svm.SVC&#34;&gt;Kernel&lt;/a&gt;: linear, polynomial, Gaussian, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Multiclass and Multilabel Data&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://scikit-learn.org/stable/modules/classes.html#module-sklearn.multiclass&#34;&gt;&lt;code&gt;sklearn.multiclass&lt;/code&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;meta-estimator for one-vs-one and one-vs-rest (one-vs-all)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://scikit-learn.org/stable/modules/generated/sklearn.multioutput.MultiOutputClassifier&#34;&gt;&lt;code&gt;sklearn.multioutput.MultiOutputClassifier&lt;/code&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;to apply binary classifiers to multiple outputs&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;numerical-data&#34;&gt;Numerical Data&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Linear Regression, ANOVA and Linear Mixed Models&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LinearRegression.html#sklearn.linear_model.LinearRegression&#34;&gt;&lt;code&gt;sklearn.linear_model.LinearRegression&lt;/code&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;Regularizations: &lt;a href=&#34;https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.Ridge.html#sklearn.linear_model.Ridge&#34;&gt;Ridge&lt;/a&gt;, &lt;a href=&#34;https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.Lasso.html#sklearn.linear_model.Lasso&#34;&gt;LASSO&lt;/a&gt;, &lt;a href=&#34;https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.ElasticNet.html#sklearn.linear_model.ElasticNet&#34;&gt;Elastic net&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Multi-task/multi-output: &lt;a href=&#34;https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.MultiTaskElasticNet.html#sklearn.linear_model.MultiTaskElasticNet&#34;&gt;Elastic net&lt;/a&gt;, &lt;a href=&#34;https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.MultiTaskLasso.html#sklearn.linear_model.MultiTaskLasso&#34;&gt;LASSO&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://eshinjolly.com/pymer4/&#34;&gt;&lt;code&gt;pymer4&lt;/code&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;Mixed effect models&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/nimh-mbdu/sklearn-lmer&#34;&gt;&lt;code&gt;sklearn-lmer&lt;/code&gt;&lt;/a&gt;: a &lt;code&gt;sklearn&lt;/code&gt; wrapper with CV&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://glm-tools.github.io/pyglmnet/api.html&#34;&gt;&lt;code&gt;pyglmnet.GLM(distr=&amp;quot;gaussian&amp;quot;)&lt;/code&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;Elastic net regularization (LASSO and Ridge)&lt;/li&gt;
&lt;li&gt;Cross-validation&lt;/li&gt;
&lt;li&gt;Group regularization&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pygam.readthedocs.io/en/latest/api/lineargam.html&#34;&gt;&lt;code&gt;pyGAM.LinearGAM&lt;/code&gt;&lt;/a&gt;:
&lt;ul&gt;
&lt;li&gt;GAM (with interactions), Cross-validation, similar to &lt;code&gt;sklearn&lt;/code&gt;&amp;rsquo;s API&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.statsmodels.org/dev/user-guide.html#regression-and-linear-models&#34;&gt;&lt;code&gt;statsmodels&lt;/code&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.statsmodels.org/dev/regression.html&#34;&gt;Linear Regression&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.statsmodels.org/dev/gam.html&#34;&gt;GAM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.statsmodels.org/dev/mixed_linear.html&#34;&gt;Linear Mixed Effect Models&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.statsmodels.org/dev/anova.html&#34;&gt;ANOVA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.statsmodels.org/dev/generated/statsmodels.multivariate.manova.MANOVA.html#statsmodels.multivariate.manova.MANOVA&#34;&gt;MANOVA&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;GLM&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Count data (Poisson)
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://glm-tools.github.io/pyglmnet/api.html&#34;&gt;&lt;code&gt;pyglmnet.GLM(distr=&amp;quot;poisson&amp;quot;)&lt;/code&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;Elastic net regularization (LASSO and Ridge)&lt;/li&gt;
&lt;li&gt;Cross-validation&lt;/li&gt;
&lt;li&gt;Group regularization&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://eshinjolly.com/pymer4/&#34;&gt;&lt;code&gt;pymer4.Lmer(family=&amp;quot;poisson&amp;quot;)&lt;/code&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;Mixed effect models&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pygam.readthedocs.io/en/latest/api/poissongam.html&#34;&gt;&lt;code&gt;pyGAM.PoissonGAM&lt;/code&gt;&lt;/a&gt;:
&lt;ul&gt;
&lt;li&gt;GAM (with interactions), Cross-validation, similar to &lt;code&gt;sklearn&lt;/code&gt;&amp;rsquo;s API&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;statsmodels&lt;/code&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.statsmodels.org/dev/contingency_tables.html&#34;&gt;Contingency Tables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.statsmodels.org/dev/glm.html&#34;&gt;Poisson GLM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.statsmodels.org/dev/gam.html&#34;&gt;Poisson GLM GAM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.statsmodels.org/dev/mixed_linear.html&#34;&gt;Poisson GLM LMM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.statsmodels.org/stable/discretemod.html&#34;&gt;Generalized Poisson GLM&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Count data (Binomial)
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;statsmodels&lt;/code&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.statsmodels.org/dev/glm.html&#34;&gt;Binomial GLM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.statsmodels.org/dev/gam.html&#34;&gt;Binomial GLM GAM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.statsmodels.org/dev/mixed_linear.html&#34;&gt;Binomial GLM LMM&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Count data (Negative Binomial)
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;statsmodels&lt;/code&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.statsmodels.org/dev/glm.html&#34;&gt;Negative Binomial GLM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.statsmodels.org/dev/gam.html&#34;&gt;Poisson GLM GAM&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Count data (Zero-Inflated Models)
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;statsmodels&lt;/code&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.statsmodels.org/stable/discretemod.html&#34;&gt;Zero-Inflated Poisson GLM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.statsmodels.org/stable/discretemod.html&#34;&gt;Zero-Inflated NegativeBinomial GLM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.statsmodels.org/stable/discretemod.html&#34;&gt;Zero-Inflated Generalized Poisson GLM&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Right-continuous Data (Gamma)
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://glm-tools.github.io/pyglmnet/api.html&#34;&gt;&lt;code&gt;pyglmnet.GLM(distr=&amp;quot;gamma&amp;quot;)&lt;/code&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;Elastic net regularization (LASSO and Ridge)&lt;/li&gt;
&lt;li&gt;Cross-validation&lt;/li&gt;
&lt;li&gt;Group regularization&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://eshinjolly.com/pymer4/&#34;&gt;&lt;code&gt;pymer4.Lmer(family=&amp;quot;gamma&amp;quot;)&lt;/code&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;Mixed effect models&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pygam.readthedocs.io/en/latest/api/gammagam.html&#34;&gt;&lt;code&gt;pyGAM.GammaGAM&lt;/code&gt;&lt;/a&gt;:
&lt;ul&gt;
&lt;li&gt;GAM (with interactions), Cross-validation, similar to &lt;code&gt;sklearn&lt;/code&gt;&amp;rsquo;s API&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;statsmodels&lt;/code&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.statsmodels.org/dev/glm.html&#34;&gt;Gamma GLM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.statsmodels.org/dev/gam.html&#34;&gt;Gamma GLM GAM&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Right-continuous Data (Inverse Gaussian)
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://eshinjolly.com/pymer4/&#34;&gt;&lt;code&gt;pymer4.Lmer(family=&amp;quot;inverse_gaussian&amp;quot;)&lt;/code&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;Mixed effect models&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pygam.readthedocs.io/en/latest/api/invgaussgam.html&#34;&gt;&lt;code&gt;pyGAM.InvGaussGAM&lt;/code&gt;&lt;/a&gt;:
&lt;ul&gt;
&lt;li&gt;GAM (with interactions), Cross-validation, similar to &lt;code&gt;sklearn&lt;/code&gt;&amp;rsquo;s API&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;statsmodels&lt;/code&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.statsmodels.org/dev/glm.html&#34;&gt;Inverse Gaussian GLM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.statsmodels.org/dev/gam.html&#34;&gt;Inverse Gaussian GLM GAM&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Right-continuous with Excess Zero Data (Tweedie with $p\in(1,2)$)
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;statsmodels&lt;/code&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.statsmodels.org/dev/glm.html&#34;&gt;Tweedie GLM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.statsmodels.org/dev/gam.html&#34;&gt;Tweedie GLM GAM&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Kernel Linear Regression&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://scikit-learn.org/stable/modules/generated/sklearn.kernel_ridge.KernelRidge.html#sklearn.kernel_ridge.KernelRidge&#34;&gt;&lt;code&gt;sklearn.kernel_ridge.KernelRidge&lt;/code&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;Kernels: linear, polynomial, Gaussian, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Ensemble and Tree-based Methods&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://scikit-learn.org/stable/modules/classes.html#module-sklearn.ensemble&#34;&gt;&lt;code&gt;sklearn.ensemble&lt;/code&gt;&lt;/a&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.AdaBoostRegressor.html#sklearn.ensemble.AdaBoostRegressor&#34;&gt;AdaBoost&lt;/a&gt;, &lt;a href=&#34;https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.BaggingRegressor.html#sklearn.ensemble.BaggingRegressor&#34;&gt;Bagging&lt;/a&gt;, &lt;a href=&#34;https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.GradientBoostingRegressor.html#sklearn.ensemble.GradientBoostingRegressor&#34;&gt;Gradient Boosting&lt;/a&gt;, &lt;a href=&#34;https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestRegressor.html#sklearn.ensemble.RandomForestRegressor&#34;&gt;Random Forest&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://scikit-learn.org/stable/modules/generated/sklearn.tree.DecisionTreeRegressor.html#sklearn.tree.DecisionTreeRegressor&#34;&gt;&lt;code&gt;sklearn.trees.DecisionTreeRegressor&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Gaussian Process&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://scikit-learn.org/stable/modules/generated/sklearn.gaussian_process.GaussianProcessRegressor.html#sklearn.gaussian_process.GaussianProcessRegressor&#34;&gt;&lt;code&gt;sklearn.gaussian_process.GaussianProcessRegressor&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;K-Nearest-Neighbors&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://scikit-learn.org/stable/modules/generated/sklearn.neighbors.KNeighborsRegressor.html#sklearn.neighbors.KNeighborsRegressor&#34;&gt;&lt;code&gt;sklearn.neighbors.KNearestNeighborsRegressor&lt;/code&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;uniform weights, distance weights, custom weights&lt;/li&gt;
&lt;li&gt;multiple &lt;a href=&#34;https://scikit-learn.org/stable/modules/generated/sklearn.neighbors.DistanceMetric.html?highlight=distancemetric#sklearn.neighbors.DistanceMetric&#34;&gt;distance metrics&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Neural Networks&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://scikit-learn.org/stable/modules/generated/sklearn.neural_network.MLPRegressor.html#sklearn.neural_network.MLPRegressor&#34;&gt;&lt;code&gt;sklearn.neural_network.MLPRegressor&lt;/code&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;multiple layers&lt;/li&gt;
&lt;li&gt;activations: identity, logistic (sigmoid), ReLU, tanh&lt;/li&gt;
&lt;li&gt;weight decay&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://scikit-neuralnetwork.readthedocs.io/en/latest/guide_model.html&#34;&gt;&lt;code&gt;sknn.nlp.Regressor&lt;/code&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;Compatible with &lt;code&gt;sklearn&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Many more types of layers and activations&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pytorch.org/docs/stable/nn.html&#34;&gt;pyTorch&lt;/a&gt;, &lt;a href=&#34;https://www.tensorflow.org/api_docs/python/&#34;&gt;TensorFlow&lt;/a&gt; (see also &lt;a href=&#34;https://keras.io/&#34;&gt;Keras&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Support Vector Machines&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://scikit-learn.org/stable/modules/classes.html#module-sklearn.svm&#34;&gt;&lt;code&gt;sklearn.svm&lt;/code&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://scikit-learn.org/stable/modules/generated/sklearn.svm.LinearSVR.html#sklearn.svm.LinearSVR&#34;&gt;Linear&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://scikit-learn.org/stable/modules/generated/sklearn.svm.SVR.html#sklearn.svm.SVR&#34;&gt;Kernel&lt;/a&gt;: linear, polynomial, Gaussian, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;unsupervised-learning&#34;&gt;Unsupervised Learning&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Clustering&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://scikit-learn.org/stable/modules/classes.html#module-sklearn.cluster&#34;&gt;&lt;code&gt;sklearn.cluster&lt;/code&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://scikit-learn.org/stable/modules/generated/sklearn.cluster.KMeans.html#sklearn.cluster.KMeans&#34;&gt;K-means&lt;/a&gt;, &lt;a href=&#34;https://scikit-learn.org/stable/modules/generated/sklearn.cluster.AgglomerativeClustering.html#sklearn.cluster.AgglomerativeClustering&#34;&gt;Agglomerative clustering&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Gaussian Mixture Model&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://scikit-learn.org/stable/modules/generated/sklearn.mixture.GaussianMixture.html#sklearn.mixture.GaussianMixture&#34;&gt;&lt;code&gt;sklearn.mixture.GaussianMixture&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;dimensionality-reduction&#34;&gt;Dimensionality Reduction&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://scikit-learn.org/stable/modules/classes.html#module-sklearn.decomposition&#34;&gt;&lt;code&gt;sklearn.decomposition&lt;/code&gt;&lt;/a&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://scikit-learn.org/stable/modules/generated/sklearn.decomposition.KernelPCA.html#sklearn.decomposition.KernelPCA&#34;&gt;Kernel PCA&lt;/a&gt;, &lt;a href=&#34;https://scikit-learn.org/stable/modules/generated/sklearn.decomposition.PCA.html#sklearn.decomposition.PCA&#34;&gt;PCA&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://scikit-learn.org/stable/modules/manifold.html#manifold&#34;&gt;&lt;code&gt;sklearn.manifold&lt;/code&gt;&lt;/a&gt;:
&lt;ul&gt;
&lt;li&gt;Isomap, t-SNE, eetc.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://scikit-neuralnetwork.readthedocs.io/en/latest/module_ae.html&#34;&gt;&lt;code&gt;sknn.ae.AutoEncoder&lt;/code&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;Neural network autoencoder&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>High Performance Computing</title>
      <link>https://UMichStatistics.github.io/ComputingClub/workshops/resources/hpc/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>https://UMichStatistics.github.io/ComputingClub/workshops/resources/hpc/</guid>
      <description>&lt;h2 id=&#34;language-packages&#34;&gt;Language, packages&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/um-dang/conda_on_the_cluster&#34;&gt;&lt;strong&gt;Conda integration in GreatLakes&lt;/strong&gt;&lt;/a&gt;
&lt;em&gt;by &lt;a href=&#34;https://um-dang.github.io/&#34;&gt;UMich Data Analysis Networking Group&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LaTeX</title>
      <link>https://UMichStatistics.github.io/ComputingClub/workshops/resources/latex/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>https://UMichStatistics.github.io/ComputingClub/workshops/resources/latex/</guid>
      <description>&lt;h2 id=&#34;editors&#34;&gt;Editors&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.lyx.org/&#34;&gt;LyX&lt;/a&gt;, a WYSIWYG LaTeX editor useful for quick math writing.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;citation-management&#34;&gt;Citation management&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.zotero.org/&#34;&gt;Zotero&lt;/a&gt; for local and remote bibliography management.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.zotero.org/download/connectors&#34;&gt;Zotero connector&lt;/a&gt; for Zotero integration in browsers.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://tex.stackexchange.com/questions/25701/bibtex-vs-biber-and-biblatex-vs-natbib&#34;&gt;bibtex vs biblatex vs biber vs natbib&lt;/a&gt; to understand the differences.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://mathscinet-ams-org.proxy.lib.umich.edu/mrlookup&#34;&gt;MRLookup&lt;/a&gt; has a nice search engine to get &lt;em&gt;verified&lt;/em&gt; citations for many peer-reviewed publications. You can get &lt;code&gt;BibTeX&lt;/code&gt; formatted exports. Many journals require the MR number, so you can find them using that tool. Also, check out &lt;a href=&#34;https://mathscinet.ams.org/msnhtml/serials.pdf&#34;&gt;Abbreviations of Names of Serials&lt;/a&gt; if you want the abbreviated version of journal names.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;editing-equations&#34;&gt;Editing equations&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Use the &lt;code&gt;\left&lt;/code&gt; and &lt;code&gt;\right&lt;/code&gt; commands near brackets and parens to automatically size them (i.e. outer brackets will be made larger than inner brackets).&lt;/li&gt;
&lt;li&gt;The align environment will add a tag to each line as a separate equation. Using &lt;code&gt;split&lt;/code&gt; within an &lt;code&gt;equation&lt;/code&gt; or &lt;code&gt;align&lt;/code&gt; will assign one label to all lines.&lt;/li&gt;
&lt;li&gt;You can use the &lt;code&gt;\tag&lt;/code&gt; command to edit the number next to an equation
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;\tag{Hi Rob}&lt;/code&gt; will change an equation label from &amp;ldquo;(1)&amp;rdquo; to &amp;ldquo;(Hi Rob)&amp;rdquo;&lt;/li&gt;
&lt;li&gt;This can be a useful, if somewhat hacky, way to add commentary to multiline equations&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;\label&lt;/code&gt; command assigns an internal keyword which is used in referencing via &lt;code&gt;\ref&lt;/code&gt; or &lt;code&gt;\cref&lt;/code&gt;, whereas &lt;code&gt;\tag&lt;/code&gt; will change the actual label that appears in the output.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;referencing-equationsfigures&#34;&gt;Referencing equations/figures&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;\Cref&lt;/code&gt; command will automatically determine what is being referenced based on the type of the object that was labelled. For example, &lt;code&gt;\ref{mylabel}&lt;/code&gt; will display as &amp;ldquo;Equation (1)&amp;rdquo; if &lt;code&gt;\label{mylabel}&lt;/code&gt; is next an equation and &amp;ldquo;Figure (1)&amp;rdquo; if &lt;code&gt;\label{mylabel}&lt;/code&gt; is close to a figure.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\autoref&lt;/code&gt; does something similar, but depends on a specific convention within the label. For example, you need to prepend an &lt;code&gt;eq:&lt;/code&gt; so  &lt;code&gt;\autoref{eq:mylabel}&lt;/code&gt; will show up as &amp;ldquo;Equation (1)&amp;rdquo;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;some-tips-and-tricks&#34;&gt;Some tips and tricks&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Check out &lt;a href=&#34;http://detexify.kirelabs.org/classify.html&#34;&gt;Detexify&lt;/a&gt; to find the correct math symbol by drawing it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Check out the &lt;a href=&#34;https://www.ctan.org/pkg/todonotes&#34;&gt;&lt;code&gt;todonotes&lt;/code&gt; package&lt;/a&gt; to add todo notes and comments to LaTeX files and pdf output.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use &lt;code&gt;include&lt;/code&gt; or &lt;code&gt;input&lt;/code&gt; to insert the content of another &lt;code&gt;.tex&lt;/code&gt; file where you want it. For example, you can maintain a math macro file that you use often or organize your sections/chapters in different files. Also, read &lt;a href=&#34;https://tex.stackexchange.com/questions/246/when-should-i-use-input-vs-include&#34;&gt;When should I use \input vs. \include?&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>MacOS</title>
      <link>https://UMichStatistics.github.io/ComputingClub/workshops/resources/macos/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>https://UMichStatistics.github.io/ComputingClub/workshops/resources/macos/</guid>
      <description>&lt;h2 id=&#34;package-and-application-manager-homebrewhttpsbrewsh&#34;&gt;Package and application manager (&lt;a href=&#34;https://brew.sh/&#34;&gt;Homebrew&lt;/a&gt;)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Installation: follow the instructions on the &lt;a href=&#34;https://brew.sh/&#34;&gt;website&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Basic commands:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;brew install &amp;lt;package&amp;gt;&lt;/code&gt; to install a particular package;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;brew cask install &amp;lt;application&amp;gt;&lt;/code&gt; to install an application (will appear in the &lt;code&gt;Applications&lt;/code&gt; folder);&lt;/li&gt;
&lt;li&gt;&lt;code&gt;brew search &amp;lt;name&amp;gt;&lt;/code&gt; to list available formulae containing &lt;code&gt;name&lt;/code&gt;;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Useful to export some (all) packages to another environment (&lt;code&gt;brew bundle&lt;/code&gt; command) resolving all dependencies.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;terminal-customization&#34;&gt;Terminal customization&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ohmyz.sh/&#34;&gt;Oh My ZSH!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;cool-apps&#34;&gt;Cool Apps&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://apps.apple.com/us/app/magnet/id441258766?mt=12&#34;&gt;Magnet window manager (App Store)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Package Development</title>
      <link>https://UMichStatistics.github.io/ComputingClub/workshops/resources/packages/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>https://UMichStatistics.github.io/ComputingClub/workshops/resources/packages/</guid>
      <description>&lt;h2 id=&#34;smoke-testing&#34;&gt;Smoke Testing&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Smoke_testing_(software)&#34;&gt;Wikipedia&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Smoke testing is a quick and easy way to check if code works.
If your program can&amp;rsquo;t even run without crashing, there&amp;rsquo;s no point to performing more fine-grained testing procedures.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sqrt_1 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;function&lt;/span&gt;(x) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;if &lt;/span&gt;(x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ret &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; x&lt;span style=&#34;color:#a6e22e&#34;&gt;^&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    } else {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ret &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;x)&lt;span style=&#34;color:#a6e22e&#34;&gt;^&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;i&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;return&lt;/span&gt;(ret)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sqrt_2 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;function&lt;/span&gt;(x) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;if &lt;/span&gt;(x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ret &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; x&lt;span style=&#34;color:#a6e22e&#34;&gt;^&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    } else {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ret &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;paste0&lt;/span&gt;((&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;x)&lt;span style=&#34;color:#a6e22e&#34;&gt;^&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt;), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;i&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;return&lt;/span&gt;(ret)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here is the smoke-test we might right.
Notice that the output is not checked; we just want to check if there are any errors.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;smoke_test &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;function&lt;/span&gt;(test_input) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;sqrt_1&lt;/span&gt;(test_input) &lt;span style=&#34;color:#75715e&#34;&gt;# will raise an error&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;sqrt_2&lt;/span&gt;(test_input) &lt;span style=&#34;color:#75715e&#34;&gt;# will not raise an error, but is problematic&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;smoke_test&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;smoke_test&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;3.14&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;smoke_test&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;-2&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;the-unit-testing-paradigm&#34;&gt;The Unit Testing paradigm&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Test-driven_development&#34;&gt;Test-driven development&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;optimal-workflow-with-an-example&#34;&gt;Optimal workflow with an example&lt;/h3&gt;
&lt;p&gt;We want to implement a square root function with the following behaviour:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;returns the square root for positive input&lt;/li&gt;
&lt;li&gt;returns the complex square root for negative input&lt;/li&gt;
&lt;li&gt;is vectorized and return vectors/matrices with the same dimension&lt;/li&gt;
&lt;li&gt;if one input is negative, all outputs are in complex form&lt;/li&gt;
&lt;li&gt;raises an appropriate error if the input is not numeric (or any element of the input is not numeric)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Before writing the function, we could write the following tests:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sqrt(1) = 1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sqrt(-1) = 0+1i&lt;/code&gt; (depends on how complex numbers are implemented)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sqrt([0, 1]) = [0, 1]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sqrt([[0], [-1]]) = [[0+0i], [0+1i]]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sqrt(&amp;quot;a&amp;quot;)&lt;/code&gt; raises an error&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sqrt([0, &amp;quot;A&amp;quot;])&lt;/code&gt; raises an error&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Then, we implement our function checking tests constantly until all criterions are satisfied.&lt;/p&gt;
&lt;p&gt;Some (most) IDEs can automatically run all your tests in the background when any file is saved: this checks the current function your are implementing and also that you did not break any prior developments. This constant checking enable you to quickly diagnose the problem as only your latest edits change the result of tests.&lt;/p&gt;
&lt;h3 id=&#34;another-approach&#34;&gt;Another approach&lt;/h3&gt;
&lt;p&gt;In practice, before writing a specific function, we might not know exactly what it&amp;rsquo;s behaviour will be so it is not clear what tests to write beforehand. (I often get excited about implementing something and writing tests is boring&amp;hellip;)&lt;/p&gt;
&lt;p&gt;So, instead of writing the tests before the function, we can wait until we are satisfied with the behaviour of a function and &lt;em&gt;protect&lt;/em&gt; it with tests. Then, interactions with future functions will have some safeguards against bad input or output. Also, any further changes you perform on the function will have to satisfy the tests you previously wrote so any functions depending on the current function should not break.&lt;/p&gt;
&lt;p&gt;Furthermore, the creation of tests &lt;em&gt;after&lt;/em&gt; the function may tell you that you have to refactor some parts of your function. When first writing it, you might not have thought of some edge case and the time spent wirting tests may uncover those cases.&lt;/p&gt;
&lt;h3 id=&#34;what-to-test&#34;&gt;What to test&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Known output (e.g., simple cases you can compute by hand)&lt;/li&gt;
&lt;li&gt;In/out typing (behaviour under bad input, correct output given input)&lt;/li&gt;
&lt;li&gt;Output dimensions (column vs row vector, do you drop a dimension if it has length 1, etc.)&lt;/li&gt;
&lt;li&gt;Expected errors&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;some-notes&#34;&gt;Some notes&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Unit testing is great for interactive languages to detect if you are inadvertantly using global variables (defined outside the scope of a function). The test suite runs outside your scripts so tests will fail if you do so.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;unit-testing-in-r-using-the-testthat-package&#34;&gt;Unit Testing in &lt;code&gt;R&lt;/code&gt; using the &lt;code&gt;testthat&lt;/code&gt; package&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s create a simple &lt;code&gt;R&lt;/code&gt; package in &lt;code&gt;RStudio&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;New Project&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;R Package&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;New Project&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Put in some name&lt;/li&gt;
&lt;li&gt;Check &lt;code&gt;Open in new session&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let&amp;rsquo;s add the above defined functions in the &lt;code&gt;hello.R&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s create some tests:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Run &lt;code&gt;devtools::test()&lt;/code&gt; and type in &lt;code&gt;1&lt;/code&gt; to create the &lt;code&gt;tests&lt;/code&gt; directory, which contains a &lt;code&gt;testthat.R&lt;/code&gt; file managing imports and helps in running all tests at once, and a sub-directory &lt;code&gt;testthat&lt;/code&gt; where we will add some test;&lt;/li&gt;
&lt;li&gt;Run test using &lt;code&gt;Build&lt;/code&gt; &amp;gt; &lt;code&gt;Test Package&lt;/code&gt; or simply type &lt;code&gt;Ctrl+Shift+T&lt;/code&gt; or run &lt;code&gt;devtools::test()&lt;/code&gt;. You should see an output saying there are no tests in the &lt;code&gt;testthat&lt;/code&gt; directory (as expected).&lt;/li&gt;
&lt;li&gt;Create a &lt;code&gt;test_sqrt_1.R&lt;/code&gt; file in &lt;code&gt;tests/testthat&lt;/code&gt; (NB: all test file must start with &lt;code&gt;test&lt;/code&gt; so it can be discovered by the &lt;code&gt;testthat&lt;/code&gt; package.)&lt;/li&gt;
&lt;li&gt;At the head of the file, add `context(&amp;ldquo;Test sqrt functions&amp;rdquo;) which will yield a more verbose output.&lt;/li&gt;
&lt;li&gt;Add a first test (note the near-grammarly syntax: the first argument is what we are &lt;em&gt;testing that &lt;code&gt;sqrt_1()&lt;/code&gt; works on positive input&lt;/em&gt;):&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;test_that&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sqrt_1() works on positive input&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#75715e&#34;&gt;# what we are testing&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    { &lt;span style=&#34;color:#75715e&#34;&gt;# the test itself, using expect statements&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;expect_equal&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;sqrt_1&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;), &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;expect_equal&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;sqrt_1&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;), &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Run tests again and observe that our function passes all tests so far.&lt;/li&gt;
&lt;li&gt;Let&amp;rsquo;s add another succeding test, but on an expected non-successfull call:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;test_that&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sqrt_1 raises an error with negative inputs&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;expect_error&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;sqrt_1&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;-1.0&lt;/span&gt;), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;non-numeric argument&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Running all tests should again suceed.&lt;/li&gt;
&lt;li&gt;Now, let&amp;rsquo;s add a test which fails:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;test_that&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sqrt_1 returns imaginary numbers for negative inputs&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;expect_match&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;sqrt&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;-1.0&lt;/span&gt;), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1i&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;unit-testing-in-python-using-the-unittests-package&#34;&gt;Unit Testing in &lt;code&gt;Python&lt;/code&gt; using the &lt;code&gt;unittests&lt;/code&gt; package&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.python.org/3/library/unittest.html&#34;&gt;&lt;code&gt;unittest&lt;/code&gt; documentation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Create a simple module:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;TestModule/
  sqrt.py
  test/
    test_sqrt.py
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;where&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Python&#34; data-lang=&#34;Python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# sqrt.py&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; math
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sqrt&lt;/span&gt;(x):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; math&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sqrt(x)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# test_sqrt.py&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; unittest
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; sqrt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MyTestCase&lt;/span&gt;(unittest&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;TestCase):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test_something&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		  self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;assertEqual(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		      sqrt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sqrt(&lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;), 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		      &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;what happened if the test failed&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		  )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	  unittest&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;main()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run tests using&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;python -m unittest tests/test_sqrt.py
python -m unittest discover tests
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;discover tests&lt;/code&gt; implies that the &lt;code&gt;unittest&lt;/code&gt; package will search the &lt;code&gt;tests&lt;/code&gt; directory for all tests in there.&lt;/p&gt;
&lt;p&gt;The basic &lt;code&gt;unittest&lt;/code&gt; package is not well suited to check equality of &lt;code&gt;numpy&lt;/code&gt; arrays. Here&amp;rsquo;s a way to do it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Python&#34; data-lang=&#34;Python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; numpy &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; np
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MyTest&lt;/span&gt;(unittest&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;TestCase):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;numpy_test_case&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;testing&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;asser_array_almost_equal(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                array1,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                array2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AssertionError&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; error:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;assertTrue(res, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;what happened if the test failed&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In PyCharm, you can set up automatic testing as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;File&lt;/code&gt; &amp;gt; &lt;code&gt;Settings&lt;/code&gt; &amp;gt; &lt;code&gt;Tools&lt;/code&gt; &amp;gt; &lt;code&gt;Python Integrated Tools&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Select &lt;code&gt;Unittests&lt;/code&gt; under &lt;code&gt;Testing&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;In the &lt;code&gt;Project&lt;/code&gt; pane (the directory), left click on the &lt;code&gt;tests&lt;/code&gt; directory and select &lt;code&gt;Craete unittest in tests&lt;/code&gt; and click &lt;code&gt;OK&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Run tests once &lt;code&gt;Run&lt;/code&gt; &amp;gt; &lt;code&gt;Run Unittests in tests&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;In the &lt;code&gt;Run&lt;/code&gt; pane, click on &lt;code&gt;Toggle auto-test&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Now, any changes to files automatically triggers all tests to be run!&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;unit-testing-in-julia&#34;&gt;Unit Testing in Julia&lt;/h2&gt;
&lt;p&gt;This &lt;a href=&#34;https://julia.quantecon.org/more_julia/testing.html&#34;&gt;guide&lt;/a&gt; gives a nice, detailed walkthrough on how to set up a package in Julia with tests and integrate it with Travis and Codecov.&lt;/p&gt;
&lt;p&gt;Julia comes with the &amp;lsquo;Test&amp;rsquo; module built-in which offers basic unit tests.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Julia&#34; data-lang=&#34;Julia&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sqrt_im(x&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Real&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sqrt(complex(x))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; Test
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Unit tests (check for right value in both cases)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@test&lt;/span&gt; sqrt_im(&lt;span style=&#34;color:#ae81ff&#34;&gt;2.0&lt;/span&gt;)  &lt;span style=&#34;color:#f92672&#34;&gt;â&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1.4142135623730951&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@test&lt;/span&gt; sqrt_im(&lt;span style=&#34;color:#ae81ff&#34;&gt;5.0&lt;/span&gt;)  &lt;span style=&#34;color:#f92672&#34;&gt;â&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1.4142135623730951&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@test&lt;/span&gt; sqrt_im(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2.0&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;â&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1.4142135623730951&lt;/span&gt;im
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Random input&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; Random
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Z &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; randn(MersenneTwister(&lt;span style=&#34;color:#ae81ff&#34;&gt;555&lt;/span&gt;), &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@test&lt;/span&gt; (sqrt_im&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;(Z))&lt;span style=&#34;color:#f92672&#34;&gt;.^&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;â&lt;/span&gt; Z
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@test&lt;/span&gt; sqrt(&lt;span style=&#34;color:#ae81ff&#34;&gt;2.0&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;â&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1.4142135623730951&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@test&lt;/span&gt; sqrt(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2.0&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;â&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1.414213562373095&lt;/span&gt;im
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# &amp;#34;test_broken&amp;#34; lets us mark tests we know give the wrong answer or raise an error&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@test_broken&lt;/span&gt; sqrt(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2.0&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;â&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1.414213562373095&lt;/span&gt;im
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# &amp;#34;test_broken&amp;#34; will return an Error testing value if the expression passes&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@test_broken&lt;/span&gt; sqrt(&lt;span style=&#34;color:#ae81ff&#34;&gt;2.0&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;â&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1.4142135623730951&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Julia requires a boolean result to pass; for smoke testing this can be alleviated&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# by just always returning true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@test&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  sqrt_im(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2.0&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  true
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@test&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  sqrt(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2.0&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  true
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;
</description>
    </item>
    
    <item>
      <title>Version Control</title>
      <link>https://UMichStatistics.github.io/ComputingClub/workshops/resources/versioncontrol/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>https://UMichStatistics.github.io/ComputingClub/workshops/resources/versioncontrol/</guid>
      <description>&lt;h2 id=&#34;git&#34;&gt;Git&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://git-scm.com/book/en/v2&#34;&gt;&lt;strong&gt;The Pro Git book&lt;/strong&gt;&lt;/a&gt; &lt;em&gt;by Scott Chacon and Ben Straub:&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://git-scm.com/book/en/v2/Git-Internals-Plumbing-and-Porcelain&#34;&gt;10. Git Internals&lt;/a&gt;: a deep understanding of git.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://ohshitgit.com/&#34;&gt;&lt;strong&gt;Oh Shit, Git!?!&lt;/strong&gt;&lt;/a&gt; and &lt;a href=&#34;http://www.dangitgit.com/&#34;&gt;&lt;strong&gt;Dangit, git!&lt;/strong&gt;&lt;/a&gt;: two go-to resources when encountering git problems.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>All things R</title>
      <link>https://UMichStatistics.github.io/ComputingClub/workshops/resources/r/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>https://UMichStatistics.github.io/ComputingClub/workshops/resources/r/</guid>
      <description>&lt;h2 id=&#34;cheat-sheets&#34;&gt;Cheat sheets&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A very handy &lt;a href=&#34;https://rstudio.com/wp-content/uploads/2015/03/ggplot2-cheatsheet.pdf&#34;&gt;&lt;code&gt;ggplot&lt;/code&gt; cheat sheet&lt;/a&gt; containing most functionalities and their syntax! (&lt;em&gt;Suggested by Vincenzo Loffredo&lt;/em&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A bunch of very useful &lt;a href=&#34;https://rstudio.com/resources/cheatsheets/&#34;&gt;R and RStudio cheat sheets&lt;/a&gt;. (&lt;em&gt;Suggested by Drew Yarger&lt;/em&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
