<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Resources | UM Statistics Computing Club</title>
    <link>https://UMichStatistics.github.io/ComputingClub/workshops/resources/</link>
      <atom:link href="https://UMichStatistics.github.io/ComputingClub/workshops/resources/index.xml" rel="self" type="application/rss+xml" />
    <description>Resources</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>Â© 2020 UM Statistics PhD Student Council Computing Committee</copyright><lastBuildDate>Sun, 09 Sep 2018 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://UMichStatistics.github.io/ComputingClub/img/icon_512.png</url>
      <title>Resources</title>
      <link>https://UMichStatistics.github.io/ComputingClub/workshops/resources/</link>
    </image>
    
    <item>
      <title>High Performance Computing</title>
      <link>https://UMichStatistics.github.io/ComputingClub/workshops/resources/hpc/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>https://UMichStatistics.github.io/ComputingClub/workshops/resources/hpc/</guid>
      <description>&lt;h2 id=&#34;language-packages&#34;&gt;Language, packages&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/um-dang/conda_on_the_cluster&#34;&gt;&lt;strong&gt;Conda integration in GreatLakes&lt;/strong&gt;&lt;/a&gt;
&lt;em&gt;by &lt;a href=&#34;https://um-dang.github.io/&#34;&gt;UMich Data Analysis Networking Group&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LaTeX</title>
      <link>https://UMichStatistics.github.io/ComputingClub/workshops/resources/latex/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>https://UMichStatistics.github.io/ComputingClub/workshops/resources/latex/</guid>
      <description>&lt;h2 id=&#34;editors&#34;&gt;Editors&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.lyx.org/&#34;&gt;LyX&lt;/a&gt;, a WYSIWYG LaTeX editor useful for quick math writing.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;citation-management&#34;&gt;Citation management&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.zotero.org/&#34;&gt;Zotero&lt;/a&gt; for local and remote bibliography management.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.zotero.org/download/connectors&#34;&gt;Zotero connector&lt;/a&gt; for Zotero integration in browsers.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://tex.stackexchange.com/questions/25701/bibtex-vs-biber-and-biblatex-vs-natbib&#34;&gt;bibtex vs biblatex vs biber vs natbib&lt;/a&gt; to understand the differences.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://mathscinet-ams-org.proxy.lib.umich.edu/mrlookup&#34;&gt;MRLookup&lt;/a&gt; has a nice search engine to get &lt;em&gt;verified&lt;/em&gt; citations for many peer-reviewed publications. You can get &lt;code&gt;BibTeX&lt;/code&gt; formatted exports. Many journals require the MR number, so you can find them using that tool. Also, check out &lt;a href=&#34;https://mathscinet.ams.org/msnhtml/serials.pdf&#34;&gt;Abbreviations of Names of Serials&lt;/a&gt; if you want the abbreviated version of journal names.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;editing-equations&#34;&gt;Editing equations&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Use the &lt;code&gt;\left&lt;/code&gt; and &lt;code&gt;\right&lt;/code&gt; commands near brackets and parens to automatically size them (i.e. outer brackets will be made larger than inner brackets).&lt;/li&gt;
&lt;li&gt;The align environment will add a tag to each line as a separate equation. Using &lt;code&gt;split&lt;/code&gt; within an &lt;code&gt;equation&lt;/code&gt; or &lt;code&gt;align&lt;/code&gt; will assign one label to all lines.&lt;/li&gt;
&lt;li&gt;You can use the &lt;code&gt;\tag&lt;/code&gt; command to edit the number next to an equation
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;\tag{Hi Rob}&lt;/code&gt; will change an equation label from &amp;ldquo;(1)&amp;rdquo; to &amp;ldquo;(Hi Rob)&amp;rdquo;&lt;/li&gt;
&lt;li&gt;This can be a useful, if somewhat hacky, way to add commentary to multiline equations&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;\label&lt;/code&gt; command assigns an internal keyword which is used in referencing via &lt;code&gt;\ref&lt;/code&gt; or &lt;code&gt;\cref&lt;/code&gt;, whereas &lt;code&gt;\tag&lt;/code&gt; will change the actual label that appears in the output.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;referencing-equationsfigures&#34;&gt;Referencing equations/figures&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;\Cref&lt;/code&gt; command will automatically determine what is being referenced based on the type of the object that was labelled. For example, &lt;code&gt;\ref{mylabel}&lt;/code&gt; will display as &amp;ldquo;Equation (1)&amp;rdquo; if &lt;code&gt;\label{mylabel}&lt;/code&gt; is next an equation and &amp;ldquo;Figure (1)&amp;rdquo; if &lt;code&gt;\label{mylabel}&lt;/code&gt; is close to a figure.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\autoref&lt;/code&gt; does something similar, but depends on a specific convention within the label. For example, you need to prepend an &lt;code&gt;eq:&lt;/code&gt; so  &lt;code&gt;\autoref{eq:mylabel}&lt;/code&gt; will show up as &amp;ldquo;Equation (1)&amp;quot;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;some-tips-and-tricks&#34;&gt;Some tips and tricks&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Check out &lt;a href=&#34;http://detexify.kirelabs.org/classify.html&#34;&gt;Detexify&lt;/a&gt; to find the correct math symbol by drawing it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Check out the &lt;a href=&#34;https://www.ctan.org/pkg/todonotes&#34;&gt;&lt;code&gt;todonotes&lt;/code&gt; package&lt;/a&gt; to add todo notes and comments to LaTeX files and pdf output.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use &lt;code&gt;include&lt;/code&gt; or &lt;code&gt;input&lt;/code&gt; to insert the content of another &lt;code&gt;.tex&lt;/code&gt; file where you want it. For example, you can maintain a math macro file that you use often or organize your sections/chapters in different files. Also, read &lt;a href=&#34;https://tex.stackexchange.com/questions/246/when-should-i-use-input-vs-include&#34;&gt;When should I use \input vs. \include?&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>MacOS</title>
      <link>https://UMichStatistics.github.io/ComputingClub/workshops/resources/macos/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>https://UMichStatistics.github.io/ComputingClub/workshops/resources/macos/</guid>
      <description>&lt;h2 id=&#34;package-and-application-manager-homebrewhttpsbrewsh&#34;&gt;Package and application manager (&lt;a href=&#34;https://brew.sh/&#34;&gt;Homebrew&lt;/a&gt;)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Installation: follow the instructions on the &lt;a href=&#34;https://brew.sh/&#34;&gt;website&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Basic commands:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;brew install &amp;lt;package&amp;gt;&lt;/code&gt; to install a particular package;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;brew cask install &amp;lt;application&amp;gt;&lt;/code&gt; to install an application (will appear in the &lt;code&gt;Applications&lt;/code&gt; folder);&lt;/li&gt;
&lt;li&gt;&lt;code&gt;brew search &amp;lt;name&amp;gt;&lt;/code&gt; to list available formulae containing &lt;code&gt;name&lt;/code&gt;;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Useful to export some (all) packages to another environment (&lt;code&gt;brew bundle&lt;/code&gt; command) resolving all dependencies.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;terminal-customization&#34;&gt;Terminal customization&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ohmyz.sh/&#34;&gt;Oh My ZSH!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;cool-apps&#34;&gt;Cool Apps&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://apps.apple.com/us/app/magnet/id441258766?mt=12&#34;&gt;Magnet window manager (App Store)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Package Development</title>
      <link>https://UMichStatistics.github.io/ComputingClub/workshops/resources/packages/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>https://UMichStatistics.github.io/ComputingClub/workshops/resources/packages/</guid>
      <description>&lt;h2 id=&#34;smoke-testing&#34;&gt;Smoke Testing&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Smoke_testing_(software)&#34;&gt;Wikipedia&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Smoke testing is a quick and easy way to check if code works.
If your program can&amp;rsquo;t even run without crashing, there&amp;rsquo;s no point to performing more fine-grained testing procedures.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;sqrt_1 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;function&lt;/span&gt;(x) {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;if &lt;/span&gt;(x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
        ret &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; x&lt;span style=&#34;color:#a6e22e&#34;&gt;^&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt;)
    } else {
        ret &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;x)&lt;span style=&#34;color:#a6e22e&#34;&gt;^&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;i&amp;#34;&lt;/span&gt;
    }
    &lt;span style=&#34;color:#a6e22e&#34;&gt;return&lt;/span&gt;(ret)
}

sqrt_2 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;function&lt;/span&gt;(x) {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;if &lt;/span&gt;(x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
        ret &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; x&lt;span style=&#34;color:#a6e22e&#34;&gt;^&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt;)
    } else {
        ret &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;paste0&lt;/span&gt;((&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;x)&lt;span style=&#34;color:#a6e22e&#34;&gt;^&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt;), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;i&amp;#34;&lt;/span&gt;)
    }
    &lt;span style=&#34;color:#a6e22e&#34;&gt;return&lt;/span&gt;(ret)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here is the smoke-test we might right.
Notice that the output is not checked; we just want to check if there are any errors.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;smoke_test &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;function&lt;/span&gt;(test_input) {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;sqrt_1&lt;/span&gt;(test_input) &lt;span style=&#34;color:#75715e&#34;&gt;# will raise an error&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;sqrt_2&lt;/span&gt;(test_input) &lt;span style=&#34;color:#75715e&#34;&gt;# will not raise an error, but is problematic&lt;/span&gt;
}

&lt;span style=&#34;color:#a6e22e&#34;&gt;smoke_test&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
&lt;span style=&#34;color:#a6e22e&#34;&gt;smoke_test&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;3.14&lt;/span&gt;)
&lt;span style=&#34;color:#a6e22e&#34;&gt;smoke_test&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;-2&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;the-unit-testing-paradigm&#34;&gt;The Unit Testing paradigm&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Test-driven_development&#34;&gt;Test-driven development&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;optimal-workflow-with-an-example&#34;&gt;Optimal workflow with an example&lt;/h3&gt;
&lt;p&gt;We want to implement a square root function with the following behaviour:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;returns the square root for positive input&lt;/li&gt;
&lt;li&gt;returns the complex square root for negative input&lt;/li&gt;
&lt;li&gt;is vectorized and return vectors/matrices with the same dimension&lt;/li&gt;
&lt;li&gt;if one input is negative, all outputs are in complex form&lt;/li&gt;
&lt;li&gt;raises an appropriate error if the input is not numeric (or any element of the input is not numeric)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Before writing the function, we could write the following tests:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sqrt(1) = 1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sqrt(-1) = 0+1i&lt;/code&gt; (depends on how complex numbers are implemented)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sqrt([0, 1]) = [0, 1]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sqrt([[0], [-1]]) = [[0+0i], [0+1i]]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sqrt(&amp;quot;a&amp;quot;)&lt;/code&gt; raises an error&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sqrt([0, &amp;quot;A&amp;quot;])&lt;/code&gt; raises an error&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Then, we implement our function checking tests constantly until all criterions are satisfied.&lt;/p&gt;
&lt;p&gt;Some (most) IDEs can automatically run all your tests in the background when any file is saved: this checks the current function your are implementing and also that you did not break any prior developments. This constant checking enable you to quickly diagnose the problem as only your latest edits change the result of tests.&lt;/p&gt;
&lt;h3 id=&#34;another-approach&#34;&gt;Another approach&lt;/h3&gt;
&lt;p&gt;In practice, before writing a specific function, we might not know exactly what it&amp;rsquo;s behaviour will be so it is not clear what tests to write beforehand. (I often get excited about implementing something and writing tests is boring&amp;hellip;)&lt;/p&gt;
&lt;p&gt;So, instead of writing the tests before the function, we can wait until we are satisfied with the behaviour of a function and &lt;em&gt;protect&lt;/em&gt; it with tests. Then, interactions with future functions will have some safeguards against bad input or output. Also, any further changes you perform on the function will have to satisfy the tests you previously wrote so any functions depending on the current function should not break.&lt;/p&gt;
&lt;p&gt;Furthermore, the creation of tests &lt;em&gt;after&lt;/em&gt; the function may tell you that you have to refactor some parts of your function. When first writing it, you might not have thought of some edge case and the time spent wirting tests may uncover those cases.&lt;/p&gt;
&lt;h3 id=&#34;what-to-test&#34;&gt;What to test&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Known output (e.g., simple cases you can compute by hand)&lt;/li&gt;
&lt;li&gt;In/out typing (behaviour under bad input, correct output given input)&lt;/li&gt;
&lt;li&gt;Output dimensions (column vs row vector, do you drop a dimension if it has length 1, etc.)&lt;/li&gt;
&lt;li&gt;Expected errors&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;some-notes&#34;&gt;Some notes&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Unit testing is great for interactive languages to detect if you are inadvertantly using global variables (defined outside the scope of a function). The test suite runs outside your scripts so tests will fail if you do so.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;unit-testing-in-r-using-the-testthat-package&#34;&gt;Unit Testing in &lt;code&gt;R&lt;/code&gt; using the &lt;code&gt;testthat&lt;/code&gt; package&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s create a simple &lt;code&gt;R&lt;/code&gt; package in &lt;code&gt;RStudio&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;New Project&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;R Package&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;New Project&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Put in some name&lt;/li&gt;
&lt;li&gt;Check &lt;code&gt;Open in new session&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let&amp;rsquo;s add the above defined functions in the &lt;code&gt;hello.R&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s create some tests:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Run &lt;code&gt;devtools::test()&lt;/code&gt; and type in &lt;code&gt;1&lt;/code&gt; to create the &lt;code&gt;tests&lt;/code&gt; directory, which contains a &lt;code&gt;testthat.R&lt;/code&gt; file managing imports and helps in running all tests at once, and a sub-directory &lt;code&gt;testthat&lt;/code&gt; where we will add some test;&lt;/li&gt;
&lt;li&gt;Run test using &lt;code&gt;Build&lt;/code&gt; &amp;gt; &lt;code&gt;Test Package&lt;/code&gt; or simply type &lt;code&gt;Ctrl+Shift+T&lt;/code&gt; or run &lt;code&gt;devtools::test()&lt;/code&gt;. You should see an output saying there are no tests in the &lt;code&gt;testthat&lt;/code&gt; directory (as expected).&lt;/li&gt;
&lt;li&gt;Create a &lt;code&gt;test_sqrt_1.R&lt;/code&gt; file in &lt;code&gt;tests/testthat&lt;/code&gt; (NB: all test file must start with &lt;code&gt;test&lt;/code&gt; so it can be discovered by the &lt;code&gt;testthat&lt;/code&gt; package.)&lt;/li&gt;
&lt;li&gt;At the head of the file, add `context(&amp;ldquo;Test sqrt functions&amp;rdquo;) which will yield a more verbose output.&lt;/li&gt;
&lt;li&gt;Add a first test (note the near-grammarly syntax: the first argument is what we are &lt;em&gt;testing that &lt;code&gt;sqrt_1()&lt;/code&gt; works on positive input&lt;/em&gt;):&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;test_that&lt;/span&gt;(
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;sqrt_1() works on positive input&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#75715e&#34;&gt;# what we are testing&lt;/span&gt;
    { &lt;span style=&#34;color:#75715e&#34;&gt;# the test itself, using expect statements&lt;/span&gt;
        &lt;span style=&#34;color:#a6e22e&#34;&gt;expect_equal&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;sqrt_1&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;), &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;)
        &lt;span style=&#34;color:#a6e22e&#34;&gt;expect_equal&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;sqrt_1&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;), &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;)
    }
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Run tests again and observe that our function passes all tests so far.&lt;/li&gt;
&lt;li&gt;Let&amp;rsquo;s add another succeding test, but on an expected non-successfull call:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;test_that&lt;/span&gt;(
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;sqrt_1 raises an error with negative inputs&amp;#34;&lt;/span&gt;,
    {
        &lt;span style=&#34;color:#a6e22e&#34;&gt;expect_error&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;sqrt_1&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;-1.0&lt;/span&gt;), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;non-numeric argument&amp;#34;&lt;/span&gt;)
    }
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Running all tests should again suceed.&lt;/li&gt;
&lt;li&gt;Now, let&amp;rsquo;s add a test which fails:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;test_that&lt;/span&gt;(
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;sqrt_1 returns imaginary numbers for negative inputs&amp;#34;&lt;/span&gt;,
    {
        &lt;span style=&#34;color:#a6e22e&#34;&gt;expect_match&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;sqrt&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;-1.0&lt;/span&gt;), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;1i&amp;#34;&lt;/span&gt;)
    }
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;unit-testing-in-python-using-the-unittests-package&#34;&gt;Unit Testing in &lt;code&gt;Python&lt;/code&gt; using the &lt;code&gt;unittests&lt;/code&gt; package&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.python.org/3/library/unittest.html&#34;&gt;&lt;code&gt;unittest&lt;/code&gt; documentation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Create a simple module:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;TestModule/
  sqrt.py
  test/
    test_sqrt.py
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;where&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Python&#34; data-lang=&#34;Python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# sqrt.py&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; math


&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sqrt&lt;/span&gt;(x):
	  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; math&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sqrt(x)
&lt;span style=&#34;color:#75715e&#34;&gt;# test_sqrt.py&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; unittest
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; sqrt


&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MyTestCase&lt;/span&gt;(unittest&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;TestCase):
	  &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test_something&lt;/span&gt;(self):
		  self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;assertEqual(
		      sqrt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sqrt(&lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;), 
		      &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;,
		      &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;what happened if the test failed&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
		  )


&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;__main__&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;:
	  unittest&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;main()

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run tests using&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;python -m unittest tests/test_sqrt.py
python -m unittest discover tests
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;discover tests&lt;/code&gt; implies that the &lt;code&gt;unittest&lt;/code&gt; package will search the &lt;code&gt;tests&lt;/code&gt; directory for all tests in there.&lt;/p&gt;
&lt;p&gt;The basic &lt;code&gt;unittest&lt;/code&gt; package is not well suited to check equality of &lt;code&gt;numpy&lt;/code&gt; arrays. Here&amp;rsquo;s a way to do it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Python&#34; data-lang=&#34;Python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; numpy &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; np


&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MyTest&lt;/span&gt;(unittest&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;TestCase):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;numpy_test_case&lt;/span&gt;(self):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
            np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;testing&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;asser_array_almost_equal(
                array1,
                array2
            )
            result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; True
        &lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AssertionError&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; error:
            result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; False
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;assertTrue(res, &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;what happened if the test failed&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In PyCharm, you can set up automatic testing as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;File&lt;/code&gt; &amp;gt; &lt;code&gt;Settings&lt;/code&gt; &amp;gt; &lt;code&gt;Tools&lt;/code&gt; &amp;gt; &lt;code&gt;Python Integrated Tools&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Select &lt;code&gt;Unittests&lt;/code&gt; under &lt;code&gt;Testing&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;In the &lt;code&gt;Project&lt;/code&gt; pane (the directory), left click on the &lt;code&gt;tests&lt;/code&gt; directory and select &lt;code&gt;Craete unittest in tests&lt;/code&gt; and click &lt;code&gt;OK&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Run tests once &lt;code&gt;Run&lt;/code&gt; &amp;gt; &lt;code&gt;Run Unittests in tests&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;In the &lt;code&gt;Run&lt;/code&gt; pane, click on &lt;code&gt;Toggle auto-test&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Now, any changes to files automatically triggers all tests to be run!&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;unit-testing-in-julia&#34;&gt;Unit Testing in Julia&lt;/h2&gt;
&lt;p&gt;This &lt;a href=&#34;https://julia.quantecon.org/more_julia/testing.html&#34;&gt;guide&lt;/a&gt; gives a nice, detailed walkthrough on how to set up a package in Julia with tests and integrate it with Travis and Codecov.&lt;/p&gt;
&lt;p&gt;Julia comes with the &amp;lsquo;Test&amp;rsquo; module built-in which offers basic unit tests.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Julia&#34; data-lang=&#34;Julia&#34;&gt;sqrt_im&lt;span style=&#34;color:#f92672&#34;&gt;&lt;/span&gt;(x&lt;span style=&#34;color:#f92672&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Real&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sqrt&lt;span style=&#34;color:#f92672&#34;&gt;&lt;/span&gt;(complex&lt;span style=&#34;color:#f92672&#34;&gt;&lt;/span&gt;(x&lt;span style=&#34;color:#f92672&#34;&gt;&lt;/span&gt;))

&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; Test&lt;span style=&#34;color:#f92672&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Unit tests (check for right value in both cases)&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;@test&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&lt;/span&gt; sqrt_im&lt;span style=&#34;color:#f92672&#34;&gt;&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;2.0&lt;/span&gt;)  â&lt;span style=&#34;color:#f92672&#34;&gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1.4142135623730951&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;@test&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&lt;/span&gt; sqrt_im&lt;span style=&#34;color:#f92672&#34;&gt;&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;5.0&lt;/span&gt;)  â&lt;span style=&#34;color:#f92672&#34;&gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1.4142135623730951&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;@test&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&lt;/span&gt; sqrt_im&lt;span style=&#34;color:#f92672&#34;&gt;&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2.0&lt;/span&gt;) â&lt;span style=&#34;color:#f92672&#34;&gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1.4142135623730951&lt;/span&gt;im

&lt;span style=&#34;color:#75715e&#34;&gt;# Random input&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; Random&lt;span style=&#34;color:#f92672&#34;&gt;&lt;/span&gt;
Z&lt;span style=&#34;color:#f92672&#34;&gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; randn&lt;span style=&#34;color:#f92672&#34;&gt;&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;MersenneTwister&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;555&lt;/span&gt;), &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)
&lt;span style=&#34;color:#a6e22e&#34;&gt;@test&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&lt;/span&gt; (sqrt_im&lt;span style=&#34;color:#f92672&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;(Z&lt;span style=&#34;color:#f92672&#34;&gt;&lt;/span&gt;))&lt;span style=&#34;color:#f92672&#34;&gt;.^&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; â&lt;span style=&#34;color:#f92672&#34;&gt;&lt;/span&gt; Z&lt;span style=&#34;color:#f92672&#34;&gt;&lt;/span&gt;

&lt;span style=&#34;color:#a6e22e&#34;&gt;@test&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&lt;/span&gt; sqrt&lt;span style=&#34;color:#f92672&#34;&gt;&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;2.0&lt;/span&gt;) â&lt;span style=&#34;color:#f92672&#34;&gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1.4142135623730951&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;@test&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&lt;/span&gt; sqrt&lt;span style=&#34;color:#f92672&#34;&gt;&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2.0&lt;/span&gt;) â&lt;span style=&#34;color:#f92672&#34;&gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1.414213562373095&lt;/span&gt;im
&lt;span style=&#34;color:#75715e&#34;&gt;# &amp;#34;test_broken&amp;#34; lets us mark tests we know give the wrong answer or raise an error&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;@test_broken&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&lt;/span&gt; sqrt&lt;span style=&#34;color:#f92672&#34;&gt;&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2.0&lt;/span&gt;) â&lt;span style=&#34;color:#f92672&#34;&gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1.414213562373095&lt;/span&gt;im
&lt;span style=&#34;color:#75715e&#34;&gt;# &amp;#34;test_broken&amp;#34; will return an Error testing value if the expression passes&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;@test_broken&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&lt;/span&gt; sqrt&lt;span style=&#34;color:#f92672&#34;&gt;&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;2.0&lt;/span&gt;) â&lt;span style=&#34;color:#f92672&#34;&gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1.4142135623730951&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# Julia requires a boolean result to pass; for smoke testing this can be alleviated&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# by just always returning true&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;@test&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;
  sqrt_im&lt;span style=&#34;color:#f92672&#34;&gt;&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2.0&lt;/span&gt;)
  &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

&lt;span style=&#34;color:#a6e22e&#34;&gt;@test&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;
  sqrt&lt;span style=&#34;color:#f92672&#34;&gt;&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2.0&lt;/span&gt;)
  &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;
</description>
    </item>
    
    <item>
      <title>Version Control</title>
      <link>https://UMichStatistics.github.io/ComputingClub/workshops/resources/versioncontrol/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>https://UMichStatistics.github.io/ComputingClub/workshops/resources/versioncontrol/</guid>
      <description>&lt;h2 id=&#34;git&#34;&gt;Git&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://git-scm.com/book/en/v2&#34;&gt;&lt;strong&gt;The Pro Git book&lt;/strong&gt;&lt;/a&gt; &lt;em&gt;by Scott Chacon and Ben Straub:&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://git-scm.com/book/en/v2/Git-Internals-Plumbing-and-Porcelain&#34;&gt;10. Git Internals&lt;/a&gt;: a deep understanding of git.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://ohshitgit.com/&#34;&gt;&lt;strong&gt;Oh Shit, Git!?!&lt;/strong&gt;&lt;/a&gt; and &lt;a href=&#34;http://www.dangitgit.com/&#34;&gt;&lt;strong&gt;Dangit, git!&lt;/strong&gt;&lt;/a&gt;: two go-to resources when encountering git problems.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>All things R</title>
      <link>https://UMichStatistics.github.io/ComputingClub/workshops/resources/r/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>https://UMichStatistics.github.io/ComputingClub/workshops/resources/r/</guid>
      <description>&lt;h2 id=&#34;cheat-sheets&#34;&gt;Cheat sheets&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A very handy &lt;a href=&#34;https://rstudio.com/wp-content/uploads/2015/03/ggplot2-cheatsheet.pdf&#34;&gt;&lt;code&gt;ggplot&lt;/code&gt; cheat sheet&lt;/a&gt; containing most functionalities and their syntax! (&lt;em&gt;Suggested by Vincenzo Loffredo&lt;/em&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A bunch of very useful &lt;a href=&#34;https://rstudio.com/resources/cheatsheets/&#34;&gt;R and RStudio cheat sheets&lt;/a&gt;. (&lt;em&gt;Suggested by Drew Yarger&lt;/em&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
