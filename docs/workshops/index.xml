<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Workshops | UM Statistics Computing Club</title>
    <link>https://UMichStatistics.github.io/ComputingClub/workshops/</link>
      <atom:link href="https://UMichStatistics.github.io/ComputingClub/workshops/index.xml" rel="self" type="application/rss+xml" />
    <description>Workshops</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>Â© 2019 UM Statistics PhD Student Council Computing Committee</copyright>
    <image>
      <url>https://UMichStatistics.github.io/ComputingClub/img/icon_512.png</url>
      <title>Workshops</title>
      <link>https://UMichStatistics.github.io/ComputingClub/workshops/</link>
    </image>
    
    <item>
      <title>Building &amp; Hosting a Personal Academic Website Using Hugo</title>
      <link>https://UMichStatistics.github.io/ComputingClub/workshops/hugo_academic/</link>
      <pubDate>Sun, 09 Sep 2018 00:00:00 +0000</pubDate>
      <guid>https://UMichStatistics.github.io/ComputingClub/workshops/hugo_academic/</guid>
      <description>

&lt;p&gt;In this tutorial, we will go through one way of setting up your personal academic website. We will cover&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;how to &lt;strong&gt;create a website&lt;/strong&gt;,&lt;/li&gt;
&lt;li&gt;two ways to &lt;strong&gt;host your website&lt;/strong&gt; for everyone to see!&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;Today&amp;rsquo;s talk is sad in the following sense:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You won&amp;rsquo;t learn anything that will make you a better statistician or researcher&lt;/li&gt;
&lt;li&gt;It is all based on &lt;strong&gt;looks&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It is still relevant professionally.&lt;/p&gt;

  &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&#34;why-have-a-personal-academic-website&#34;&gt;Why have a personal academic website&lt;/h2&gt;

&lt;p&gt;Having a personal website serves multiple goals:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Professional goals

&lt;ul&gt;
&lt;li&gt;Host a public resume&lt;/li&gt;
&lt;li&gt;List your publications, research interests, experience, etc.&lt;/li&gt;
&lt;li&gt;Allows people to find you and contact you&lt;/li&gt;
&lt;li&gt;Have an easy way to point to you&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Exposure for your work &amp;amp; research

&lt;ul&gt;
&lt;li&gt;Build workshops, courses and tutorials for everyone to access&lt;/li&gt;
&lt;li&gt;Present your research in alternative ways (other than articles, talks, posters, etc.)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Host content for courses

&lt;ul&gt;
&lt;li&gt;e.g. Canvas may have some limitations that a website might not have&lt;/li&gt;
&lt;li&gt;Make your teaching content public
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;Have a website before you need one:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It is a tidy place to keep track of your publications, talks, accomplishments, etc.&lt;/li&gt;
&lt;li&gt;You don&amp;rsquo;t want to spend time building a website when you&amp;rsquo;re looking for internships/jobs/grants/contributors/etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It is also a humbling experience:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The first time you set up your own website, you will most likely have very few things to put on it;&lt;/li&gt;
&lt;li&gt;Additional pressure and incentive to building your image and career.&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Online presence&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;

  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Other uses for simple website&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Research group page&lt;/li&gt;
&lt;li&gt;Student organization&lt;/li&gt;
&lt;li&gt;Documenting a software or package you developed&lt;/li&gt;
&lt;li&gt;Online book&lt;/li&gt;
&lt;li&gt;Artist portfolio&lt;/li&gt;
&lt;li&gt;Blogging
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;a-quick-primer-on-static-websites&#34;&gt;A quick primer on (static) websites&lt;/h2&gt;

&lt;p&gt;Most websites you encounter consist of &lt;code&gt;html&lt;/code&gt; (HyperText Markup Language) code and embed other languages to allow more interaction (&lt;code&gt;javascript&lt;/code&gt;, &lt;code&gt;Perl&lt;/code&gt;, etc.). A website contains multiples pages, often arranged into different subdirectories, just like regular file management. In particular, you can see a website as a tree where the accessible leaves are the &lt;code&gt;.html&lt;/code&gt; pages.&lt;/p&gt;

&lt;p&gt;Each page you access is a generally a &lt;code&gt;.html&lt;/code&gt; file, but in general no one actually write &lt;code&gt;html&lt;/code&gt; directly&amp;mdash;developers use programming languages that generate the &lt;code&gt;html&lt;/code&gt; for themselves. The style of a page&amp;mdash;colors, font, placement, etc.&amp;mdash;are generally contained in &lt;code&gt;css&lt;/code&gt; (Cascading Style Sheets) files. One goal of this workshop is to build a website without ever writing &lt;code&gt;html&lt;/code&gt; or &lt;code&gt;css&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;index.html&lt;/code&gt; has a special status within a directory. Accessing &lt;code&gt;site/subdir/&lt;/code&gt; automatically loads &lt;code&gt;site/subdir/index.html&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;about-hugo&#34;&gt;About Hugo&lt;/h2&gt;

&lt;p&gt;Hugo is a framework for developing websites. In particular, it generates the desired &lt;code&gt;html&lt;/code&gt; pages given some developer input in &lt;code&gt;Markdown&lt;/code&gt; files. The engine uses the &lt;code&gt;Go&lt;/code&gt; language to interpret the &lt;code&gt;Markdown&lt;/code&gt; and produce the corresponding &lt;code&gt;html&lt;/code&gt; files.&lt;/p&gt;

&lt;p&gt;In addition to &lt;code&gt;Markdown&lt;/code&gt; files, the developer also modify configuration files and &lt;code&gt;Markdown&lt;/code&gt; front matters, in simple &lt;code&gt;toml&lt;/code&gt; format, to determine meta-information about the website and control visual aspects. Both &lt;code&gt;Markdown&lt;/code&gt; and &lt;code&gt;toml&lt;/code&gt; languages have simple and intuitive syntax so the learning curve is very steep. Once the base website is set up, editing and adding content is only a matter of creating folder, creating and editing &lt;code&gt;Markdown&lt;/code&gt; files and editing &lt;code&gt;toml&lt;/code&gt; files.&lt;/p&gt;

&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;I will be using Hugo throughout the tutorial, but only to create the website.&lt;/p&gt;

&lt;p&gt;Hosting the website is completely independent of Hugo.&lt;/p&gt;

  &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&#34;markdown-file-front-matters&#34;&gt;Markdown file front matters&lt;/h2&gt;

&lt;p&gt;An important concept to understand about &lt;code&gt;Markdown&lt;/code&gt; files is the file layout. Each &lt;code&gt;.md&lt;/code&gt; file must contain a front matter part which describe some meta information about the content of the file; the front matter is then followed by the content itself in the body of the file. In the present context, the front matters will contain, among other things,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a high-level description of the page,&lt;/li&gt;
&lt;li&gt;the type of page to specify to the Hugo compiler,&lt;/li&gt;
&lt;li&gt;some details about indexing and referencing across pages.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;---
# Front matter
title: &amp;quot;MyFirstPost&amp;quot;
subtitle: &amp;quot;&amp;quot;
summary: &amp;quot;&amp;quot;
authors: []
tags: []
categories: []
date: 2019-10-04T18:18:52-04:00
lastmod: 2019-10-04T18:18:52-04:00
featured: false
draft: false
---
&amp;lt;!-- Body of the file --&amp;gt;
The content of the post goes here
...
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;the-academic-theme-for-hugo&#34;&gt;The Academic theme for Hugo&lt;/h2&gt;

&lt;p&gt;The way to use Hugo is to start from a template (or theme) and adapt it to your personal needs. Different themes implement different type of contents and are therefore suited for different purpose.&lt;/p&gt;

&lt;p&gt;In this tutorial we will consider the &lt;a href=&#34;https://themes.gohugo.io/academic/&#34; target=&#34;_blank&#34;&gt;Academic theme&lt;/a&gt; which is one of the more complete theme and is particularly well-suited for an academic website (as the name suggests!) Here are some of the things Academic allows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Blog posts&lt;/li&gt;
&lt;li&gt;Documentation&lt;/li&gt;
&lt;li&gt;Publications&lt;/li&gt;
&lt;li&gt;Talks&lt;/li&gt;
&lt;li&gt;Projects&lt;/li&gt;
&lt;li&gt;Multiple authors&lt;/li&gt;
&lt;li&gt;General pages&lt;/li&gt;
&lt;li&gt;Home page with widgets structure&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;more-hugo-themes-https-themes-gohugo-io&#34;&gt;&lt;a href=&#34;https://themes.gohugo.io/&#34; target=&#34;_blank&#34;&gt;More Hugo themes&lt;/a&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Resume-type themes

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://themes.gohugo.io/hugo-resume/&#34; target=&#34;_blank&#34;&gt;Resume theme&lt;/a&gt; is another slick theme I found.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Documentation-type themes (many equivalent options)&lt;/li&gt;
&lt;li&gt;Portofolio-type themes (many equivalent options)&lt;/li&gt;
&lt;li&gt;Blog-type themes (many equivalent options)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;alternatives-to-hugo&#34;&gt;Alternatives to Hugo&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;HTML from scratch

&lt;ul&gt;
&lt;li&gt;Highly not recommended&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;[Jekyll]()

&lt;ul&gt;
&lt;li&gt;Very similar to Hugo (all content is &lt;code&gt;Markdown&lt;/code&gt;, similar &lt;code&gt;shell&lt;/code&gt; commands)&lt;/li&gt;
&lt;li&gt;Slightly more complicated, but has slightly more features&lt;/li&gt;
&lt;li&gt;I have not found a theme that matches the capabilities of Academic for Hugo (see e.g. &lt;a href=&#34;https://ncsu-libraries.github.io/jekyll-academic-docs/&#34; target=&#34;_blank&#34;&gt;Jekyll Academic&lt;/a&gt; and its &lt;a href=&#34;http://ncsu-libraries.github.io/jekyll-academic/&#34; target=&#34;_blank&#34;&gt;demo site&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;GitHub Pages built-in themes (using Jekyll) can be up in a few clicks&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;WYSIWYG editor

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://wordpress.com/&#34; target=&#34;_blank&#34;&gt;WordPress&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://sites.google.com/site/sites/&#34; target=&#34;_blank&#34;&gt;Google Sites&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.wix.com/&#34; target=&#34;_blank&#34;&gt;WiX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;and many others&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;More advanced alternatives

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://grav.com/&#34; target=&#34;_blank&#34;&gt;Grav&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.drupal.org/&#34; target=&#34;_blank&#34;&gt;Drupal&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;main-takeaways&#34;&gt;Main takeaways&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Creating your own website is easy and you should definitely do it soon.&lt;/li&gt;
&lt;li&gt;People have made it easy for you to display your work; make use of all the tools available!&lt;/li&gt;
&lt;li&gt;Creating the content for your website, not building and deploying it, should consist most of the work you have to do.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Editing the Club&#39;s website</title>
      <link>https://UMichStatistics.github.io/ComputingClub/workshops/edit_site/</link>
      <pubDate>Sun, 09 Sep 2018 00:00:00 +0000</pubDate>
      <guid>https://UMichStatistics.github.io/ComputingClub/workshops/edit_site/</guid>
      <description>

&lt;p&gt;This website is powered the &lt;a href=&#34;https://sourcethemes.com/academic/&#34; target=&#34;_blank&#34;&gt;Academic theme&lt;/a&gt; for &lt;a href=&#34;https://gohugo.io/&#34; target=&#34;_blank&#34;&gt;Hugo&lt;/a&gt;. The &lt;a href=&#34;https://sourcethemes.com/academic/docs/&#34; target=&#34;_blank&#34;&gt;documentation&lt;/a&gt; they provide is quite extensive, so we summarize some of the important features relevant to the current website and present workflow ideas on how to update the website.&lt;/p&gt;

&lt;h2 id=&#34;hugo-and-markdown&#34;&gt;Hugo and Markdown&lt;/h2&gt;

&lt;p&gt;While the website consists of &lt;code&gt;html&lt;/code&gt; source interpreted by the visitor&amp;rsquo;s browser, its content is generated from Markdown. Hugo acts as an interpreter and compiler: it translates the file structure, the Markdown files and some configuration files (&lt;code&gt;yaml&lt;/code&gt; or &lt;code&gt;toml&lt;/code&gt;) into the &lt;code&gt;html&lt;/code&gt; files visible to the visitor.&lt;/p&gt;

&lt;h2 id=&#34;repository-description&#34;&gt;Repository description&lt;/h2&gt;

&lt;p&gt;The website is hosted on GitHub Pages. The static contents of the website appears in the &lt;code&gt;docs&lt;/code&gt; folder of the &lt;a href=&#34;https://github.com/UMichStatistics/&#34; target=&#34;_blank&#34;&gt;UmichStatistics&lt;/a&gt; GitHub organization repository &lt;a href=&#34;https://github.com/UMichStatistics/ComputingClub/&#34; target=&#34;_blank&#34;&gt;ComputingClub&lt;/a&gt;. The other folders and files of the repository are used to generate the website: only the &lt;code&gt;docs&lt;/code&gt; folder is necessary for the static website to be operational.&lt;/p&gt;

&lt;h2 id=&#34;deployment&#34;&gt;Deployment&lt;/h2&gt;

&lt;p&gt;Any change in the files outside of the &lt;code&gt;docs&lt;/code&gt; folder will not affect the public website. In order for the changes to become public, it is necessary to deploy the website, i.e. to use Hugo to update the files in &lt;code&gt;docs&lt;/code&gt;. Hence, anyone updating the website needs to run Hugo for the changes to appear. More details in &lt;a href=&#34;workflow/&#34; target=&#34;_blank&#34;&gt;Deployment&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The maintainers are currently considerings ways to automatically deploy the website upon a push to the repository. More to come&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;external-resources&#34;&gt;External resources&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://sourcethemes.com/academic/docs/&#34; target=&#34;_blank&#34;&gt;Academic Hugo Documentation&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://sourcethemes.com/academic/docs/page-builder/&#34; target=&#34;_blank&#34;&gt;Page Builder and widgets description&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://fontawesome.com/icons?d=gallery&amp;amp;m=free&#34; target=&#34;_blank&#34;&gt;Font Awesome Icons&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Functional Programming in R with purrr</title>
      <link>https://UMichStatistics.github.io/ComputingClub/workshops/purrr/</link>
      <pubDate>Sun, 09 Sep 2018 00:00:00 +0000</pubDate>
      <guid>https://UMichStatistics.github.io/ComputingClub/workshops/purrr/</guid>
      <description>

&lt;h2 id=&#34;what-is-functional-programming&#34;&gt;What is Functional Programming?&lt;/h2&gt;

&lt;blockquote&gt;
&#34;Functional programming is a programming paradigm ... that treats computation as the evaluation of mathematical functions and avoids changing-state and mutable data.&#34;
- Wikipedia
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Functions are like those in mathematics:

&lt;ol&gt;
&lt;li&gt;They always return the same output for a given input&lt;/li&gt;
&lt;li&gt;No side-effects (e.g. modification of global variables)&lt;/li&gt;
&lt;li&gt;Functions that satisfy (1-2) are called &lt;strong&gt;pure&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Functions are &lt;strong&gt;first-class&lt;/strong&gt; objects which can be passed as arguments to other functions (a.k.a. &lt;strong&gt;functionals&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;There is no changing state as the program runs; values are assigned once as functions of other values and inputs&lt;/li&gt;
&lt;li&gt;Everyday example: Microsoft Excel (without any VBA scripting!)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;why-use-functional-programming&#34;&gt;Why use functional programming?&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Through avoiding mutable state and composing pure functions, an FP program is also a pure function of its input&lt;/li&gt;
&lt;li&gt;This makes FP programs&amp;hellip;

&lt;ul&gt;
&lt;li&gt;Modular&lt;/li&gt;
&lt;li&gt;Predictable&lt;/li&gt;
&lt;li&gt;Easier to test&lt;/li&gt;
&lt;li&gt;Avoid common pitfalls involving changing state (e.g. global variables)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;why-use-functional-programming-1&#34;&gt;Why use functional programming?&lt;/h2&gt;

&lt;p&gt;Natural functionals in the FP paradigm include &amp;hellip;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;map&lt;/strong&gt;: (where $f: X \to Y$)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;$$((x_1, &amp;hellip;, x_n),  f) \to (f(x_1), &amp;hellip;, f(x_n)))$$&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;filter&lt;/strong&gt;: (where $f$ is a &lt;strong&gt;predicate&lt;/strong&gt; function $f:X \to \{0, 1\}$)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;$$((x_1, &amp;hellip;, x_n), f) \to (x_i : f(x_i) = 1)$$&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;reduce&lt;/strong&gt;: (where $f$ is an &lt;strong&gt;operator&lt;/strong&gt; function $f:X \times X \to X$)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;$$((x_1, &amp;hellip;, x_n), f) \to f(x_1, f(x_2, f(x_3, f(&amp;hellip;))))$$&lt;/p&gt;

&lt;h2 id=&#34;functional-programming-in-r&#34;&gt;Functional Programming in R&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;R is &lt;strong&gt;multi-paradigm&lt;/strong&gt;: it does not strictly adhere to FP principles, but it offers capability to use FP patterns&lt;/li&gt;
&lt;li&gt;Examples in base R include:

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Map&lt;/code&gt;, &lt;code&gt;lapply&lt;/code&gt;, &lt;code&gt;sapply&lt;/code&gt;, &lt;code&gt;apply&lt;/code&gt;, &lt;code&gt;vapply&lt;/code&gt;, &lt;code&gt;mapply&lt;/code&gt;
- &lt;code&gt;Reduce&lt;/code&gt;
- &lt;code&gt;Filter&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;purrr&lt;/code&gt; package by Hadley Wickham et al improves the the functional programming tools to R which are &lt;strong&gt;syntactically consistent&lt;/strong&gt; and &lt;strong&gt;type-safe&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;mapping&#34;&gt;Mapping&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;map&lt;/code&gt; is pretty much equivalent to &lt;code&gt;lapply&lt;/code&gt;, but has some additional features&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(purrr)
my_sqrt &amp;lt;- function(x) sqrt(x)
str(map(c(1,2,3,4,5), my_sqrt))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## List of 5
##  $ : num 1
##  $ : num 1.41
##  $ : num 1.73
##  $ : num 2
##  $ : num 2.24
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;str(lapply(c(1,2,3,4,5), my_sqrt))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## List of 5
##  $ : num 1
##  $ : num 1.41
##  $ : num 1.73
##  $ : num 2
##  $ : num 2.24
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;mapping-1&#34;&gt;Mapping&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;If we want an atomic double vector instead of a list, the &lt;code&gt;map_dbl&lt;/code&gt; ensures we always receive that.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;sapply&lt;/code&gt; does the same thing in this particular instance, but we can run into problems&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;str(map_dbl(c(1,2,3,4,5), my_sqrt))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##  num [1:5] 1 1.41 1.73 2 2.24
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;str(sapply(c(1,2,3,4,5), my_sqrt))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##  num [1:5] 1 1.41 1.73 2 2.24
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;problem-sapply-is-not-type-safe&#34;&gt;Problem: sapply is not type-safe!&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Example: Our colleague worked hard to make &lt;code&gt;my_sqrt&lt;/code&gt; handle any real number.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;They even overwrote the function &lt;code&gt;my_sqrt&lt;/code&gt; to make the transition seamless!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;sqrt_general &amp;lt;- function(x) {
if(x &amp;gt;= 0) sqrt(x)
else return(paste0(sqrt(abs(x)), &amp;quot;i&amp;quot;))
}

my_sqrt &amp;lt;- sqrt_general
my_sqrt(5)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] 2.236068
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;my_sqrt(-5)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;2.23606797749979i&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;problem-sapply-is-not-type-safe-1&#34;&gt;Problem: sapply is not type-safe!&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;str(sapply(c(1,2,3,4,5), my_sqrt))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##  num [1:5] 1 1.41 1.73 2 2.24
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;str(sapply(c(-1,2,-3,4,5), my_sqrt))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##  chr [1:5] &amp;quot;1i&amp;quot; &amp;quot;1.4142135623731&amp;quot; &amp;quot;1.73205080756888i&amp;quot; &amp;quot;2&amp;quot; ...
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;This is a great way to propogate errors. We have no way to guarentee whether sapply will return a &amp;ldquo;double&amp;rdquo; vector or a &amp;ldquo;string&amp;rdquo; vector.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;map-dbl-is-type-safe&#34;&gt;map_dbl is type-safe!&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;str(map_dbl(c(1,2,3,4,5), my_sqrt))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##  num [1:5] 1 1.41 1.73 2 2.24
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;try(str(map_dbl(c(-1,2,-3,4,5), my_sqrt)))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## Error : Can&#39;t coerce element 1 from a character to a double
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;map_*&lt;/code&gt; family of functions allows us to explictly impose which type we expect the output vector to be.

&lt;ul&gt;
&lt;li&gt;They &amp;ldquo;return an atomic vector of the indicated type (or die trying)&amp;rdquo; (documentation)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;map-chr-is-type-safe&#34;&gt;map_chr is type-safe!&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;map_chr(c(1,2,3,4,5), my_sqrt)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;1.000000&amp;quot; &amp;quot;1.414214&amp;quot; &amp;quot;1.732051&amp;quot; &amp;quot;2.000000&amp;quot; &amp;quot;2.236068&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;map_chr(c(-1,2,-3,4,5), my_sqrt)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;1i&amp;quot;                &amp;quot;1.414214&amp;quot;          &amp;quot;1.73205080756888i&amp;quot;
## [4] &amp;quot;2.000000&amp;quot;          &amp;quot;2.236068&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Suppose our colleague convinced our team lead that we should work exclusively with strings to accomodate complex numbers&lt;/li&gt;
&lt;li&gt;We use &lt;code&gt;map_chr&lt;/code&gt; to reflect that now we want the output to be a character vector.&lt;/li&gt;
&lt;li&gt;No errors now because both doubles and characters can be coerced to double.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;map-is-type-safe&#34;&gt;map_* is type-safe!&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sapply&lt;/code&gt; implicitly coerces to an atomic vector in the most general unit in the output for &amp;ldquo;convenience&amp;rdquo;, but this is very prone to unexpected errors.&lt;/li&gt;
&lt;li&gt;Most of the time, it is better to be explicit to catch any errors early and keep type stability.&lt;/li&gt;
&lt;li&gt;Can also use &lt;code&gt;_lgl&lt;/code&gt; for logical, &lt;code&gt;_int&lt;/code&gt; for integer, &lt;code&gt;_raw&lt;/code&gt; for raw type, &lt;code&gt;_dfr&lt;/code&gt; and &lt;code&gt;_dfc&lt;/code&gt; for data-table columns and rows.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;some-more-cool-features-of-map-anonymous-functions&#34;&gt;Some more cool features of map - anonymous functions&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Can construct function in the argument using symbol notation&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;map_dbl(c(1,2,3,4,5), ~.x^2 + .x + sin(.x))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1]  2.841471  6.909297 12.141120 19.243198 29.041076
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;some-more-cool-features-of-map-multiple-arguments&#34;&gt;Some more cool features of map - multiple arguments&lt;/h2&gt;

&lt;!-- - Can map multiple arguments.  --&gt;

&lt;ul&gt;
&lt;li&gt;Can use &lt;code&gt;map2_*&lt;/code&gt; for 2 argument functions; &lt;code&gt;pmap_*&lt;/code&gt; for n-argument functions&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The $i$th positional argument can be referenced with &lt;code&gt;..i&lt;/code&gt; syntax.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;map2_dbl(c(1,2,3,4,5), c(5,6,8,9,11), ~.x^2 + .y^2 + sin(.x))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1]  26.84147  40.90930  73.14112  96.24320 145.04108
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;pmap_dbl(list(1:5, 11:15, 21:25), ~..1 + ..2 + ..3)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] 33 36 39 42 45
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;pmap_dbl(list(1:5, 11:15, 21:25), function(x,y,z) x+y+z)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] 33 36 39 42 45
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;some-more-cool-features-of-map-imap&#34;&gt;Some more cool features of map - imap&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Can use &lt;code&gt;imap&lt;/code&gt; if the names of the input list/vector are important.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;imap_*(x, f(x,y))&lt;/code&gt; is equivalent to &lt;code&gt;map2_*(x, names(x), f(x,y))&lt;/code&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The type &lt;code&gt;dfr&lt;/code&gt; indicates that we expect the function to output a &lt;strong&gt;D&lt;/strong&gt;ata&lt;strong&gt;F&lt;/strong&gt;rame &lt;strong&gt;R&lt;/strong&gt;ow, which are then bound row-wise into a single dataframe.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(dplyr)
midterm_grades &amp;lt;- c(Dan = 100, Derek = 20, Rob = 100)
grade_tbl      &amp;lt;- imap_dfr(midterm_grades, ~tibble(name = .y, grade = .x, pass = .x &amp;gt;= 50))
grade_tbl
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 3
##   name  grade pass
##   &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;lgl&amp;gt;
## 1 Dan     100 TRUE
## 2 Derek    20 FALSE
## 3 Rob     100 TRUE
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;some-more-cool-features-of-map-map-if&#34;&gt;Some more cool features of map - map_if&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;map_if&lt;/code&gt; allows for use of a predicate function (or a vector) to only apply to certain values.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;It always returns a list (since the input and output could be of different types).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;str(map_if(midterm_grades, !grade_tbl$pass, ~NA_real_))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## List of 3
##  $ Dan  : num 100
##  $ Derek: num NA
##  $ Rob  : num 100
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;str(map_if(midterm_grades, ~.x &amp;lt;= 50, ~&amp;quot;FAIL!!&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## List of 3
##  $ Dan  : num 100
##  $ Derek: chr &amp;quot;FAIL!!&amp;quot;
##  $ Rob  : num 100
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;some-more-cool-features-of-map-map-if-1&#34;&gt;Some more cool features of map - map_if&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;modify_if&lt;/code&gt;`&lt;code&gt;is the same as&lt;/code&gt;map_if`, but enforces that the type is the same as the input&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;str(modify_if(midterm_grades, ~.x &amp;lt;= 50, ~NA_real_))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;##  Named num [1:3] 100 NA 100
##  - attr(*, &amp;quot;names&amp;quot;)= chr [1:3] &amp;quot;Dan&amp;quot; &amp;quot;Derek&amp;quot; &amp;quot;Rob&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;try(str(modify_if(midterm_grades, ~.x &amp;lt;= 50, ~&amp;quot;FAIL!!&amp;quot;)))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## Error : Can&#39;t coerce element 1 from a character to a double
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;keep-and-discard&#34;&gt;keep and discard&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;## Only keep students who passed
keep(midterm_grades, ~.x &amp;gt;= 50)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## Dan Rob
## 100 100
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;## Remove students who passed to get a list of students on notice
discard(midterm_grades, grade_tbl$pass)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## Derek
##    20
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;purrr-in-the-wild-succinctly-extract-results-from-different-models&#34;&gt;purrr in the wild - succinctly extract results from different models&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(dplyr)
library(magrittr)
aic_bic_tbl &amp;lt;- list(
  `Binary Poverty Indicator Interaction` = logis_res_census_binpoor,
  `Poverty Rate Interaction` = logis_res_census,
  `Income Interaction` = logis_res_census_inc_interact,
  `No Income` = logis_res_census_noincome,
  `No Poverty Rate` = logis_res_census_nopoor
) %&amp;gt;%
  map2_dfr(names(.), ~tibble(model = .y, aic = AIC(.x), bic = BIC(.x))) %&amp;gt;%
  arrange(aic)
aic_bic_tbl
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Example directly from my applied qual. (Could have used &lt;code&gt;imap_dfr&lt;/code&gt;!)
&lt;!-- - ```map2_df``` is equivalent to ```map2_dfr```, but may be deprecated in the future --&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;purrr&lt;/code&gt; was designed by the same authors as &lt;code&gt;dplyr&lt;/code&gt; and plays nicely with other &lt;code&gt;tidyverse&lt;/code&gt; functions (including the pipe object &lt;code&gt;%&amp;gt;%&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;purrr-in-the-wild-reduce-to-best-model&#34;&gt;purrr in the wild - reduce to best model&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;best_model &amp;lt;- list(
  `Binary Poverty Indicator Interaction` = logis_res_census_binpoor,
  `Poverty Rate Interaction` = logis_res_census,
  `Income Interaction` = logis_res_census_inc_interact,
  `No Income` = logis_res_census_noincome,
  `No Poverty Rate` = logis_res_census_nopoor
) %&amp;gt;%
  reduce(~ifelse(BIC(.x) &amp;lt; BIC(.y), .y, .x))
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;reduce&lt;/code&gt; function applies an operator function to reduce a vector to one value&lt;/li&gt;
&lt;li&gt;Illustrating example, but in reality it would be more efficient to use &lt;code&gt;which.max(aic_bic_tbl$bic)&lt;/code&gt; (because it uses C code and more efficient algorithm)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;conclusions&#34;&gt;Conclusions&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Through the Functional Programming (FP) paradigm, &lt;code&gt;purrr&lt;/code&gt; allows for more concise and error-robust R coding patterns&lt;/li&gt;
&lt;li&gt;Allows complex operations to be composed from simple building blocks by operating on user-specified functions&lt;/li&gt;
&lt;li&gt;Many, many more features are contained in &lt;code&gt;purrr&lt;/code&gt; beyond what was shown today&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;further-reading&#34;&gt;Further reading&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://purrr.tidyverse.org/&#34; target=&#34;_blank&#34;&gt;Tidyverse website&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://r4ds.had.co.nz/iteration.html&#34; target=&#34;_blank&#34;&gt;&amp;ldquo;Iteration&amp;rdquo; chapter in R for Data Science&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Hadley&amp;rsquo;s &lt;code&gt;plyr&lt;/code&gt; package which handles array and data.frame inputs.
&lt;!-- -  Functionality-wise, ```plyr &gt;= dplyr + purrr```  --&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;thank-you&#34;&gt;Thank You!&lt;/h1&gt;
</description>
    </item>
    
    <item>
      <title>Resources</title>
      <link>https://UMichStatistics.github.io/ComputingClub/workshops/resources/</link>
      <pubDate>Sun, 09 Sep 2018 00:00:00 +0000</pubDate>
      <guid>https://UMichStatistics.github.io/ComputingClub/workshops/resources/</guid>
      <description>&lt;p&gt;A collection of external resources classified by subjects (see menu on the left). Feel free to add any link to external resources here!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
